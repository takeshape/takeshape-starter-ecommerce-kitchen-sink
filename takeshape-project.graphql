"""Root of the Schema"""
type Query {
  taxonomySuggest(
    shapeNames: [String]
    shapeIds: [String]
    contentTypeNames: [String]
    contentTypeIds: [String]
    terms: String
    locale: String
    enableLocaleFallback: Boolean = true

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): TSSuggestionPaginatedList

  """List Versions for a piece of content"""
  getContentVersion(id: ID!, version: Int!, locale: String, enableLocaleFallback: Boolean = true): TSVersionResponse

  """List Versions for a piece of content"""
  getContentVersionList(id: ID!, from: Int, size: Int): TSVersionsPaginatedList

  """Get a Asset by ID"""
  getAsset(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Asset

  """Returns a list Asset in natural order."""
  getAssetList(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereAssetInput
  ): AssetPaginatedList

  """Get a TsStaticSite by ID"""
  getTsStaticSite(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): TsStaticSite

  """Returns a list TsStaticSite in natural order."""
  getTsStaticSiteList(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereTsStaticSiteInput
  ): TsStaticSitePaginatedList

  """Get product reviews for an SKU"""
  getProductReviews(sku: String): Reviews_ProductReviewsQueryResponse

  """Fetch Stripe products from the API Index."""
  getIndexedProductList(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereStripeProductInput
  ): Stripe_ProductPaginatedList

  """Get my profile"""
  getMyProfile: Profile

  """Get my subscriptions"""
  getMySubscriptions(expand: [String]): [Stripe_Subscription]

  """Get my invoices"""
  getMyInvoices(expand: [String], status: String, limit: Float, created: JSON, startingAfter: String): [Stripe_Invoice]

  """Get my payments"""
  getMyPayments(expand: [String], limit: Float, created: JSON, startingAfter: String, endingBefore: String): [Stripe_PaymentIntent]

  """Get Stripe products."""
  getStripeProducts: Stripe_ListProductsResponse

  """Get a profile by ID"""
  getProfile(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Profile

  """Returns a list of profiles in natural order."""
  getProfileList(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereProfileInput
  ): ProfilePaginatedList

  """
  <p>Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.</p>
  """
  Stripe_listProducts(active: Boolean, created: JSON, ending_before: String, expand: [String], ids: [String], limit: Int, shippable: Boolean, starting_after: String, url: String): Stripe_ListProductsResponse

  """
  <p>Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.</p>
  """
  Stripe_getProduct(expand: [String], id: String!): Stripe_Product
  Klaviyo_getLists: Klaviyo_GetListsResponse
  searchAssetIndex(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereAssetInput
  ): AssetSearchResults
  searchTsStaticSiteIndex(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereTsStaticSiteInput
  ): TsStaticSiteSearchResults
  searchProfileIndex(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereProfileInput
  ): ProfileSearchResults
  search(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true
    shapeNames: [String]
    shapeIds: [String]
    contentTypeNames: [String]
    contentTypeIds: [String]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereInput
  ): TSSearchableSearchResults
  withContext(locale: String, enableLocaleFallback: Boolean): WithContext
}

type TSSuggestionPaginatedList {
  items: [TSSuggestion]
  total: Int
}

type TSSuggestion {
  _id: ID
  _shapeId: ID
  _shapeName: String
  text: String
  summary: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input TSSearchSort {
  field: String!

  """"asc" for ascending or "desc" for descending"""
  order: String!
}

type TSVersionResponse {
  content: JSONObject
  schema: JSONObject
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type TSVersionsPaginatedList {
  items: [TSVersion]
  total: Int
  from: Int
  size: Int
}

type TSVersion {
  id: String
  version: Int
  status: String
  enabled: Boolean
  color: String
  updatedAt: String
  updatedBy: TSProjectMember
  item(locale: String, enableLocaleFallback: Boolean = true): TSVersionResponse
}

type TSProjectMember {
  id: ID
  email: String
  fullName: String
  role: String
  avatarPath: String
}

type Asset implements TSSearchable {
  title: String
  description: String
  filename: String!
  caption: JSON
  captionHtml(
    imageConfig: JSON
    images: TSImagesConfig

    """A prefix to be added to all CSS classes in the generated HTML"""
    classPrefix: String = ""

    """
    A prefix to be added to all id properties on header elements in the generated HTML
    """
    headerIdPrefix: String = ""
  ): String
  credit: JSON
  creditHtml(
    imageConfig: JSON
    images: TSImagesConfig

    """A prefix to be added to all CSS classes in the generated HTML"""
    classPrefix: String = ""

    """
    A prefix to be added to all id properties on header elements in the generated HTML
    """
    headerIdPrefix: String = ""
  ): String
  path: String!
  mimeType: String
  sourceUrl: String
  uploadStatus: String
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean @deprecated(reason: "Use _status instead")
  _enabledAt: String @deprecated(reason: "Use a custom date field instead")
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
  s3Key: String @deprecated(reason: "Use path instead")
  searchSummary: String
}

interface TSSearchable {
  _id: ID
  _shapeId: String
  searchSummary: String
}

input TSImagesConfig {
  """Default image parameters. See https://docs.imgix.com/apis/url """
  default: JSON

  """Small image parameters. See https://docs.imgix.com/apis/url """
  small: JSON

  """Medium image parameters. See https://docs.imgix.com/apis/url """
  medium: JSON

  """Large image parameters. See https://docs.imgix.com/apis/url """
  large: JSON
}

type TSUser {
  id: String!
  email: String!
  fullName: String!
  avatarPath: String
}

enum DefaultWorkflow {
  disabled
  enabled
}

type AssetPaginatedList {
  items: [Asset!]!
  total: Int!
}

input TSSearchSortInput {
  field: String!

  """"asc" for ascending or "desc" for descending"""
  order: String!
}

input TSWhereAssetInput {
  title: TSWhereStringInput
  description: TSWhereStringInput
  filename: TSWhereStringInput
  caption: TSWhereDraftjsInput
  credit: TSWhereDraftjsInput
  path: TSWhereStringInput
  mimeType: TSWhereStringInput
  sourceUrl: TSWhereStringInput
  uploadStatus: TSWhereStringInput
  _shapeId: TSWhereIDInput
  _id: TSWhereIDInput
  _version: TSWhereIntegerInput
  _shapeName: TSWhereStringInput
  _createdAt: TSWhereDateInput
  _updatedAt: TSWhereDateInput
  _schemaVersion: TSWhereNumberInput
  _status: TSWhereWorkflowInput
  _contentTypeId: TSWhereIDInput
  _contentTypeName: TSWhereStringInput
  s3Key: TSWhereStringInput
  AND: [TSWhereAssetInput]
  OR: [TSWhereAssetInput]
  NOT: TSWhereAssetInput
}

input TSWhereStringInput {
  """Exact match"""
  eq: String

  """Array of possible exact match values."""
  in: [String]

  """Full text searching with fuzzy matching."""
  match: String

  """
  Regular expression string matching. Use of * wildcards could degrade performance.
  """
  regexp: String
}

input TSWhereDraftjsInput {
  """Full text searching with fuzzy matching."""
  match: String
}

input TSWhereIDInput {
  """Exact match"""
  eq: String

  """Array of possible exact match values."""
  in: [String]
}

input TSWhereIntegerInput {
  """Exact match"""
  eq: Int

  """Less than"""
  lt: Int

  """Less than or equal"""
  lte: Int

  """Greater than"""
  gt: Int

  """Greater than or equal"""
  gte: Int

  """Array of possible exact match values."""
  in: [Int]
}

input TSWhereDateInput {
  """Exact match"""
  eq: String

  """Less than"""
  lt: String

  """Less than or equal"""
  lte: String

  """Greater than"""
  gt: String

  """Greater than or equal"""
  gte: String
}

input TSWhereNumberInput {
  """Exact match"""
  eq: Float

  """Less than"""
  lt: Float

  """Less than or equal"""
  lte: Float

  """Greater than"""
  gt: Float

  """Greater than or equal"""
  gte: Float

  """Array of possible exact match values."""
  in: [Float]
}

input TSWhereWorkflowInput {
  """Exact match"""
  eq: String

  """Less than"""
  lt: String

  """Less than or equal"""
  lte: String

  """Greater than"""
  gt: String

  """Greater than or equal"""
  gte: String

  """Array of possible exact match values."""
  in: [String]
}

type TsStaticSite implements TSSearchable {
  title: String!
  baseUrl: String
  provider: String!
  idKey: String
  secretKey: String
  destination: String!
  privateAcl: Boolean
  environmentVariables: [TsStaticSiteEnvironmentVariables]
  triggers: [TsStaticSiteTriggers]
  templateHash: String
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean @deprecated(reason: "Use _status instead")
  _enabledAt: String @deprecated(reason: "Use a custom date field instead")
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
}

type TsStaticSiteEnvironmentVariables {
  name: String
  value: String
}

type TsStaticSiteTriggers {
  contentTypeId: String
  status: String
}

type TsStaticSitePaginatedList {
  items: [TsStaticSite!]!
  total: Int!
}

input TSWhereTsStaticSiteInput {
  title: TSWhereStringInput
  baseUrl: TSWhereStringInput
  provider: TSWhereStringInput
  idKey: TSWhereStringInput
  destination: TSWhereStringInput
  privateAcl: TSWhereBooleanInput
  environmentVariables: TSWhereTsStaticSiteEnvironmentVariablesInput
  triggers: TSWhereTsStaticSiteTriggersInput
  templateHash: TSWhereStringInput
  _shapeId: TSWhereIDInput
  _id: TSWhereIDInput
  _version: TSWhereIntegerInput
  _shapeName: TSWhereStringInput
  _createdAt: TSWhereDateInput
  _updatedAt: TSWhereDateInput
  _schemaVersion: TSWhereNumberInput
  _status: TSWhereWorkflowInput
  _contentTypeId: TSWhereIDInput
  _contentTypeName: TSWhereStringInput
  AND: [TSWhereTsStaticSiteInput]
  OR: [TSWhereTsStaticSiteInput]
  NOT: TSWhereTsStaticSiteInput
}

input TSWhereBooleanInput {
  """Exact match"""
  eq: Boolean
}

input TSWhereTsStaticSiteEnvironmentVariablesInput {
  name: TSWhereStringInput
  value: TSWhereStringInput
}

input TSWhereTsStaticSiteTriggersInput {
  contentTypeId: TSWhereStringInput
  status: TSWhereStringInput
}

type Reviews_ProductReviewsQueryResponse {
  reviews: Reviews_ProductReviews
  store: Reviews_Store
  stats: Reviews_Stats
  word: String
  write_review_link: String
}

type Reviews_ProductReviews {
  total: Int
  per_page: Int
  current_page: Int
  last_page: Int
  from: Int
  to: Int
  data: [Reviews_ProductReview]
}

type Reviews_ProductReview {
  title: String
  product_review_id: Int
  review: String
  sku: String
  rating: Int
  date_created: String
  order_id: String
  reviewer: Reviews_ProductReviewer
  timeago: String
}

type Reviews_ProductReviewer {
  first_name: String
  last_name: String
  verified_buyer: String
  address: String
  profile_picture: String
  gravatar: String
}

type Reviews_Store {
  name: String
  logo: String
}

type Reviews_Stats {
  average: String
  count: Int
}

type Stripe_ProductPaginatedList {
  items: [Stripe_Product!]!
  total: Int!
}

type Stripe_Product implements TSSearchable {
  """Whether the product is currently available for purchase."""
  active: Boolean

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.
  """
  description: String

  """Unique identifier for the object."""
  id: String

  """
  A list of up to 8 URLs of images for this product, meant to be displayable to the customer.
  """
  images: [String]

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  The product's name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name will show up on associated invoice line item descriptions.
  """
  name: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_ProductObjectProperty
  package_dimensions: Stripe_PackageDimensions

  """Whether this product is shipped (i.e., physical goods)."""
  shippable: Boolean

  """
  Extra information about a product which will appear on your customer's credit card statement. In the case that multiple products are billed at once, the first statement descriptor will be used.
  """
  statement_descriptor: String
  tax_code: Stripe_ProductTaxCodeProperty

  """
  A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions.
  """
  unit_label: String

  """
  Time at which the object was last updated. Measured in seconds since the Unix epoch.
  """
  updated: Int

  """A URL of a publicly-accessible webpage for this product."""
  url: String
  prices: [Stripe_Price]
  _shapeId: String
  _id: ID
  searchSummary: String
}

enum Stripe_ProductObjectProperty {
  product
}

type Stripe_PackageDimensions {
  """Height, in inches."""
  height: Float

  """Length, in inches."""
  length: Float

  """Weight, in ounces."""
  weight: Float

  """Width, in inches."""
  width: Float
}

union Stripe_ProductTaxCodeProperty = WrappedString | Stripe_TaxCode

type WrappedString {
  value: String!
}

type Stripe_TaxCode {
  """
  A detailed description of which types of products the tax code represents.
  """
  description: String

  """Unique identifier for the object."""
  id: String

  """A short name for the tax code."""
  name: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_TaxCodeObjectProperty
}

enum Stripe_TaxCodeObjectProperty {
  tax_code
}

type Stripe_Price {
  """Whether the price can be used for new purchases."""
  active: Boolean

  """
  Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
  """
  billing_scheme: Stripe_PriceBillingSchemeProperty

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """A lookup key used to retrieve prices dynamically from a static string."""
  lookup_key: String

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """A brief description of the price, hidden from customers."""
  nickname: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_PriceObjectProperty

  """The Stripe product associated with this subscription."""
  product: Stripe_Product
  recurring: Stripe_Recurring

  """
  Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
  """
  tax_behavior: Stripe_PriceTaxBehaviorProperty

  """
  Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
  """
  tiers: [Stripe_PriceTier]

  """
  Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows.
  """
  tiers_mode: Stripe_PriceTiersModeProperty
  transform_quantity: Stripe_TransformQuantity

  """
  One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.
  """
  type: Stripe_PriceTypeProperty

  """
  The unit amount in %s to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.
  """
  unit_amount: Int

  """
  The unit amount in %s to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
  """
  unit_amount_decimal: String
}

enum Stripe_PriceBillingSchemeProperty {
  per_unit
  tiered
}

enum Stripe_PriceObjectProperty {
  price
}

type Stripe_Recurring {
  """
  Specifies a usage aggregation strategy for prices of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`.
  """
  aggregate_usage: Stripe_RecurringAggregateUsageProperty

  """
  The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
  """
  interval: Stripe_RecurringIntervalProperty

  """
  The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.
  """
  interval_count: Int

  """
  Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.
  """
  usage_type: Stripe_RecurringUsageTypeProperty
}

enum Stripe_RecurringAggregateUsageProperty {
  last_during_period
  last_ever
  max
  sum
}

enum Stripe_RecurringIntervalProperty {
  day
  month
  week
  year
}

enum Stripe_RecurringUsageTypeProperty {
  licensed
  metered
}

enum Stripe_PriceTaxBehaviorProperty {
  exclusive
  inclusive
  unspecified
}

type Stripe_PriceTier {
  """Price for the entire tier."""
  flat_amount: Int

  """
  Same as `flat_amount`, but contains a decimal value with at most 12 decimal places.
  """
  flat_amount_decimal: String

  """Per unit price for units relevant to the tier."""
  unit_amount: Int

  """
  Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
  """
  unit_amount_decimal: String

  """Up to and including to this quantity will be contained in the tier."""
  up_to: Int
}

enum Stripe_PriceTiersModeProperty {
  graduated
  volume
}

type Stripe_TransformQuantity {
  """Divide usage by this number."""
  divide_by: Int

  """After division, either round the result `up` or `down`."""
  round: Stripe_TransformQuantityRoundProperty
}

enum Stripe_TransformQuantityRoundProperty {
  down
  up
}

enum Stripe_PriceTypeProperty {
  one_time
  recurring
}

input TSWhereStripeProductInput {
  active: TSWhereBooleanInput
  created: TSWhereIntegerInput
  description: TSWhereStringInput
  id: TSWhereStringInput
  images: TSWhereStripe_ProductImagesInput
  livemode: TSWhereBooleanInput
  name: TSWhereStringInput
  object: TSWhereInput
  package_dimensions: TSWhereStripe_PackageDimensionsInput
  shippable: TSWhereBooleanInput
  statement_descriptor: TSWhereStringInput
  unit_label: TSWhereStringInput
  updated: TSWhereIntegerInput
  url: TSWhereStringInput
  _shapeId: TSWhereIDInput
  _id: TSWhereIDInput
  AND: [TSWhereStripeProductInput]
  OR: [TSWhereStripeProductInput]
  NOT: TSWhereStripeProductInput
}

input TSWhereStripe_ProductImagesInput {
  """Exact match"""
  eq: String

  """Array of possible exact match values."""
  in: [String]

  """Full text searching with fuzzy matching."""
  match: String

  """
  Regular expression string matching. Use of * wildcards could degrade performance.
  """
  regexp: String
}

input TSWhereInput {
  title: TSWhereStringInput
  description: TSWhereStringInput
  filename: TSWhereStringInput
  caption: TSWhereDraftjsInput
  credit: TSWhereDraftjsInput
  path: TSWhereStringInput
  mimeType: TSWhereStringInput
  sourceUrl: TSWhereStringInput
  uploadStatus: TSWhereStringInput
  _shapeId: TSWhereIDInput
  _id: TSWhereIDInput
  _version: TSWhereIntegerInput
  _shapeName: TSWhereStringInput
  _createdAt: TSWhereDateInput
  _updatedAt: TSWhereDateInput
  _schemaVersion: TSWhereNumberInput
  _status: TSWhereWorkflowInput
  _contentTypeId: TSWhereIDInput
  _contentTypeName: TSWhereStringInput
  s3Key: TSWhereStringInput
  baseUrl: TSWhereStringInput
  provider: TSWhereStringInput
  idKey: TSWhereStringInput
  destination: TSWhereStringInput
  privateAcl: TSWhereBooleanInput
  environmentVariables: TSWhereTsStaticSiteEnvironmentVariablesInput
  triggers: TSWhereTsStaticSiteTriggersInput
  templateHash: TSWhereStringInput
  active: TSWhereBooleanInput
  created: TSWhereIntegerInput
  id: TSWhereStringInput
  images: TSWhereStripe_ProductImagesInput
  livemode: TSWhereBooleanInput
  name: TSWhereStringInput
  object: TSWhereInput
  package_dimensions: TSWhereStripe_PackageDimensionsInput
  shippable: TSWhereBooleanInput
  statement_descriptor: TSWhereStringInput
  unit_label: TSWhereStringInput
  updated: TSWhereIntegerInput
  url: TSWhereStringInput
  email: TSWhereStringInput
  bio: TSWhereStringInput
  avatar: TSWhereAssetRelationshipInput
  stripeCustomerId: TSWhereStringInput
  AND: [TSWhereInput]
  OR: [TSWhereInput]
  NOT: TSWhereInput
}

input TSWhereStripe_PackageDimensionsInput {
  height: TSWhereNumberInput
  length: TSWhereNumberInput
  weight: TSWhereNumberInput
  width: TSWhereNumberInput
}

input TSWhereAssetRelationshipInput {
  title: TSWhereStringInput
  description: TSWhereStringInput
  filename: TSWhereStringInput
  caption: TSWhereDraftjsInput
  credit: TSWhereDraftjsInput
  path: TSWhereStringInput
  mimeType: TSWhereStringInput
  sourceUrl: TSWhereStringInput
  uploadStatus: TSWhereStringInput
  _shapeId: TSWhereIDInput
  _id: TSWhereIDInput
  _version: TSWhereIntegerInput
  _shapeName: TSWhereStringInput
  _createdAt: TSWhereDateInput
  _updatedAt: TSWhereDateInput
  _schemaVersion: TSWhereNumberInput
  _status: TSWhereWorkflowInput
  _contentTypeId: TSWhereIDInput
  _contentTypeName: TSWhereStringInput
  s3Key: TSWhereStringInput
}

type Profile implements TSSearchable {
  """"""
  id: String

  """"""
  name: String

  """"""
  email: String

  """"""
  bio: String
  avatar(locale: String, enableLocaleFallback: Boolean = true): Asset

  """"""
  stripeCustomerId: String

  """"""
  stripeCustomer: Stripe_Customer
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: TSUser
  _updatedAt: String
  _updatedBy: TSUser
  _schemaVersion: Float
  _enabled: Boolean @deprecated(reason: "Use _status instead")
  _enabledAt: String @deprecated(reason: "Use a custom date field instead")
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
  searchSummary: String
}

type Stripe_Customer {
  address: Stripe_Address

  """
  Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account as invoices are finalized.
  """
  balance: Int

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) the customer can be charged in for recurring billing purposes.
  """
  currency: String
  default_source: Stripe_CustomerDefaultSourceProperty

  """
  When the customer's latest invoice is billed by charging automatically, `delinquent` is `true` if the invoice's latest charge failed. When the customer's latest invoice is billed by sending an invoice, `delinquent` is `true` if the invoice isn't paid by its due date.
  
  If an invoice is marked uncollectible by [dunning](https://stripe.com/docs/billing/automatic-collection), `delinquent` doesn't get reset to `false`.
  """
  delinquent: Boolean

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String
  discount: Stripe_Discount

  """The customer's email address."""
  email: String

  """Unique identifier for the object."""
  id: String

  """The prefix for the customer used to generate unique invoice numbers."""
  invoice_prefix: String
  invoice_settings: Stripe_InvoiceSettingCustomerSetting

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """The customer's full name or business name."""
  name: String

  """The suffix of the customer's next invoice number, e.g., 0001."""
  next_invoice_sequence: Int

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_CustomerObjectProperty

  """The customer's phone number."""
  phone: String

  """The customer's preferred locales (languages), ordered by preference."""
  preferred_locales: [String]
  shipping: Stripe_Shipping

  """The customer's payment sources, if any."""
  sources: Stripe_CustomerSourcesProperty

  """The customer's current subscriptions, if any."""
  subscriptions: Stripe_CustomerSubscriptionsProperty
  tax: Stripe_CustomerTax

  """
  Describes the customer's tax exemption status. One of `none`, `exempt`, or `reverse`. When set to `reverse`, invoice and receipt PDFs include the text **"Reverse charge"**.
  """
  tax_exempt: Stripe_CustomerTaxExemptProperty

  """The customer's tax IDs."""
  tax_ids: Stripe_CustomerTaxIdsProperty
}

type Stripe_Address {
  """City, district, suburb, town, or village."""
  city: String

  """
  Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
  """
  country: String

  """Address line 1 (e.g., street, PO Box, or company name)."""
  line1: String

  """Address line 2 (e.g., apartment, suite, unit, or building)."""
  line2: String

  """ZIP or postal code."""
  postal_code: String

  """State, county, province, or region."""
  state: String
}

union Stripe_CustomerDefaultSourceProperty = WrappedString | Stripe_AlipayAccount | Stripe_BankAccount | Stripe_BitcoinReceiver | Stripe_Card | Stripe_Source

type Stripe_AlipayAccount {
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int
  customer: Stripe_AlipayAccountCustomerProperty

  """
  Uniquely identifies the account and will be the same across all Alipay account objects that are linked to the same Alipay account.
  """
  fingerprint: String

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_AlipayAccountObjectProperty

  """
  If the Alipay account object is not reusable, the exact amount that you can create a charge for.
  """
  payment_amount: Int

  """
  If the Alipay account object is not reusable, the exact currency that you can create a charge for.
  """
  payment_currency: String

  """
  True if you can create multiple payments using this account. If the account is reusable, then you can freely choose the amount of each payment.
  """
  reusable: Boolean

  """Whether this Alipay account object has ever been used for a payment."""
  used: Boolean

  """The username for the Alipay account."""
  username: String
}

union Stripe_AlipayAccountCustomerProperty = WrappedString | Stripe_Customer | Stripe_DeletedCustomer

type Stripe_DeletedCustomer {
  """Unique identifier for the object."""
  id: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_DeletedCustomerObjectProperty
}

enum Stripe_DeletedCustomerObjectProperty {
  customer
}

enum Stripe_AlipayAccountObjectProperty {
  alipay_account
}

type Stripe_BankAccount {
  account: Stripe_BankAccountAccountProperty

  """The name of the person or business that owns the bank account."""
  account_holder_name: String

  """
  The type of entity that holds the account. This can be either `individual` or `company`.
  """
  account_holder_type: String

  """
  A set of available payout methods for this bank account. Only values from this set should be passed as the `method` when creating a payout.
  """
  available_payout_methods: [Stripe_BankAccountAvailablePayoutMethodsProperty]

  """
  Name of the bank associated with the routing number (e.g., `WELLS FARGO`).
  """
  bank_name: String

  """
  Two-letter ISO code representing the country the bank account is located in.
  """
  country: String

  """
  Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.
  """
  currency: String
  customer: Stripe_BankAccountCustomerProperty

  """
  Whether this bank account is the default external account for its currency.
  """
  default_for_currency: Boolean

  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String

  """Unique identifier for the object."""
  id: String

  """The last four digits of the bank account number."""
  last4: String

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_BankAccountObjectProperty

  """The routing transit number for the bank account."""
  routing_number: String

  """
  For bank accounts, possible values are `new`, `validated`, `verified`, `verification_failed`, or `errored`. A bank account that hasn't had any activity or validation performed is `new`. If Stripe can determine that the bank account exists, its status will be `validated`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be `verified`. If the verification failed for any reason, such as microdeposit failure, the status will be `verification_failed`. If a transfer sent to this bank account fails, we'll set the status to `errored` and will not continue to send transfers until the bank details are updated.
  
  For external accounts, possible values are `new` and `errored`. Validations aren't run against external accounts because they're only used for payouts. This means the other statuses don't apply. If a transfer fails, the status is set to `errored` and transfers are stopped until account details are updated.
  """
  status: String
}

union Stripe_BankAccountAccountProperty = WrappedString | Stripe_Account

type Stripe_Account {
  business_profile: Stripe_AccountBusinessProfile

  """The business type."""
  business_type: Stripe_AccountBusinessTypeProperty
  capabilities: Stripe_AccountCapabilities

  """Whether the account can create live charges."""
  charges_enabled: Boolean
  company: Stripe_LegalEntityCompany
  controller: Stripe_AccountController

  """The account's country."""
  country: String

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts).
  """
  default_currency: String

  """
  Whether account details have been submitted. Standard accounts cannot receive payouts before this is true.
  """
  details_submitted: Boolean

  """
  An email address associated with the account. You can treat this as metadata: it is not used for authentication or messaging account holders.
  """
  email: String

  """
  External accounts (bank accounts and debit cards) currently attached to this account
  """
  external_accounts: Stripe_AccountExternalAccountsProperty

  """Unique identifier for the object."""
  id: String
  individual: Stripe_Person

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_AccountObjectProperty

  """Whether Stripe can send payouts to this account."""
  payouts_enabled: Boolean
  requirements: Stripe_AccountRequirements
  settings: Stripe_AccountSettings
  tos_acceptance: Stripe_AccountTosAcceptance

  """The Stripe account type. Can be `standard`, `express`, or `custom`."""
  type: Stripe_AccountTypeProperty
}

type Stripe_AccountBusinessProfile {
  """
  [The merchant category code for the account](https://stripe.com/docs/connect/setting-mcc). MCCs are used to classify businesses based on the goods or services they provide.
  """
  mcc: String

  """The customer-facing business name."""
  name: String

  """
  Internal-only description of the product sold or service provided by the business. It's used by Stripe for risk and underwriting purposes.
  """
  product_description: String
  support_address: Stripe_Address

  """A publicly available email address for sending support issues to."""
  support_email: String

  """A publicly available phone number to call with support issues."""
  support_phone: String

  """A publicly available website for handling support issues."""
  support_url: String

  """The business's publicly available website."""
  url: String
}

enum Stripe_AccountBusinessTypeProperty {
  company
  government_entity
  individual
  non_profit
}

type Stripe_AccountCapabilities {
  """
  The status of the ACSS Direct Debits payments capability of the account, or whether the account can directly process ACSS Direct Debits charges.
  """
  acss_debit_payments: Stripe_AccountCapabilitiesAcssDebitPaymentsProperty

  """
  The status of the Afterpay Clearpay capability of the account, or whether the account can directly process Afterpay Clearpay charges.
  """
  afterpay_clearpay_payments: Stripe_AccountCapabilitiesAfterpayClearpayPaymentsProperty

  """
  The status of the BECS Direct Debit (AU) payments capability of the account, or whether the account can directly process BECS Direct Debit (AU) charges.
  """
  au_becs_debit_payments: Stripe_AccountCapabilitiesAuBecsDebitPaymentsProperty

  """
  The status of the Bacs Direct Debits payments capability of the account, or whether the account can directly process Bacs Direct Debits charges.
  """
  bacs_debit_payments: Stripe_AccountCapabilitiesBacsDebitPaymentsProperty

  """
  The status of the Bancontact payments capability of the account, or whether the account can directly process Bancontact charges.
  """
  bancontact_payments: Stripe_AccountCapabilitiesBancontactPaymentsProperty

  """
  The status of the boleto payments capability of the account, or whether the account can directly process boleto charges.
  """
  boleto_payments: Stripe_AccountCapabilitiesBoletoPaymentsProperty

  """
  The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards
  """
  card_issuing: Stripe_AccountCapabilitiesCardIssuingProperty

  """
  The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges.
  """
  card_payments: Stripe_AccountCapabilitiesCardPaymentsProperty

  """
  The status of the Cartes Bancaires payments capability of the account, or whether the account can directly process Cartes Bancaires card charges in EUR currency.
  """
  cartes_bancaires_payments: Stripe_AccountCapabilitiesCartesBancairesPaymentsProperty

  """
  The status of the EPS payments capability of the account, or whether the account can directly process EPS charges.
  """
  eps_payments: Stripe_AccountCapabilitiesEpsPaymentsProperty

  """
  The status of the FPX payments capability of the account, or whether the account can directly process FPX charges.
  """
  fpx_payments: Stripe_AccountCapabilitiesFpxPaymentsProperty

  """
  The status of the giropay payments capability of the account, or whether the account can directly process giropay charges.
  """
  giropay_payments: Stripe_AccountCapabilitiesGiropayPaymentsProperty

  """
  The status of the GrabPay payments capability of the account, or whether the account can directly process GrabPay charges.
  """
  grabpay_payments: Stripe_AccountCapabilitiesGrabpayPaymentsProperty

  """
  The status of the iDEAL payments capability of the account, or whether the account can directly process iDEAL charges.
  """
  ideal_payments: Stripe_AccountCapabilitiesIdealPaymentsProperty

  """
  The status of the JCB payments capability of the account, or whether the account (Japan only) can directly process JCB credit card charges in JPY currency.
  """
  jcb_payments: Stripe_AccountCapabilitiesJcbPaymentsProperty

  """The status of the legacy payments capability of the account."""
  legacy_payments: Stripe_AccountCapabilitiesLegacyPaymentsProperty

  """
  The status of the OXXO payments capability of the account, or whether the account can directly process OXXO charges.
  """
  oxxo_payments: Stripe_AccountCapabilitiesOxxoPaymentsProperty

  """
  The status of the P24 payments capability of the account, or whether the account can directly process P24 charges.
  """
  p24_payments: Stripe_AccountCapabilitiesP24PaymentsProperty

  """
  The status of the SEPA Direct Debits payments capability of the account, or whether the account can directly process SEPA Direct Debits charges.
  """
  sepa_debit_payments: Stripe_AccountCapabilitiesSepaDebitPaymentsProperty

  """
  The status of the Sofort payments capability of the account, or whether the account can directly process Sofort charges.
  """
  sofort_payments: Stripe_AccountCapabilitiesSofortPaymentsProperty

  """The status of the tax reporting 1099-K (US) capability of the account."""
  tax_reporting_us_1099_k: Stripe_AccountCapabilitiesTaxReportingUs1099KProperty

  """
  The status of the tax reporting 1099-MISC (US) capability of the account.
  """
  tax_reporting_us_1099_misc: Stripe_AccountCapabilitiesTaxReportingUs1099MiscProperty

  """
  The status of the transfers capability of the account, or whether your platform can transfer funds to the account.
  """
  transfers: Stripe_AccountCapabilitiesTransfersProperty
}

enum Stripe_AccountCapabilitiesAcssDebitPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesAfterpayClearpayPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesAuBecsDebitPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesBacsDebitPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesBancontactPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesBoletoPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesCardIssuingProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesCardPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesCartesBancairesPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesEpsPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesFpxPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesGiropayPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesGrabpayPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesIdealPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesJcbPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesLegacyPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesOxxoPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesP24PaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesSepaDebitPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesSofortPaymentsProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesTaxReportingUs1099KProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesTaxReportingUs1099MiscProperty {
  active
  inactive
  pending
}

enum Stripe_AccountCapabilitiesTransfersProperty {
  active
  inactive
  pending
}

type Stripe_LegalEntityCompany {
  address: Stripe_Address
  address_kana: Stripe_LegalEntityJapanAddress
  address_kanji: Stripe_LegalEntityJapanAddress

  """
  Whether the company's directors have been provided. This Boolean will be `true` if you've manually indicated that all directors are provided via [the `directors_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-directors_provided).
  """
  directors_provided: Boolean

  """
  Whether the company's executives have been provided. This Boolean will be `true` if you've manually indicated that all executives are provided via [the `executives_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-executives_provided), or if Stripe determined that sufficient executives were provided.
  """
  executives_provided: Boolean

  """The company's legal name."""
  name: String

  """The Kana variation of the company's legal name (Japan only)."""
  name_kana: String

  """The Kanji variation of the company's legal name (Japan only)."""
  name_kanji: String

  """
  Whether the company's owners have been provided. This Boolean will be `true` if you've manually indicated that all owners are provided via [the `owners_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-owners_provided), or if Stripe determined that sufficient owners were provided. Stripe determines ownership requirements using both the number of owners provided and their total percent ownership (calculated by adding the `percent_ownership` of each owner together).
  """
  owners_provided: Boolean

  """The company's phone number (used for verification)."""
  phone: String

  """
  The category identifying the legal structure of the company or legal entity. See [Business structure](https://stripe.com/docs/connect/identity-verification#business-structure) for more details.
  """
  structure: Stripe_LegalEntityCompanyStructureProperty

  """Whether the company's business ID number was provided."""
  tax_id_provided: Boolean

  """
  The jurisdiction in which the `tax_id` is registered (Germany-based companies only).
  """
  tax_id_registrar: String

  """Whether the company's business VAT number was provided."""
  vat_id_provided: Boolean
  verification: Stripe_LegalEntityCompanyVerification
}

type Stripe_LegalEntityJapanAddress {
  """City/Ward."""
  city: String

  """
  Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
  """
  country: String

  """Block/Building number."""
  line1: String

  """Building details."""
  line2: String

  """ZIP or postal code."""
  postal_code: String

  """Prefecture."""
  state: String

  """Town/cho-me."""
  town: String
}

enum Stripe_LegalEntityCompanyStructureProperty {
  free_zone_establishment
  free_zone_llc
  government_instrumentality
  governmental_unit
  incorporated_non_profit
  limited_liability_partnership
  llc
  multi_member_llc
  private_company
  private_corporation
  private_partnership
  public_company
  public_corporation
  public_partnership
  single_member_llc
  sole_establishment
  sole_proprietorship
  tax_exempt_government_instrumentality
  unincorporated_association
  unincorporated_non_profit
}

type Stripe_LegalEntityCompanyVerification {
  document: Stripe_LegalEntityCompanyVerificationDocument
}

type Stripe_LegalEntityCompanyVerificationDocument {
  back: Stripe_LegalEntityCompanyVerificationDocumentBackProperty

  """
  A user-displayable string describing the verification state of this document.
  """
  details: String

  """
  One of `document_corrupt`, `document_expired`, `document_failed_copy`, `document_failed_greyscale`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_not_readable`, `document_not_uploaded`, `document_type_not_supported`, or `document_too_large`. A machine-readable code specifying the verification state for this document.
  """
  details_code: String
  front: Stripe_LegalEntityCompanyVerificationDocumentFrontProperty
}

union Stripe_LegalEntityCompanyVerificationDocumentBackProperty = WrappedString | Stripe_File

type Stripe_File {
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  The time at which the file expires and is no longer available in epoch seconds.
  """
  expires_at: Int

  """A filename for the file, suitable for saving to a filesystem."""
  filename: String

  """Unique identifier for the object."""
  id: String

  """
  A list of [file links](https://stripe.com/docs/api#file_links) that point at this file.
  """
  links: Stripe_FileLinksProperty

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_FileObjectProperty

  """
  The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file.
  """
  purpose: Stripe_FilePurposeProperty

  """The size in bytes of the file object."""
  size: Int

  """A user friendly title for the document."""
  title: String

  """The type of the file returned (e.g., `csv`, `pdf`, `jpg`, or `png`)."""
  type: String

  """
  The URL from which the file can be downloaded using your live secret API key.
  """
  url: String
}

"""
A list of [file links](https://stripe.com/docs/api#file_links) that point at this file.
"""
type Stripe_FileLinksProperty {
  """Details about each object."""
  data: [Stripe_FileLink!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_FileLinksObjectProperty!

  """The URL where this list can be accessed."""
  url: String!
}

type Stripe_FileLink {
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """Whether this link is already expired."""
  expired: Boolean

  """Time at which the link expires."""
  expires_at: Int
  file: Stripe_FileLinkFileProperty

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_FileLinkObjectProperty

  """The publicly accessible URL to download the file."""
  url: String
}

union Stripe_FileLinkFileProperty = WrappedString | Stripe_File

enum Stripe_FileLinkObjectProperty {
  file_link
}

enum Stripe_FileLinksObjectProperty {
  list
}

enum Stripe_FileObjectProperty {
  file
}

enum Stripe_FilePurposeProperty {
  account_requirement
  additional_verification
  business_icon
  business_logo
  customer_signature
  dispute_evidence
  document_provider_identity_document
  finance_report_run
  identity_document
  identity_document_downloadable
  pci_document
  selfie
  sigma_scheduled_query
  tax_document_user_upload
}

union Stripe_LegalEntityCompanyVerificationDocumentFrontProperty = WrappedString | Stripe_File

type Stripe_AccountController {
  """
  `true` if the Connect application retrieving the resource controls the account and can therefore exercise [platform controls](https://stripe.com/docs/connect/platform-controls-for-standard-accounts). Otherwise, this field is null.
  """
  is_controller: Boolean

  """
  The controller type. Can be `application`, if a Connect application controls the account, or `account`, if the account controls itself.
  """
  type: Stripe_AccountControllerTypeProperty
}

enum Stripe_AccountControllerTypeProperty {
  account
  application
}

"""
External accounts (bank accounts and debit cards) currently attached to this account
"""
type Stripe_AccountExternalAccountsProperty {
  """
  The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards.
  """
  data: [Stripe_AccountExternalAccountsDataProperty!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_AccountExternalAccountsObjectProperty!

  """The URL where this list can be accessed."""
  url: String!
}

union Stripe_AccountExternalAccountsDataProperty = Stripe_BankAccount | Stripe_Card

type Stripe_Card {
  account: Stripe_CardAccountProperty

  """City/District/Suburb/Town/Village."""
  address_city: String

  """Billing address country, if provided when creating card."""
  address_country: String

  """Address line 1 (Street address/PO Box/Company name)."""
  address_line1: String

  """
  If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  address_line1_check: String

  """Address line 2 (Apartment/Suite/Unit/Building)."""
  address_line2: String

  """State/County/Province/Region."""
  address_state: String

  """ZIP or postal code."""
  address_zip: String

  """
  If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  address_zip_check: String

  """
  A set of available payout methods for this card. Only values from this set should be passed as the `method` when creating a payout.
  """
  available_payout_methods: [Stripe_CardAvailablePayoutMethodsProperty]

  """
  Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`.
  """
  brand: String

  """
  Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
  """
  country: String

  """
  Three-letter [ISO code for currency](https://stripe.com/docs/payouts). Only applicable on accounts (not customers or recipients). The card can be used as a transfer destination for funds in this currency.
  """
  currency: String
  customer: Stripe_CardCustomerProperty

  """
  If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge).
  """
  cvc_check: String

  """Whether this card is the default external account for its currency."""
  default_for_currency: Boolean

  """
  (For tokenized numbers only.) The last four digits of the device account number.
  """
  dynamic_last4: String

  """Two-digit number representing the card's expiration month."""
  exp_month: Int

  """Four-digit number representing the card's expiration year."""
  exp_year: Int

  """
  Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
  
  *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
  """
  fingerprint: String

  """Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."""
  funding: String

  """Unique identifier for the object."""
  id: String

  """The last four digits of the card."""
  last4: String

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """Cardholder name."""
  name: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_CardObjectProperty
  recipient: Stripe_CardRecipientProperty

  """
  If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null.
  """
  tokenization_method: String
}

union Stripe_CardAccountProperty = WrappedString | Stripe_Account

enum Stripe_CardAvailablePayoutMethodsProperty {
  instant
  standard
}

union Stripe_CardCustomerProperty = WrappedString | Stripe_Customer | Stripe_DeletedCustomer

enum Stripe_CardObjectProperty {
  card
}

union Stripe_CardRecipientProperty = WrappedString | Stripe_Recipient

type Stripe_Recipient {
  active_account: Stripe_BankAccount

  """"""
  cards: Stripe_RecipientCardsProperty

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int
  default_card: Stripe_RecipientDefaultCardProperty

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String
  email: String

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject
  migrated_to: Stripe_RecipientMigratedToProperty

  """Full, legal name of the recipient."""
  name: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_RecipientObjectProperty
  rolled_back_from: Stripe_RecipientRolledBackFromProperty

  """Type of the recipient, one of `individual` or `corporation`."""
  type: String
}

""""""
type Stripe_RecipientCardsProperty {
  data: [Stripe_Card!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_RecipientCardsObjectProperty!

  """The URL where this list can be accessed."""
  url: String!
}

enum Stripe_RecipientCardsObjectProperty {
  list
}

union Stripe_RecipientDefaultCardProperty = WrappedString | Stripe_Card

union Stripe_RecipientMigratedToProperty = WrappedString | Stripe_Account

enum Stripe_RecipientObjectProperty {
  recipient
}

union Stripe_RecipientRolledBackFromProperty = WrappedString | Stripe_Account

enum Stripe_AccountExternalAccountsObjectProperty {
  list
}

type Stripe_Person {
  """The account the person is associated with."""
  account: String
  address: Stripe_Address
  address_kana: Stripe_LegalEntityJapanAddress
  address_kanji: Stripe_LegalEntityJapanAddress

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int
  dob: Stripe_LegalEntityDob

  """The person's email address."""
  email: String

  """The person's first name."""
  first_name: String

  """The Kana variation of the person's first name (Japan only)."""
  first_name_kana: String

  """The Kanji variation of the person's first name (Japan only)."""
  first_name_kanji: String

  """
  The person's gender (International regulations require either "male" or "female").
  """
  gender: String

  """Unique identifier for the object."""
  id: String

  """Whether the person's `id_number` was provided."""
  id_number_provided: Boolean

  """The person's last name."""
  last_name: String

  """The Kana variation of the person's last name (Japan only)."""
  last_name_kana: String

  """The Kanji variation of the person's last name (Japan only)."""
  last_name_kanji: String

  """The person's maiden name."""
  maiden_name: String

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """The country where the person is a national."""
  nationality: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_PersonObjectProperty

  """The person's phone number."""
  phone: String

  """
  Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction.
  """
  political_exposure: Stripe_PersonPoliticalExposureProperty
  relationship: Stripe_PersonRelationship
  requirements: Stripe_PersonRequirements

  """
  Whether the last four digits of the person's Social Security number have been provided (U.S. only).
  """
  ssn_last_4_provided: Boolean
  verification: Stripe_LegalEntityPersonVerification
}

type Stripe_LegalEntityDob {
  """The day of birth, between 1 and 31."""
  day: Int

  """The month of birth, between 1 and 12."""
  month: Int

  """The four-digit year of birth."""
  year: Int
}

enum Stripe_PersonObjectProperty {
  person
}

enum Stripe_PersonPoliticalExposureProperty {
  existing
  none
}

type Stripe_PersonRelationship {
  """
  Whether the person is a director of the account's legal entity. Currently only required for accounts in the EU. Directors are typically members of the governing board of the company, or responsible for ensuring the company meets its regulatory obligations.
  """
  director: Boolean

  """
  Whether the person has significant responsibility to control, manage, or direct the organization.
  """
  executive: Boolean

  """Whether the person is an owner of the account’s legal entity."""
  owner: Boolean

  """The percent owned by the person of the account's legal entity."""
  percent_ownership: Float

  """
  Whether the person is authorized as the primary representative of the account. This is the person nominated by the business to provide information about themselves, and general information about the account. There can only be one representative at any given time. At the time the account is created, this person should be set to the person responsible for opening the account.
  """
  representative: Boolean

  """The person's title (e.g., CEO, Support Engineer)."""
  title: String
}

type Stripe_PersonRequirements {
  """
  Fields that need to be collected to keep the person's account enabled. If not collected by the account's `current_deadline`, these fields appear in `past_due` as well, and the account is disabled.
  """
  currently_due: [String]

  """
  Fields that are `currently_due` and need to be collected again because validation or verification failed.
  """
  errors: [Stripe_AccountRequirementsError]

  """
  Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and the account's `current_deadline` becomes set.
  """
  eventually_due: [String]

  """
  Fields that weren't collected by the account's `current_deadline`. These fields need to be collected to enable the person's account.
  """
  past_due: [String]

  """
  Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`.
  """
  pending_verification: [String]
}

type Stripe_AccountRequirementsError {
  """The code for the type of error."""
  code: Stripe_AccountRequirementsErrorCodeProperty

  """
  An informative message that indicates the error type and provides additional details about the error.
  """
  reason: String

  """
  The specific user onboarding requirement field (in the requirements hash) that needs to be resolved.
  """
  requirement: String
}

enum Stripe_AccountRequirementsErrorCodeProperty {
  invalid_address_city_state_postal_code
  invalid_street_address
  invalid_value_other
  verification_document_address_mismatch
  verification_document_address_missing
  verification_document_corrupt
  verification_document_country_not_supported
  verification_document_dob_mismatch
  verification_document_duplicate_type
  verification_document_expired
  verification_document_failed_copy
  verification_document_failed_greyscale
  verification_document_failed_other
  verification_document_failed_test_mode
  verification_document_fraudulent
  verification_document_id_number_mismatch
  verification_document_id_number_missing
  verification_document_incomplete
  verification_document_invalid
  verification_document_issue_or_expiry_date_missing
  verification_document_manipulated
  verification_document_missing_back
  verification_document_missing_front
  verification_document_name_mismatch
  verification_document_name_missing
  verification_document_nationality_mismatch
  verification_document_not_readable
  verification_document_not_signed
  verification_document_not_uploaded
  verification_document_photo_mismatch
  verification_document_too_large
  verification_document_type_not_supported
  verification_failed_address_match
  verification_failed_business_iec_number
  verification_failed_document_match
  verification_failed_id_number_match
  verification_failed_keyed_identity
  verification_failed_keyed_match
  verification_failed_name_match
  verification_failed_other
  verification_failed_tax_id_match
  verification_failed_tax_id_not_issued
  verification_missing_executives
  verification_missing_owners
  verification_requires_additional_memorandum_of_associations
}

type Stripe_LegalEntityPersonVerification {
  additional_document: Stripe_LegalEntityPersonVerificationDocument

  """
  A user-displayable string describing the verification state for the person. For example, this may say "Provided identity information could not be verified".
  """
  details: String

  """
  One of `document_address_mismatch`, `document_dob_mismatch`, `document_duplicate_type`, `document_id_number_mismatch`, `document_name_mismatch`, `document_nationality_mismatch`, `failed_keyed_identity`, or `failed_other`. A machine-readable code specifying the verification state for the person.
  """
  details_code: String
  document: Stripe_LegalEntityPersonVerificationDocument

  """
  The state of verification for the person. Possible values are `unverified`, `pending`, or `verified`.
  """
  status: String
}

type Stripe_LegalEntityPersonVerificationDocument {
  back: Stripe_LegalEntityPersonVerificationDocumentBackProperty

  """
  A user-displayable string describing the verification state of this document. For example, if a document is uploaded and the picture is too fuzzy, this may say "Identity document is too unclear to read".
  """
  details: String

  """
  One of `document_corrupt`, `document_country_not_supported`, `document_expired`, `document_failed_copy`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_failed_greyscale`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_missing_back`, `document_missing_front`, `document_not_readable`, `document_not_uploaded`, `document_photo_mismatch`, `document_too_large`, or `document_type_not_supported`. A machine-readable code specifying the verification state for this document.
  """
  details_code: String
  front: Stripe_LegalEntityPersonVerificationDocumentFrontProperty
}

union Stripe_LegalEntityPersonVerificationDocumentBackProperty = WrappedString | Stripe_File

union Stripe_LegalEntityPersonVerificationDocumentFrontProperty = WrappedString | Stripe_File

enum Stripe_AccountObjectProperty {
  account
}

type Stripe_AccountRequirements {
  """
  Date by which the fields in `currently_due` must be collected to keep the account enabled. These fields may disable the account sooner if the next threshold is reached before they are collected.
  """
  current_deadline: Int

  """
  Fields that need to be collected to keep the account enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the account is disabled.
  """
  currently_due: [String]

  """
  If the account is disabled, this string describes why. Can be `requirements.past_due`, `requirements.pending_verification`, `listed`, `platform_paused`, `rejected.fraud`, `rejected.listed`, `rejected.terms_of_service`, `rejected.other`, `under_review`, or `other`.
  """
  disabled_reason: String

  """
  Fields that are `currently_due` and need to be collected again because validation or verification failed.
  """
  errors: [Stripe_AccountRequirementsError]

  """
  Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and `current_deadline` becomes set.
  """
  eventually_due: [String]

  """
  Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the account.
  """
  past_due: [String]

  """
  Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`.
  """
  pending_verification: [String]
}

type Stripe_AccountSettings {
  bacs_debit_payments: Stripe_AccountBacsDebitPaymentsSettings
  branding: Stripe_AccountBrandingSettings
  card_issuing: Stripe_AccountCardIssuingSettings
  card_payments: Stripe_AccountCardPaymentsSettings
  dashboard: Stripe_AccountDashboardSettings
  payments: Stripe_AccountPaymentsSettings
  payouts: Stripe_AccountPayoutSettings
  sepa_debit_payments: Stripe_AccountSepaDebitPaymentsSettings
}

type Stripe_AccountBacsDebitPaymentsSettings {
  """
  The Bacs Direct Debit Display Name for this account. For payments made with Bacs Direct Debit, this will appear on the mandate, and as the statement descriptor.
  """
  display_name: String
}

type Stripe_AccountBrandingSettings {
  icon: Stripe_AccountBrandingSettingsIconProperty
  logo: Stripe_AccountBrandingSettingsLogoProperty

  """
  A CSS hex color value representing the primary branding color for this account
  """
  primary_color: String

  """
  A CSS hex color value representing the secondary branding color for this account
  """
  secondary_color: String
}

union Stripe_AccountBrandingSettingsIconProperty = WrappedString | Stripe_File

union Stripe_AccountBrandingSettingsLogoProperty = WrappedString | Stripe_File

type Stripe_AccountCardIssuingSettings {
  tos_acceptance: Stripe_CardIssuingAccountTermsOfService
}

type Stripe_CardIssuingAccountTermsOfService {
  """
  The Unix timestamp marking when the account representative accepted the service agreement.
  """
  date: Int

  """
  The IP address from which the account representative accepted the service agreement.
  """
  ip: String

  """
  The user agent of the browser from which the account representative accepted the service agreement.
  """
  user_agent: String
}

type Stripe_AccountCardPaymentsSettings {
  decline_on: Stripe_AccountDeclineChargeOn

  """
  The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge. `statement_descriptor_prefix` is useful for maximizing descriptor space for the dynamic portion.
  """
  statement_descriptor_prefix: String
}

type Stripe_AccountDeclineChargeOn {
  """
  Whether Stripe automatically declines charges with an incorrect ZIP or postal code. This setting only applies when a ZIP or postal code is provided and they fail bank verification.
  """
  avs_failure: Boolean

  """
  Whether Stripe automatically declines charges with an incorrect CVC. This setting only applies when a CVC is provided and it fails bank verification.
  """
  cvc_failure: Boolean
}

type Stripe_AccountDashboardSettings {
  """
  The display name for this account. This is used on the Stripe Dashboard to differentiate between accounts.
  """
  display_name: String

  """
  The timezone used in the Stripe Dashboard for this account. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones).
  """
  timezone: String
}

type Stripe_AccountPaymentsSettings {
  """
  The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge.
  """
  statement_descriptor: String

  """
  The Kana variation of the default text that appears on credit card statements when a charge is made (Japan only)
  """
  statement_descriptor_kana: String

  """
  The Kanji variation of the default text that appears on credit card statements when a charge is made (Japan only)
  """
  statement_descriptor_kanji: String
}

type Stripe_AccountPayoutSettings {
  """
  A Boolean indicating if Stripe should try to reclaim negative balances from an attached bank account. See our [Understanding Connect Account Balances](https://stripe.com/docs/connect/account-balances) documentation for details. Default value is `true` for Express accounts and `false` for Custom accounts.
  """
  debit_negative_balances: Boolean
  schedule: Stripe_TransferSchedule

  """
  The text that appears on the bank account statement for payouts. If not set, this defaults to the platform's bank descriptor as set in the Dashboard.
  """
  statement_descriptor: String
}

type Stripe_TransferSchedule {
  """
  The number of days charges for the account will be held before being paid out.
  """
  delay_days: Int

  """
  How frequently funds will be paid out. One of `manual` (payouts only created via API call), `daily`, `weekly`, or `monthly`.
  """
  interval: String

  """
  The day of the month funds will be paid out. Only shown if `interval` is monthly. Payouts scheduled between the 29th and 31st of the month are sent on the last day of shorter months.
  """
  monthly_anchor: Int

  """
  The day of the week funds will be paid out, of the style 'monday', 'tuesday', etc. Only shown if `interval` is weekly.
  """
  weekly_anchor: String
}

type Stripe_AccountSepaDebitPaymentsSettings {
  """
  SEPA creditor identifier that identifies the company making the payment.
  """
  creditor_id: String
}

type Stripe_AccountTosAcceptance {
  """
  The Unix timestamp marking when the account representative accepted their service agreement
  """
  date: Int

  """
  The IP address from which the account representative accepted their service agreement
  """
  ip: String

  """The user's service agreement type"""
  service_agreement: String

  """
  The user agent of the browser from which the account representative accepted their service agreement
  """
  user_agent: String
}

enum Stripe_AccountTypeProperty {
  custom
  express
  standard
}

enum Stripe_BankAccountAvailablePayoutMethodsProperty {
  instant
  standard
}

union Stripe_BankAccountCustomerProperty = WrappedString | Stripe_Customer | Stripe_DeletedCustomer

enum Stripe_BankAccountObjectProperty {
  bank_account
}

type Stripe_BitcoinReceiver {
  """
  True when this bitcoin receiver has received a non-zero amount of bitcoin.
  """
  active: Boolean

  """The amount of `currency` that you are collecting as payment."""
  amount: Int

  """
  The amount of `currency` to which `bitcoin_amount_received` has been converted.
  """
  amount_received: Int

  """
  The amount of bitcoin that the customer should send to fill the receiver. The `bitcoin_amount` is denominated in Satoshi: there are 10^8 Satoshi in one bitcoin.
  """
  bitcoin_amount: Int

  """
  The amount of bitcoin that has been sent by the customer to this receiver.
  """
  bitcoin_amount_received: Int

  """
  This URI can be displayed to the customer as a clickable link (to activate their bitcoin client) or as a QR code (for mobile wallets).
  """
  bitcoin_uri: String

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) to which the bitcoin will be converted.
  """
  currency: String

  """The customer ID of the bitcoin receiver."""
  customer: String

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String

  """
  The customer's email address, set by the API call that creates the receiver.
  """
  email: String

  """
  This flag is initially false and updates to true when the customer sends the `bitcoin_amount` to this receiver.
  """
  filled: Boolean

  """Unique identifier for the object."""
  id: String

  """
  A bitcoin address that is specific to this receiver. The customer can send bitcoin to this address to fill the receiver.
  """
  inbound_address: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_BitcoinReceiverObjectProperty

  """
  The ID of the payment created from the receiver, if any. Hidden when viewing the receiver with a publishable key.
  """
  payment: String

  """The refund address of this bitcoin receiver."""
  refund_address: String

  """
  A list with one entry for each time that the customer sent bitcoin to the receiver. Hidden when viewing the receiver with a publishable key.
  """
  transactions: Stripe_BitcoinReceiverTransactionsProperty

  """
  This receiver contains uncaptured funds that can be used for a payment or refunded.
  """
  uncaptured_funds: Boolean

  """Indicate if this source is used for payment."""
  used_for_payment: Boolean
}

enum Stripe_BitcoinReceiverObjectProperty {
  bitcoin_receiver
}

"""
A list with one entry for each time that the customer sent bitcoin to the receiver. Hidden when viewing the receiver with a publishable key.
"""
type Stripe_BitcoinReceiverTransactionsProperty {
  """Details about each object."""
  data: [Stripe_BitcoinTransaction!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_BitcoinReceiverTransactionsObjectProperty!

  """The URL where this list can be accessed."""
  url: String!
}

type Stripe_BitcoinTransaction {
  """
  The amount of `currency` that the transaction was converted to in real-time.
  """
  amount: Int

  """The amount of bitcoin contained in the transaction."""
  bitcoin_amount: Int

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) to which this transaction was converted.
  """
  currency: String

  """Unique identifier for the object."""
  id: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_BitcoinTransactionObjectProperty

  """The receiver to which this transaction was sent."""
  receiver: String
}

enum Stripe_BitcoinTransactionObjectProperty {
  bitcoin_transaction
}

enum Stripe_BitcoinReceiverTransactionsObjectProperty {
  list
}

type Stripe_Source {
  ach_credit_transfer: Stripe_SourceTypeAchCreditTransfer
  ach_debit: Stripe_SourceTypeAchDebit
  acss_debit: Stripe_SourceTypeAcssDebit
  alipay: Stripe_SourceTypeAlipay

  """
  A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources.
  """
  amount: Int
  au_becs_debit: Stripe_SourceTypeAuBecsDebit
  bancontact: Stripe_SourceTypeBancontact
  card: Stripe_SourceTypeCard
  card_present: Stripe_SourceTypeCardPresent

  """
  The client secret of the source. Used for client-side retrieval using a publishable key.
  """
  client_secret: String
  code_verification: Stripe_SourceCodeVerificationFlow

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources.
  """
  currency: String

  """
  The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer.
  """
  customer: String
  eps: Stripe_SourceTypeEps

  """
  The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`.
  """
  flow: String
  giropay: Stripe_SourceTypeGiropay

  """Unique identifier for the object."""
  id: String
  ideal: Stripe_SourceTypeIdeal
  klarna: Stripe_SourceTypeKlarna

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject
  multibanco: Stripe_SourceTypeMultibanco

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_SourceObjectProperty
  owner: Stripe_SourceOwner
  p24: Stripe_SourceTypeP24
  receiver: Stripe_SourceReceiverFlow
  redirect: Stripe_SourceRedirectFlow
  sepa_debit: Stripe_SourceTypeSepaDebit
  sofort: Stripe_SourceTypeSofort
  source_order: Stripe_SourceOrder

  """
  Extra information about a source. This will appear on your customer's statement every time you charge the source.
  """
  statement_descriptor: String

  """
  The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge.
  """
  status: String
  three_d_secure: Stripe_SourceTypeThreeDSecure

  """
  The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used.
  """
  type: Stripe_SourceTypeProperty

  """
  Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned.
  """
  usage: String
  wechat: Stripe_SourceTypeWechat
}

type Stripe_SourceTypeAchCreditTransfer {
  account_number: String
  bank_name: String
  fingerprint: String
  refund_account_holder_name: String
  refund_account_holder_type: String
  refund_routing_number: String
  routing_number: String
  swift_code: String
}

type Stripe_SourceTypeAchDebit {
  bank_name: String
  country: String
  fingerprint: String
  last4: String
  routing_number: String
  type: String
}

type Stripe_SourceTypeAcssDebit {
  bank_address_city: String
  bank_address_line_1: String
  bank_address_line_2: String
  bank_address_postal_code: String
  bank_name: String
  category: String
  country: String
  fingerprint: String
  last4: String
  routing_number: String
}

type Stripe_SourceTypeAlipay {
  data_string: String
  native_url: String
  statement_descriptor: String
}

type Stripe_SourceTypeAuBecsDebit {
  bsb_number: String
  fingerprint: String
  last4: String
}

type Stripe_SourceTypeBancontact {
  bank_code: String
  bank_name: String
  bic: String
  iban_last4: String
  preferred_language: String
  statement_descriptor: String
}

type Stripe_SourceTypeCard {
  address_line1_check: String
  address_zip_check: String
  brand: String
  country: String
  cvc_check: String
  dynamic_last4: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  funding: String
  last4: String
  name: String
  three_d_secure: String
  tokenization_method: String
}

type Stripe_SourceTypeCardPresent {
  application_cryptogram: String
  application_preferred_name: String
  authorization_code: String
  authorization_response_code: String
  brand: String
  country: String
  cvm_type: String
  data_type: String
  dedicated_file_name: String
  emv_auth_data: String
  evidence_customer_signature: String
  evidence_transaction_certificate: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  funding: String
  last4: String
  pos_device_id: String
  pos_entry_mode: String
  read_method: String
  reader: String
  terminal_verification_results: String
  transaction_status_information: String
}

type Stripe_SourceCodeVerificationFlow {
  """
  The number of attempts remaining to authenticate the source object with a verification code.
  """
  attempts_remaining: Int

  """
  The status of the code verification, either `pending` (awaiting verification, `attempts_remaining` should be greater than 0), `succeeded` (successful verification) or `failed` (failed verification, cannot be verified anymore as `attempts_remaining` should be 0).
  """
  status: String
}

type Stripe_SourceTypeEps {
  reference: String
  statement_descriptor: String
}

type Stripe_SourceTypeGiropay {
  bank_code: String
  bank_name: String
  bic: String
  statement_descriptor: String
}

type Stripe_SourceTypeIdeal {
  bank: String
  bic: String
  iban_last4: String
  statement_descriptor: String
}

type Stripe_SourceTypeKlarna {
  background_image_url: String
  client_token: String
  first_name: String
  last_name: String
  locale: String
  logo_url: String
  page_title: String
  pay_later_asset_urls_descriptive: String
  pay_later_asset_urls_standard: String
  pay_later_name: String
  pay_later_redirect_url: String
  pay_now_asset_urls_descriptive: String
  pay_now_asset_urls_standard: String
  pay_now_name: String
  pay_now_redirect_url: String
  pay_over_time_asset_urls_descriptive: String
  pay_over_time_asset_urls_standard: String
  pay_over_time_name: String
  pay_over_time_redirect_url: String
  payment_method_categories: String
  purchase_country: String
  purchase_type: String
  redirect_url: String
  shipping_delay: Int
  shipping_first_name: String
  shipping_last_name: String
}

type Stripe_SourceTypeMultibanco {
  entity: String
  reference: String
  refund_account_holder_address_city: String
  refund_account_holder_address_country: String
  refund_account_holder_address_line1: String
  refund_account_holder_address_line2: String
  refund_account_holder_address_postal_code: String
  refund_account_holder_address_state: String
  refund_account_holder_name: String
  refund_iban: String
}

enum Stripe_SourceObjectProperty {
  source
}

type Stripe_SourceOwner {
  address: Stripe_Address

  """Owner's email address."""
  email: String

  """Owner's full name."""
  name: String

  """Owner's phone number (including extension)."""
  phone: String
  verified_address: Stripe_Address

  """
  Verified owner's email address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verified_email: String

  """
  Verified owner's full name. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verified_name: String

  """
  Verified owner's phone number (including extension). Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verified_phone: String
}

type Stripe_SourceTypeP24 {
  reference: String
}

type Stripe_SourceReceiverFlow {
  """
  The address of the receiver source. This is the value that should be communicated to the customer to send their funds to.
  """
  address: String

  """
  The total amount that was moved to your balance. This is almost always equal to the amount charged. In rare cases when customers deposit excess funds and we are unable to refund those, those funds get moved to your balance and show up in amount_charged as well. The amount charged is expressed in the source's currency.
  """
  amount_charged: Int

  """
  The total amount received by the receiver source. `amount_received = amount_returned + amount_charged` should be true for consumed sources unless customers deposit excess funds. The amount received is expressed in the source's currency.
  """
  amount_received: Int

  """
  The total amount that was returned to the customer. The amount returned is expressed in the source's currency.
  """
  amount_returned: Int

  """Type of refund attribute method, one of `email`, `manual`, or `none`."""
  refund_attributes_method: String

  """
  Type of refund attribute status, one of `missing`, `requested`, or `available`.
  """
  refund_attributes_status: String
}

type Stripe_SourceRedirectFlow {
  """
  The failure reason for the redirect, either `user_abort` (the customer aborted or dropped out of the redirect flow), `declined` (the authentication failed or the transaction was declined), or `processing_error` (the redirect failed due to a technical error). Present only if the redirect status is `failed`.
  """
  failure_reason: String

  """
  The URL you provide to redirect the customer to after they authenticated their payment.
  """
  return_url: String

  """
  The status of the redirect, either `pending` (ready to be used by your customer to authenticate the transaction), `succeeded` (succesful authentication, cannot be reused) or `not_required` (redirect should not be used) or `failed` (failed authentication, cannot be reused).
  """
  status: String

  """
  The URL provided to you to redirect a customer to as part of a `redirect` authentication flow.
  """
  url: String
}

type Stripe_SourceTypeSepaDebit {
  bank_code: String
  branch_code: String
  country: String
  fingerprint: String
  last4: String
  mandate_reference: String
  mandate_url: String
}

type Stripe_SourceTypeSofort {
  bank_code: String
  bank_name: String
  bic: String
  country: String
  iban_last4: String
  preferred_language: String
  statement_descriptor: String
}

type Stripe_SourceOrder {
  """
  A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order.
  """
  amount: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """The email address of the customer placing the order."""
  email: String

  """List of items constituting the order."""
  items: [Stripe_SourceOrderItem]
  shipping: Stripe_Shipping
}

type Stripe_SourceOrderItem {
  """The amount (price) for this order item."""
  amount: Int

  """This currency of this order item. Required when `amount` is present."""
  currency: String

  """Human-readable description for this order item."""
  description: String

  """
  The ID of the associated object for this line item. Expandable if not null (e.g., expandable to a SKU).
  """
  parent: String

  """
  The quantity of this order item. When type is `sku`, this is the number of instances of the SKU to be ordered.
  """
  quantity: Int

  """The type of this order item. Must be `sku`, `tax`, or `shipping`."""
  type: String
}

type Stripe_Shipping {
  address: Stripe_Address

  """
  The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc.
  """
  carrier: String

  """Recipient name."""
  name: String

  """Recipient phone (including extension)."""
  phone: String

  """
  The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.
  """
  tracking_number: String
}

type Stripe_SourceTypeThreeDSecure {
  address_line1_check: String
  address_zip_check: String
  authenticated: Boolean
  brand: String
  card: String
  country: String
  customer: String
  cvc_check: String
  dynamic_last4: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  funding: String
  last4: String
  name: String
  three_d_secure: String
  tokenization_method: String
}

enum Stripe_SourceTypeProperty {
  ach_credit_transfer
  ach_debit
  acss_debit
  alipay
  au_becs_debit
  bancontact
  card
  card_present
  eps
  giropay
  ideal
  klarna
  multibanco
  p24
  sepa_debit
  sofort
  three_d_secure
  wechat
}

type Stripe_SourceTypeWechat {
  prepay_id: String
  qr_code_url: String
  statement_descriptor: String
}

type Stripe_Discount {
  """
  The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode.
  """
  checkout_session: String
  coupon: Stripe_Coupon
  customer: Stripe_DiscountCustomerProperty

  """
  If the coupon has a duration of `repeating`, the date that this discount will end. If the coupon has a duration of `once` or `forever`, this attribute will be null.
  """
  end: Int

  """
  The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array.
  """
  id: String

  """
  The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice.
  """
  invoice: String

  """
  The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item.
  """
  invoice_item: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_DiscountObjectProperty
  promotion_code: Stripe_DiscountPromotionCodeProperty

  """Date that the coupon was applied."""
  start: Int

  """
  The subscription that this coupon is applied to, if it is applied to a particular subscription.
  """
  subscription: String
}

type Stripe_Coupon {
  """
  Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer.
  """
  amount_off: Int
  applies_to: Stripe_CouponAppliesTo

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  If `amount_off` has been set, the three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the amount to take off.
  """
  currency: String

  """
  One of `forever`, `once`, and `repeating`. Describes how long a customer who applies this coupon will get the discount.
  """
  duration: Stripe_CouponDurationProperty

  """
  If `duration` is `repeating`, the number of months the coupon applies. Null if coupon `duration` is `forever` or `once`.
  """
  duration_in_months: Int

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.
  """
  max_redemptions: Int

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  Name of the coupon displayed to customers on for instance invoices or receipts.
  """
  name: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_CouponObjectProperty

  """
  Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent_off of 50 will make a %s100 invoice %s50 instead.
  """
  percent_off: Float

  """Date after which the coupon can no longer be redeemed."""
  redeem_by: Int

  """Number of times this coupon has been applied to a customer."""
  times_redeemed: Int

  """
  Taking account of the above properties, whether this coupon can still be applied to a customer.
  """
  valid: Boolean
}

type Stripe_CouponAppliesTo {
  """A list of product IDs this coupon applies to"""
  products: [String]
}

enum Stripe_CouponDurationProperty {
  forever
  once
  repeating
}

enum Stripe_CouponObjectProperty {
  coupon
}

union Stripe_DiscountCustomerProperty = WrappedString | Stripe_Customer | Stripe_DeletedCustomer

enum Stripe_DiscountObjectProperty {
  discount
}

union Stripe_DiscountPromotionCodeProperty = WrappedString | Stripe_PromotionCode

type Stripe_PromotionCode {
  """
  Whether the promotion code is currently active. A promotion code is only active if the coupon is also valid.
  """
  active: Boolean

  """
  The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for each customer.
  """
  code: String
  coupon: Stripe_Coupon

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int
  customer: Stripe_PromotionCodeCustomerProperty

  """Date at which the promotion code can no longer be redeemed."""
  expires_at: Int

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """Maximum number of times this promotion code can be redeemed."""
  max_redemptions: Int

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_PromotionCodeObjectProperty
  restrictions: Stripe_PromotionCodesResourceRestrictions

  """Number of times this promotion code has been used."""
  times_redeemed: Int
}

union Stripe_PromotionCodeCustomerProperty = WrappedString | Stripe_Customer | Stripe_DeletedCustomer

enum Stripe_PromotionCodeObjectProperty {
  promotion_code
}

type Stripe_PromotionCodesResourceRestrictions {
  """
  A Boolean indicating if the Promotion Code should only be redeemed for Customers without any successful payments or invoices
  """
  first_time_transaction: Boolean

  """
  Minimum amount required to redeem this Promotion Code into a Coupon (e.g., a purchase must be $100 or more to work).
  """
  minimum_amount: Int

  """
  Three-letter [ISO code](https://stripe.com/docs/currencies) for minimum_amount
  """
  minimum_amount_currency: String
}

type Stripe_InvoiceSettingCustomerSetting {
  """Default custom fields to be displayed on invoices for this customer."""
  custom_fields: [Stripe_InvoiceSettingCustomField]
  default_payment_method: Stripe_InvoiceSettingCustomerSettingDefaultPaymentMethodProperty

  """Default footer to be displayed on invoices for this customer."""
  footer: String
}

type Stripe_InvoiceSettingCustomField {
  """The name of the custom field."""
  name: String

  """The value of the custom field."""
  value: String
}

union Stripe_InvoiceSettingCustomerSettingDefaultPaymentMethodProperty = WrappedString | Stripe_PaymentMethod

type Stripe_PaymentMethod {
  acss_debit: Stripe_PaymentMethodAcssDebit
  afterpay_clearpay: Stripe_PaymentMethodAfterpayClearpay
  alipay: Stripe_PaymentFlowsPrivatePaymentMethodsAlipay
  au_becs_debit: Stripe_PaymentMethodAuBecsDebit
  bacs_debit: Stripe_PaymentMethodBacsDebit
  bancontact: Stripe_PaymentMethodBancontact
  billing_details: Stripe_BillingDetails
  boleto: Stripe_PaymentMethodBoleto
  card: Stripe_PaymentMethodCard
  card_present: Stripe_PaymentMethodCardPresent

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int
  customer: Stripe_PaymentMethodCustomerProperty
  eps: Stripe_PaymentMethodEps
  fpx: Stripe_PaymentMethodFpx
  giropay: Stripe_PaymentMethodGiropay
  grabpay: Stripe_PaymentMethodGrabpay

  """Unique identifier for the object."""
  id: String
  ideal: Stripe_PaymentMethodIdeal
  interac_present: Stripe_PaymentMethodInteracPresent

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_PaymentMethodObjectProperty
  oxxo: Stripe_PaymentMethodOxxo
  p24: Stripe_PaymentMethodP24
  sepa_debit: Stripe_PaymentMethodSepaDebit
  sofort: Stripe_PaymentMethodSofort

  """
  The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.
  """
  type: Stripe_PaymentMethodTypeProperty
  wechat_pay: Stripe_PaymentMethodWechatPay
}

type Stripe_PaymentMethodAcssDebit {
  """Name of the bank associated with the bank account."""
  bank_name: String

  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String

  """Institution number of the bank account."""
  institution_number: String

  """Last four digits of the bank account number."""
  last4: String

  """Transit number of the bank account."""
  transit_number: String
}

type Stripe_PaymentMethodAfterpayClearpay {
  result: JSONObject
}

type Stripe_PaymentFlowsPrivatePaymentMethodsAlipay {
  result: JSONObject
}

type Stripe_PaymentMethodAuBecsDebit {
  """
  Six-digit number identifying bank and branch associated with this bank account.
  """
  bsb_number: String

  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String

  """Last four digits of the bank account number."""
  last4: String
}

type Stripe_PaymentMethodBacsDebit {
  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String

  """Last four digits of the bank account number."""
  last4: String

  """Sort code of the bank account. (e.g., `10-20-30`)"""
  sort_code: String
}

type Stripe_PaymentMethodBancontact {
  result: JSONObject
}

type Stripe_BillingDetails {
  address: Stripe_Address

  """Email address."""
  email: String

  """Full name."""
  name: String

  """Billing phone number (including extension)."""
  phone: String
}

type Stripe_PaymentMethodBoleto {
  """Uniquely identifies the customer tax id (CNPJ or CPF)"""
  tax_id: String
}

type Stripe_PaymentMethodCard {
  """
  Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
  """
  brand: String
  checks: Stripe_PaymentMethodCardChecks

  """
  Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
  """
  country: String

  """Two-digit number representing the card's expiration month."""
  exp_month: Int

  """Four-digit number representing the card's expiration year."""
  exp_year: Int

  """
  Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
  
  *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
  """
  fingerprint: String

  """Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."""
  funding: String
  generated_from: Stripe_PaymentMethodCardGeneratedCard

  """The last four digits of the card."""
  last4: String
  networks: Stripe_Networks
  three_d_secure_usage: Stripe_ThreeDSecureUsage
  wallet: Stripe_PaymentMethodCardWallet
}

type Stripe_PaymentMethodCardChecks {
  """
  If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  address_line1_check: String

  """
  If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  address_postal_code_check: String

  """
  If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  cvc_check: String
}

type Stripe_PaymentMethodCardGeneratedCard {
  """The charge that created this object."""
  charge: String
  payment_method_details: Stripe_CardGeneratedFromPaymentMethodDetails
  setup_attempt: Stripe_PaymentMethodCardGeneratedCardSetupAttemptProperty
}

type Stripe_CardGeneratedFromPaymentMethodDetails {
  card_present: Stripe_PaymentMethodDetailsCardPresent

  """
  The type of payment method transaction-specific details from the transaction that generated this `card` payment method. Always `card_present`.
  """
  type: String
}

type Stripe_PaymentMethodDetailsCardPresent {
  """
  Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
  """
  brand: String

  """
  The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`).
  """
  cardholder_name: String

  """
  Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
  """
  country: String

  """Authorization response cryptogram."""
  emv_auth_data: String

  """Two-digit number representing the card's expiration month."""
  exp_month: Int

  """Four-digit number representing the card's expiration year."""
  exp_year: Int

  """
  Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
  
  *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
  """
  fingerprint: String

  """Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."""
  funding: String

  """
  ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod.
  """
  generated_card: String

  """The last four digits of the card."""
  last4: String

  """
  Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
  """
  network: String

  """How card details were read in this transaction."""
  read_method: Stripe_PaymentMethodDetailsCardPresentReadMethodProperty
  receipt: Stripe_PaymentMethodDetailsCardPresentReceipt
}

enum Stripe_PaymentMethodDetailsCardPresentReadMethodProperty {
  contact_emv
  contactless_emv
  contactless_magstripe_mode
  magnetic_stripe_fallback
  magnetic_stripe_track2
}

type Stripe_PaymentMethodDetailsCardPresentReceipt {
  """The type of account being debited or credited"""
  account_type: Stripe_PaymentMethodDetailsCardPresentReceiptAccountTypeProperty

  """EMV tag 9F26, cryptogram generated by the integrated circuit chip."""
  application_cryptogram: String

  """Mnenomic of the Application Identifier."""
  application_preferred_name: String

  """Identifier for this transaction."""
  authorization_code: String

  """EMV tag 8A. A code returned by the card issuer."""
  authorization_response_code: String

  """How the cardholder verified ownership of the card."""
  cardholder_verification_method: String

  """
  EMV tag 84. Similar to the application identifier stored on the integrated circuit chip.
  """
  dedicated_file_name: String

  """The outcome of a series of EMV functions performed by the card reader."""
  terminal_verification_results: String

  """
  An indication of various EMV functions performed during the transaction.
  """
  transaction_status_information: String
}

enum Stripe_PaymentMethodDetailsCardPresentReceiptAccountTypeProperty {
  checking
  credit
  prepaid
  unknown
}

union Stripe_PaymentMethodCardGeneratedCardSetupAttemptProperty = WrappedString | Stripe_SetupAttempt

type Stripe_SetupAttempt {
  application: Stripe_SetupAttemptApplicationProperty

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int
  customer: Stripe_SetupAttemptCustomerProperty

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_SetupAttemptObjectProperty
  on_behalf_of: Stripe_SetupAttemptOnBehalfOfProperty
  payment_method: Stripe_SetupAttemptPaymentMethodProperty
  payment_method_details: Stripe_SetupAttemptPaymentMethodDetails
  setup_error: Stripe_ApiErrors
  setup_intent: Stripe_SetupAttemptSetupIntentProperty

  """
  Status of this SetupAttempt, one of `requires_confirmation`, `requires_action`, `processing`, `succeeded`, `failed`, or `abandoned`.
  """
  status: String

  """
  The value of [usage](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-usage) on the SetupIntent at the time of this confirmation, one of `off_session` or `on_session`.
  """
  usage: String
}

union Stripe_SetupAttemptApplicationProperty = WrappedString | Stripe_Application

type Stripe_Application {
  """Unique identifier for the object."""
  id: String

  """The name of the application."""
  name: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_ApplicationObjectProperty
}

enum Stripe_ApplicationObjectProperty {
  application
}

union Stripe_SetupAttemptCustomerProperty = WrappedString | Stripe_Customer | Stripe_DeletedCustomer

enum Stripe_SetupAttemptObjectProperty {
  setup_attempt
}

union Stripe_SetupAttemptOnBehalfOfProperty = WrappedString | Stripe_Account

union Stripe_SetupAttemptPaymentMethodProperty = WrappedString | Stripe_PaymentMethod

type Stripe_SetupAttemptPaymentMethodDetails {
  acss_debit: Stripe_SetupAttemptPaymentMethodDetailsAcssDebit
  au_becs_debit: Stripe_SetupAttemptPaymentMethodDetailsAuBecsDebit
  bacs_debit: Stripe_SetupAttemptPaymentMethodDetailsBacsDebit
  bancontact: Stripe_SetupAttemptPaymentMethodDetailsBancontact
  card: Stripe_SetupAttemptPaymentMethodDetailsCard
  card_present: Stripe_SetupAttemptPaymentMethodDetailsCardPresent
  ideal: Stripe_SetupAttemptPaymentMethodDetailsIdeal
  sepa_debit: Stripe_SetupAttemptPaymentMethodDetailsSepaDebit
  sofort: Stripe_SetupAttemptPaymentMethodDetailsSofort

  """
  The type of the payment method used in the SetupIntent (e.g., `card`). An additional hash is included on `payment_method_details` with a name matching this value. It contains confirmation-specific information for the payment method.
  """
  type: String
}

type Stripe_SetupAttemptPaymentMethodDetailsAcssDebit {
  result: JSONObject
}

type Stripe_SetupAttemptPaymentMethodDetailsAuBecsDebit {
  result: JSONObject
}

type Stripe_SetupAttemptPaymentMethodDetailsBacsDebit {
  result: JSONObject
}

type Stripe_SetupAttemptPaymentMethodDetailsBancontact {
  """Bank code of bank associated with the bank account."""
  bank_code: String

  """Name of the bank associated with the bank account."""
  bank_name: String

  """Bank Identifier Code of the bank associated with the bank account."""
  bic: String
  generated_sepa_debit: Stripe_SetupAttemptPaymentMethodDetailsBancontactGeneratedSepaDebitProperty
  generated_sepa_debit_mandate: Stripe_SetupAttemptPaymentMethodDetailsBancontactGeneratedSepaDebitMandateProperty

  """Last four characters of the IBAN."""
  iban_last4: String

  """
  Preferred language of the Bancontact authorization page that the customer is redirected to.
  Can be one of `en`, `de`, `fr`, or `nl`
  """
  preferred_language: Stripe_SetupAttemptPaymentMethodDetailsBancontactPreferredLanguageProperty

  """
  Owner's verified full name. Values are verified or provided by Bancontact directly
  (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verified_name: String
}

union Stripe_SetupAttemptPaymentMethodDetailsBancontactGeneratedSepaDebitProperty = WrappedString | Stripe_PaymentMethod

union Stripe_SetupAttemptPaymentMethodDetailsBancontactGeneratedSepaDebitMandateProperty = WrappedString | Stripe_Mandate

type Stripe_Mandate {
  customer_acceptance: Stripe_CustomerAcceptance

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean
  multi_use: Stripe_MandateMultiUse

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_MandateObjectProperty
  payment_method: Stripe_MandatePaymentMethodProperty
  payment_method_details: Stripe_MandatePaymentMethodDetails
  single_use: Stripe_MandateSingleUse

  """
  The status of the mandate, which indicates whether it can be used to initiate a payment.
  """
  status: Stripe_MandateStatusProperty

  """The type of the mandate."""
  type: Stripe_MandateTypeProperty
}

type Stripe_CustomerAcceptance {
  """The time at which the customer accepted the Mandate."""
  accepted_at: Int
  offline: Stripe_OfflineAcceptance
  online: Stripe_OnlineAcceptance

  """
  The type of customer acceptance information included with the Mandate. One of `online` or `offline`.
  """
  type: Stripe_CustomerAcceptanceTypeProperty
}

type Stripe_OfflineAcceptance {
  result: JSONObject
}

type Stripe_OnlineAcceptance {
  """The IP address from which the Mandate was accepted by the customer."""
  ip_address: String

  """
  The user agent of the browser from which the Mandate was accepted by the customer.
  """
  user_agent: String
}

enum Stripe_CustomerAcceptanceTypeProperty {
  offline
  online
}

type Stripe_MandateMultiUse {
  result: JSONObject
}

enum Stripe_MandateObjectProperty {
  mandate
}

union Stripe_MandatePaymentMethodProperty = WrappedString | Stripe_PaymentMethod

type Stripe_MandatePaymentMethodDetails {
  acss_debit: Stripe_MandateAcssDebit
  au_becs_debit: Stripe_MandateAuBecsDebit
  bacs_debit: Stripe_MandateBacsDebit
  card: Stripe_CardMandatePaymentMethodDetails
  sepa_debit: Stripe_MandateSepaDebit

  """
  The type of the payment method associated with this mandate. An additional hash is included on `payment_method_details` with a name matching this value. It contains mandate information specific to the payment method.
  """
  type: String
}

type Stripe_MandateAcssDebit {
  """
  Description of the interval. Only required if 'payment_schedule' parmeter is 'interval' or 'combined'.
  """
  interval_description: String

  """Payment schedule for the mandate."""
  payment_schedule: Stripe_MandateAcssDebitPaymentScheduleProperty

  """Transaction type of the mandate."""
  transaction_type: Stripe_MandateAcssDebitTransactionTypeProperty
}

enum Stripe_MandateAcssDebitPaymentScheduleProperty {
  combined
  interval
  sporadic
}

enum Stripe_MandateAcssDebitTransactionTypeProperty {
  business
  personal
}

type Stripe_MandateAuBecsDebit {
  """
  The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively.
  """
  url: String
}

type Stripe_MandateBacsDebit {
  """
  The status of the mandate on the Bacs network. Can be one of `pending`, `revoked`, `refused`, or `accepted`.
  """
  network_status: Stripe_MandateBacsDebitNetworkStatusProperty

  """The unique reference identifying the mandate on the Bacs network."""
  reference: String

  """The URL that will contain the mandate that the customer has signed."""
  url: String
}

enum Stripe_MandateBacsDebitNetworkStatusProperty {
  accepted
  pending
  refused
  revoked
}

type Stripe_CardMandatePaymentMethodDetails {
  result: JSONObject
}

type Stripe_MandateSepaDebit {
  """The unique reference of the mandate."""
  reference: String

  """
  The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively.
  """
  url: String
}

type Stripe_MandateSingleUse {
  """On a single use mandate, the amount of the payment."""
  amount: Int

  """On a single use mandate, the currency of the payment."""
  currency: String
}

enum Stripe_MandateStatusProperty {
  active
  inactive
  pending
}

enum Stripe_MandateTypeProperty {
  multi_use
  single_use
}

enum Stripe_SetupAttemptPaymentMethodDetailsBancontactPreferredLanguageProperty {
  de
  en
  fr
  nl
}

type Stripe_SetupAttemptPaymentMethodDetailsCard {
  three_d_secure: Stripe_ThreeDSecureDetails
}

type Stripe_ThreeDSecureDetails {
  """
  For authenticated transactions: how the customer was authenticated by
  the issuing bank.
  """
  authentication_flow: Stripe_ThreeDSecureDetailsAuthenticationFlowProperty

  """Indicates the outcome of 3D Secure authentication."""
  result: Stripe_ThreeDSecureDetailsResultProperty

  """
  Additional information about why 3D Secure succeeded or failed based
  on the `result`.
  """
  result_reason: Stripe_ThreeDSecureDetailsResultReasonProperty

  """The version of 3D Secure that was used."""
  version: Stripe_ThreeDSecureDetailsVersionProperty
}

enum Stripe_ThreeDSecureDetailsAuthenticationFlowProperty {
  challenge
  frictionless
}

enum Stripe_ThreeDSecureDetailsResultProperty {
  attempt_acknowledged
  authenticated
  failed
  not_supported
  processing_error
}

enum Stripe_ThreeDSecureDetailsResultReasonProperty {
  abandoned
  bypassed
  canceled
  card_not_enrolled
  network_not_supported
  protocol_error
  rejected
}

enum Stripe_ThreeDSecureDetailsVersionProperty {
  ONEDOT0DOT2
  TWODOT1DOT0
  TWODOT2DOT0
}

type Stripe_SetupAttemptPaymentMethodDetailsCardPresent {
  generated_card: Stripe_SetupAttemptPaymentMethodDetailsCardPresentGeneratedCardProperty
}

union Stripe_SetupAttemptPaymentMethodDetailsCardPresentGeneratedCardProperty = WrappedString | Stripe_PaymentMethod

type Stripe_SetupAttemptPaymentMethodDetailsIdeal {
  """
  The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`.
  """
  bank: Stripe_SetupAttemptPaymentMethodDetailsIdealBankProperty

  """The Bank Identifier Code of the customer's bank."""
  bic: Stripe_SetupAttemptPaymentMethodDetailsIdealBicProperty
  generated_sepa_debit: Stripe_SetupAttemptPaymentMethodDetailsIdealGeneratedSepaDebitProperty
  generated_sepa_debit_mandate: Stripe_SetupAttemptPaymentMethodDetailsIdealGeneratedSepaDebitMandateProperty

  """Last four characters of the IBAN."""
  iban_last4: String

  """
  Owner's verified full name. Values are verified or provided by iDEAL directly
  (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verified_name: String
}

enum Stripe_SetupAttemptPaymentMethodDetailsIdealBankProperty {
  abn_amro
  asn_bank
  bunq
  handelsbanken
  ing
  knab
  moneyou
  rabobank
  regiobank
  revolut
  sns_bank
  triodos_bank
  van_lanschot
}

enum Stripe_SetupAttemptPaymentMethodDetailsIdealBicProperty {
  ABNANL2A
  ASNBNL21
  BUNQNL2A
  FVLBNL22
  HANDNL2A
  INGBNL2A
  KNABNL2H
  MOYONL21
  RABONL2U
  RBRBNL21
  REVOLT21
  SNSBNL2A
  TRIONL2U
}

union Stripe_SetupAttemptPaymentMethodDetailsIdealGeneratedSepaDebitProperty = WrappedString | Stripe_PaymentMethod

union Stripe_SetupAttemptPaymentMethodDetailsIdealGeneratedSepaDebitMandateProperty = WrappedString | Stripe_Mandate

type Stripe_SetupAttemptPaymentMethodDetailsSepaDebit {
  result: JSONObject
}

type Stripe_SetupAttemptPaymentMethodDetailsSofort {
  """Bank code of bank associated with the bank account."""
  bank_code: String

  """Name of the bank associated with the bank account."""
  bank_name: String

  """Bank Identifier Code of the bank associated with the bank account."""
  bic: String
  generated_sepa_debit: Stripe_SetupAttemptPaymentMethodDetailsSofortGeneratedSepaDebitProperty
  generated_sepa_debit_mandate: Stripe_SetupAttemptPaymentMethodDetailsSofortGeneratedSepaDebitMandateProperty

  """Last four characters of the IBAN."""
  iban_last4: String

  """
  Preferred language of the Sofort authorization page that the customer is redirected to.
  Can be one of `en`, `de`, `fr`, or `nl`
  """
  preferred_language: Stripe_SetupAttemptPaymentMethodDetailsSofortPreferredLanguageProperty

  """
  Owner's verified full name. Values are verified or provided by Sofort directly
  (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verified_name: String
}

union Stripe_SetupAttemptPaymentMethodDetailsSofortGeneratedSepaDebitProperty = WrappedString | Stripe_PaymentMethod

union Stripe_SetupAttemptPaymentMethodDetailsSofortGeneratedSepaDebitMandateProperty = WrappedString | Stripe_Mandate

enum Stripe_SetupAttemptPaymentMethodDetailsSofortPreferredLanguageProperty {
  de
  en
  fr
  nl
}

type Stripe_ApiErrors {
  """For card errors, the ID of the failed charge."""
  charge: String

  """
  For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported.
  """
  code: String

  """
  For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one.
  """
  decline_code: String

  """
  A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported.
  """
  doc_url: String

  """
  A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.
  """
  message: String

  """
  If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.
  """
  param: String
  payment_intent: Stripe_PaymentIntent
  payment_method: Stripe_PaymentMethod

  """
  If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors.
  """
  payment_method_type: String
  setup_intent: Stripe_SetupIntent
  source: Stripe_ApiErrorsSourceProperty

  """
  The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error`
  """
  type: Stripe_ApiErrorsTypeProperty
}

type Stripe_PaymentIntent {
  """
  Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
  """
  amount: Int

  """Amount that can be captured from this PaymentIntent."""
  amount_capturable: Int

  """Amount that was collected by this PaymentIntent."""
  amount_received: Int
  application: Stripe_PaymentIntentApplicationProperty

  """
  The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
  """
  application_fee_amount: Int

  """
  Populated when `status` is `canceled`, this is the time at which the PaymentIntent was canceled. Measured in seconds since the Unix epoch.
  """
  canceled_at: Int

  """
  Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, or `automatic`).
  """
  cancellation_reason: Stripe_PaymentIntentCancellationReasonProperty

  """Controls when the funds will be captured from the customer's account."""
  capture_method: Stripe_PaymentIntentCaptureMethodProperty

  """Charges that were created by this PaymentIntent, if any."""
  charges: Stripe_PaymentIntentChargesProperty

  """
  The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key. 
  
  The client secret can be used to complete a payment from your frontend. It should not be stored, logged, embedded in URLs, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
  
  Refer to our docs to [accept a payment](https://stripe.com/docs/payments/accept-a-payment?integration=elements) and learn about how `client_secret` should be handled.
  """
  client_secret: String
  confirmation_method: Stripe_PaymentIntentConfirmationMethodProperty

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  customer: Stripe_PaymentIntentCustomerProperty

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String

  """Unique identifier for the object."""
  id: String
  invoice: Stripe_PaymentIntentInvoiceProperty
  last_payment_error: Stripe_ApiErrors

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. For more information, see the [documentation](https://stripe.com/docs/payments/payment-intents/creating-payment-intents#storing-information-in-metadata).
  """
  metadata: JSONObject
  next_action: Stripe_PaymentIntentNextAction

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_PaymentIntentObjectProperty
  on_behalf_of: Stripe_PaymentIntentOnBehalfOfProperty
  payment_method: Stripe_PaymentIntentPaymentMethodProperty
  payment_method_options: Stripe_PaymentIntentPaymentMethodOptions

  """
  The list of payment method types (e.g. card) that this PaymentIntent is allowed to use.
  """
  payment_method_types: [String]

  """
  Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).
  """
  receipt_email: String
  review: Stripe_PaymentIntentReviewProperty

  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setup_future_usage: Stripe_PaymentIntentSetupFutureUsageProperty
  shipping: Stripe_Shipping

  """
  For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.
  """
  statement_descriptor: String

  """
  Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
  """
  statement_descriptor_suffix: String

  """
  Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
  """
  status: Stripe_PaymentIntentStatusProperty
  transfer_data: Stripe_TransferData

  """
  A string that identifies the resulting payment as part of a group. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details.
  """
  transfer_group: String
}

union Stripe_PaymentIntentApplicationProperty = WrappedString | Stripe_Application

enum Stripe_PaymentIntentCancellationReasonProperty {
  abandoned
  automatic
  duplicate
  failed_invoice
  fraudulent
  requested_by_customer
  void_invoice
}

enum Stripe_PaymentIntentCaptureMethodProperty {
  automatic
  manual
}

"""Charges that were created by this PaymentIntent, if any."""
type Stripe_PaymentIntentChargesProperty {
  """
  This list only contains the latest charge, even if there were previously multiple unsuccessful charges. To view all previous charges for a PaymentIntent, you can filter the charges list using the `payment_intent` [parameter](https://stripe.com/docs/api/charges/list#list_charges-payment_intent).
  """
  data: [Stripe_Charge!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_PaymentIntentChargesObjectProperty!

  """The URL where this list can be accessed."""
  url: String!
}

type Stripe_Charge {
  """
  Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
  """
  amount: Int

  """
  Amount in %s captured (can be less than the amount attribute on the charge if a partial capture was made).
  """
  amount_captured: Int

  """
  Amount in %s refunded (can be less than the amount attribute on the charge if a partial refund was issued).
  """
  amount_refunded: Int
  application: Stripe_ChargeApplicationProperty
  application_fee: Stripe_ChargeApplicationFeeProperty

  """
  The amount of the application fee (if any) requested for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details.
  """
  application_fee_amount: Int
  balance_transaction: Stripe_ChargeBalanceTransactionProperty
  billing_details: Stripe_BillingDetails

  """
  The full statement descriptor that is passed to card networks, and that is displayed on your customers' credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined.
  """
  calculated_statement_descriptor: String

  """
  If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.
  """
  captured: Boolean

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  customer: Stripe_ChargeCustomerProperty

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String

  """Whether the charge has been disputed."""
  disputed: Boolean

  """
  Error code explaining reason for charge failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes).
  """
  failure_code: String

  """
  Message to user further explaining reason for charge failure if available.
  """
  failure_message: String
  fraud_details: Stripe_ChargeFraudDetails

  """Unique identifier for the object."""
  id: String
  invoice: Stripe_ChargeInvoiceProperty

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_ChargeObjectProperty
  on_behalf_of: Stripe_ChargeOnBehalfOfProperty
  order: Stripe_ChargeOrderProperty
  outcome: Stripe_ChargeOutcome

  """
  `true` if the charge succeeded, or was successfully authorized for later capture.
  """
  paid: Boolean
  payment_intent: Stripe_ChargePaymentIntentProperty

  """ID of the payment method used in this charge."""
  payment_method: String
  payment_method_details: Stripe_PaymentMethodDetails

  """
  This is the email address that the receipt for this charge was sent to.
  """
  receipt_email: String

  """
  This is the transaction number that appears on email receipts sent for this charge. This attribute will be `null` until a receipt has been sent.
  """
  receipt_number: String

  """
  This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt.
  """
  receipt_url: String

  """
  Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.
  """
  refunded: Boolean

  """A list of refunds that have been applied to the charge."""
  refunds: Stripe_ChargeRefundsProperty
  review: Stripe_ChargeReviewProperty
  shipping: Stripe_Shipping
  source_transfer: Stripe_ChargeSourceTransferProperty

  """
  For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customers’ statements. Must contain at least one letter, maximum 22 characters.
  """
  statement_descriptor: String

  """
  Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
  """
  statement_descriptor_suffix: String

  """
  The status of the payment is either `succeeded`, `pending`, or `failed`.
  """
  status: String
  transfer: Stripe_ChargeTransferProperty
  transfer_data: Stripe_ChargeTransferData

  """
  A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details.
  """
  transfer_group: String
}

union Stripe_ChargeApplicationProperty = WrappedString | Stripe_Application

union Stripe_ChargeApplicationFeeProperty = WrappedString | Stripe_ApplicationFee

type Stripe_ApplicationFee {
  account: Stripe_ApplicationFeeAccountProperty

  """Amount earned, in %s."""
  amount: Int

  """
  Amount in %s refunded (can be less than the amount attribute on the fee if a partial refund was issued)
  """
  amount_refunded: Int
  application: Stripe_ApplicationFeeApplicationProperty
  balance_transaction: Stripe_ApplicationFeeBalanceTransactionProperty
  charge: Stripe_ApplicationFeeChargeProperty

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_ApplicationFeeObjectProperty
  originating_transaction: Stripe_ApplicationFeeOriginatingTransactionProperty

  """
  Whether the fee has been fully refunded. If the fee is only partially refunded, this attribute will still be false.
  """
  refunded: Boolean

  """A list of refunds that have been applied to the fee."""
  refunds: Stripe_ApplicationFeeRefundsProperty
}

union Stripe_ApplicationFeeAccountProperty = WrappedString | Stripe_Account

union Stripe_ApplicationFeeApplicationProperty = WrappedString | Stripe_Application

union Stripe_ApplicationFeeBalanceTransactionProperty = WrappedString | Stripe_BalanceTransaction

type Stripe_BalanceTransaction {
  """Gross amount of the transaction, in %s."""
  amount: Int

  """
  The date the transaction's net funds will become available in the Stripe balance.
  """
  available_on: Int

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String

  """
  The exchange rate used, if applicable, for this transaction. Specifically, if money was converted from currency A to currency B, then the `amount` in currency A, times `exchange_rate`, would be the `amount` in currency B. For example, suppose you charged a customer 10.00 EUR. Then the PaymentIntent's `amount` would be `1000` and `currency` would be `eur`. Suppose this was converted into 12.34 USD in your Stripe account. Then the BalanceTransaction's `amount` would be `1234`, `currency` would be `usd`, and `exchange_rate` would be `1.234`.
  """
  exchange_rate: Float

  """Fees (in %s) paid for this transaction."""
  fee: Int

  """Detailed breakdown of fees (in %s) paid for this transaction."""
  fee_details: [Stripe_Fee]

  """Unique identifier for the object."""
  id: String

  """Net amount of the transaction, in %s."""
  net: Int

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_BalanceTransactionObjectProperty

  """
  [Learn more](https://stripe.com/docs/reports/reporting-categories) about how reporting categories can help you understand balance transactions from an accounting perspective.
  """
  reporting_category: String
  source: Stripe_BalanceTransactionSourceProperty

  """
  If the transaction's net funds are available in the Stripe balance yet. Either `available` or `pending`.
  """
  status: String

  """
  Transaction type: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `payment`, `payment_failure_refund`, `payment_refund`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. [Learn more](https://stripe.com/docs/reports/balance-transaction-types) about balance transaction types and what they represent. If you are looking to classify transactions for accounting purposes, you might want to consider `reporting_category` instead.
  """
  type: Stripe_BalanceTransactionTypeProperty
}

type Stripe_Fee {
  """Amount of the fee, in cents."""
  amount: Int

  """ID of the Connect application that earned the fee."""
  application: String

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String

  """Type of the fee, one of: `application_fee`, `stripe_fee` or `tax`."""
  type: String
}

enum Stripe_BalanceTransactionObjectProperty {
  balance_transaction
}

union Stripe_BalanceTransactionSourceProperty = WrappedString | Stripe_ApplicationFee | Stripe_Charge | Stripe_ConnectCollectionTransfer | Stripe_Dispute | Stripe_FeeRefund | Stripe_IssuingAuthorization | Stripe_IssuingDispute | Stripe_IssuingTransaction | Stripe_Payout | Stripe_PlatformTaxFee | Stripe_Refund | Stripe_ReserveTransaction | Stripe_TaxDeductedAtSource | Stripe_Topup | Stripe_Transfer | Stripe_TransferReversal

type Stripe_ConnectCollectionTransfer {
  """Amount transferred, in %s."""
  amount: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  destination: Stripe_ConnectCollectionTransferDestinationProperty

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_ConnectCollectionTransferObjectProperty
}

union Stripe_ConnectCollectionTransferDestinationProperty = WrappedString | Stripe_Account

enum Stripe_ConnectCollectionTransferObjectProperty {
  connect_collection_transfer
}

type Stripe_Dispute {
  """
  Disputed amount. Usually the amount of the charge, but can differ (usually because of currency fluctuation or because only part of the order is disputed).
  """
  amount: Int

  """
  List of zero, one, or two balance transactions that show funds withdrawn and reinstated to your Stripe account as a result of this dispute.
  """
  balance_transactions: [Stripe_BalanceTransaction]
  charge: Stripe_DisputeChargeProperty

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  evidence: Stripe_DisputeEvidence
  evidence_details: Stripe_DisputeEvidenceDetails

  """Unique identifier for the object."""
  id: String

  """
  If true, it is still possible to refund the disputed payment. Once the payment has been fully refunded, no further funds will be withdrawn from your Stripe account as a result of this dispute.
  """
  is_charge_refundable: Boolean

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_DisputeObjectProperty
  payment_intent: Stripe_DisputePaymentIntentProperty

  """
  Reason given by cardholder for dispute. Possible values are `bank_cannot_process`, `check_returned`, `credit_not_processed`, `customer_initiated`, `debit_not_authorized`, `duplicate`, `fraudulent`, `general`, `incorrect_account_details`, `insufficient_funds`, `product_not_received`, `product_unacceptable`, `subscription_canceled`, or `unrecognized`. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).
  """
  reason: String

  """
  Current status of dispute. Possible values are `warning_needs_response`, `warning_under_review`, `warning_closed`, `needs_response`, `under_review`, `charge_refunded`, `won`, or `lost`.
  """
  status: Stripe_DisputeStatusProperty
}

union Stripe_DisputeChargeProperty = WrappedString | Stripe_Charge

type Stripe_DisputeEvidence {
  """
  Any server or activity logs showing proof that the customer accessed or downloaded the purchased digital product. This information should include IP addresses, corresponding timestamps, and any detailed recorded activity.
  """
  access_activity_log: String

  """The billing address provided by the customer."""
  billing_address: String
  cancellation_policy: Stripe_DisputeEvidenceCancellationPolicyProperty

  """
  An explanation of how and when the customer was shown your refund policy prior to purchase.
  """
  cancellation_policy_disclosure: String

  """A justification for why the customer's subscription was not canceled."""
  cancellation_rebuttal: String
  customer_communication: Stripe_DisputeEvidenceCustomerCommunicationProperty

  """The email address of the customer."""
  customer_email_address: String

  """The name of the customer."""
  customer_name: String

  """The IP address that the customer used when making the purchase."""
  customer_purchase_ip: String
  customer_signature: Stripe_DisputeEvidenceCustomerSignatureProperty
  duplicate_charge_documentation: Stripe_DisputeEvidenceDuplicateChargeDocumentationProperty

  """
  An explanation of the difference between the disputed charge versus the prior charge that appears to be a duplicate.
  """
  duplicate_charge_explanation: String

  """
  The Stripe ID for the prior charge which appears to be a duplicate of the disputed charge.
  """
  duplicate_charge_id: String

  """A description of the product or service that was sold."""
  product_description: String
  receipt: Stripe_DisputeEvidenceReceiptProperty
  refund_policy: Stripe_DisputeEvidenceRefundPolicyProperty

  """
  Documentation demonstrating that the customer was shown your refund policy prior to purchase.
  """
  refund_policy_disclosure: String

  """A justification for why the customer is not entitled to a refund."""
  refund_refusal_explanation: String

  """
  The date on which the customer received or began receiving the purchased service, in a clear human-readable format.
  """
  service_date: String
  service_documentation: Stripe_DisputeEvidenceServiceDocumentationProperty

  """
  The address to which a physical product was shipped. You should try to include as complete address information as possible.
  """
  shipping_address: String

  """
  The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. If multiple carriers were used for this purchase, please separate them with commas.
  """
  shipping_carrier: String

  """
  The date on which a physical product began its route to the shipping address, in a clear human-readable format.
  """
  shipping_date: String
  shipping_documentation: Stripe_DisputeEvidenceShippingDocumentationProperty

  """
  The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.
  """
  shipping_tracking_number: String
  uncategorized_file: Stripe_DisputeEvidenceUncategorizedFileProperty

  """Any additional evidence or statements."""
  uncategorized_text: String
}

union Stripe_DisputeEvidenceCancellationPolicyProperty = WrappedString | Stripe_File

union Stripe_DisputeEvidenceCustomerCommunicationProperty = WrappedString | Stripe_File

union Stripe_DisputeEvidenceCustomerSignatureProperty = WrappedString | Stripe_File

union Stripe_DisputeEvidenceDuplicateChargeDocumentationProperty = WrappedString | Stripe_File

union Stripe_DisputeEvidenceReceiptProperty = WrappedString | Stripe_File

union Stripe_DisputeEvidenceRefundPolicyProperty = WrappedString | Stripe_File

union Stripe_DisputeEvidenceServiceDocumentationProperty = WrappedString | Stripe_File

union Stripe_DisputeEvidenceShippingDocumentationProperty = WrappedString | Stripe_File

union Stripe_DisputeEvidenceUncategorizedFileProperty = WrappedString | Stripe_File

type Stripe_DisputeEvidenceDetails {
  """
  Date by which evidence must be submitted in order to successfully challenge dispute. Will be null if the customer's bank or credit card company doesn't allow a response for this particular dispute.
  """
  due_by: Int

  """Whether evidence has been staged for this dispute."""
  has_evidence: Boolean

  """
  Whether the last evidence submission was submitted past the due date. Defaults to `false` if no evidence submissions have occurred. If `true`, then delivery of the latest evidence is *not* guaranteed.
  """
  past_due: Boolean

  """
  The number of times evidence has been submitted. Typically, you may only submit evidence once.
  """
  submission_count: Int
}

enum Stripe_DisputeObjectProperty {
  dispute
}

union Stripe_DisputePaymentIntentProperty = WrappedString | Stripe_PaymentIntent

enum Stripe_DisputeStatusProperty {
  charge_refunded
  lost
  needs_response
  under_review
  warning_closed
  warning_needs_response
  warning_under_review
  won
}

type Stripe_FeeRefund {
  """Amount, in %s."""
  amount: Int
  balance_transaction: Stripe_FeeRefundBalanceTransactionProperty

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  fee: Stripe_FeeRefundFeeProperty

  """Unique identifier for the object."""
  id: String

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_FeeRefundObjectProperty
}

union Stripe_FeeRefundBalanceTransactionProperty = WrappedString | Stripe_BalanceTransaction

union Stripe_FeeRefundFeeProperty = WrappedString | Stripe_ApplicationFee

enum Stripe_FeeRefundObjectProperty {
  fee_refund
}

type Stripe_IssuingAuthorization {
  """
  The total amount that was authorized or rejected. This amount is in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  amount: Int
  amount_details: Stripe_IssuingAuthorizationAmountDetails

  """Whether the authorization has been approved."""
  approved: Boolean

  """How the card details were provided."""
  authorization_method: Stripe_IssuingAuthorizationAuthorizationMethodProperty

  """List of balance transactions associated with this authorization."""
  balance_transactions: [Stripe_BalanceTransaction]
  card: Stripe_IssuingCard
  cardholder: Stripe_IssuingAuthorizationCardholderProperty

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  The total amount that was authorized or rejected. This amount is in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  merchant_amount: Int

  """
  The currency that was presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  merchant_currency: String
  merchant_data: Stripe_IssuingAuthorizationMerchantData

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_IssuingAuthorizationObjectProperty
  pending_request: Stripe_IssuingAuthorizationPendingRequest

  """
  History of every time `pending_request` was approved/denied, either by you directly or by Stripe (e.g. based on your `spending_controls`). If the merchant changes the authorization by performing an [incremental authorization](https://stripe.com/docs/issuing/purchases/authorizations), you can look at this field to see the previous requests for the authorization.
  """
  request_history: [Stripe_IssuingAuthorizationRequest]

  """The current status of the authorization in its lifecycle."""
  status: Stripe_IssuingAuthorizationStatusProperty

  """
  List of [transactions](https://stripe.com/docs/api/issuing/transactions) associated with this authorization.
  """
  transactions: [Stripe_IssuingTransaction]
  verification_data: Stripe_IssuingAuthorizationVerificationData

  """
  The digital wallet used for this authorization. One of `apple_pay`, `google_pay`, or `samsung_pay`.
  """
  wallet: String
}

type Stripe_IssuingAuthorizationAmountDetails {
  """The fee charged by the ATM for the cash withdrawal."""
  atm_fee: Int
}

enum Stripe_IssuingAuthorizationAuthorizationMethodProperty {
  chip
  contactless
  keyed_in
  online
  swipe
}

type Stripe_IssuingCard {
  """The brand of the card."""
  brand: String

  """The reason why the card was canceled."""
  cancellation_reason: Stripe_IssuingCardCancellationReasonProperty
  cardholder: Stripe_IssuingCardholder

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  The card's CVC. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint.
  """
  cvc: String

  """The expiration month of the card."""
  exp_month: Int

  """The expiration year of the card."""
  exp_year: Int

  """Unique identifier for the object."""
  id: String

  """The last 4 digits of the card number."""
  last4: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  The full unredacted card number. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint.
  """
  number: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_IssuingCardObjectProperty
  replaced_by: Stripe_IssuingCardReplacedByProperty
  replacement_for: Stripe_IssuingCardReplacementForProperty

  """The reason why the previous card needed to be replaced."""
  replacement_reason: Stripe_IssuingCardReplacementReasonProperty
  shipping: Stripe_IssuingCardShipping
  spending_controls: Stripe_IssuingCardAuthorizationControls

  """Whether authorizations can be approved on this card."""
  status: Stripe_IssuingCardStatusProperty

  """The type of the card."""
  type: Stripe_IssuingCardTypeProperty
}

enum Stripe_IssuingCardCancellationReasonProperty {
  lost
  stolen
}

type Stripe_IssuingCardholder {
  billing: Stripe_IssuingCardholderAddress
  company: Stripe_IssuingCardholderCompany

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """The cardholder's email address."""
  email: String

  """Unique identifier for the object."""
  id: String
  individual: Stripe_IssuingCardholderIndividual

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """The cardholder's name. This will be printed on cards issued to them."""
  name: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_IssuingCardholderObjectProperty

  """The cardholder's phone number."""
  phone_number: String
  requirements: Stripe_IssuingCardholderRequirements
  spending_controls: Stripe_IssuingCardholderAuthorizationControls

  """Specifies whether to permit authorizations on this cardholder's cards."""
  status: Stripe_IssuingCardholderStatusProperty

  """One of `individual` or `company`."""
  type: Stripe_IssuingCardholderTypeProperty
}

type Stripe_IssuingCardholderAddress {
  address: Stripe_Address
}

type Stripe_IssuingCardholderCompany {
  """Whether the company's business ID number was provided."""
  tax_id_provided: Boolean
}

type Stripe_IssuingCardholderIndividual {
  dob: Stripe_IssuingCardholderIndividualDob

  """The first name of this cardholder."""
  first_name: String

  """The last name of this cardholder."""
  last_name: String
  verification: Stripe_IssuingCardholderVerification
}

type Stripe_IssuingCardholderIndividualDob {
  """The day of birth, between 1 and 31."""
  day: Int

  """The month of birth, between 1 and 12."""
  month: Int

  """The four-digit year of birth."""
  year: Int
}

type Stripe_IssuingCardholderVerification {
  document: Stripe_IssuingCardholderIdDocument
}

type Stripe_IssuingCardholderIdDocument {
  back: Stripe_IssuingCardholderIdDocumentBackProperty
  front: Stripe_IssuingCardholderIdDocumentFrontProperty
}

union Stripe_IssuingCardholderIdDocumentBackProperty = WrappedString | Stripe_File

union Stripe_IssuingCardholderIdDocumentFrontProperty = WrappedString | Stripe_File

enum Stripe_IssuingCardholderObjectProperty {
  issuingDOTcardholder
}

type Stripe_IssuingCardholderRequirements {
  """
  If `disabled_reason` is present, all cards will decline authorizations with `cardholder_verification_required` reason.
  """
  disabled_reason: Stripe_IssuingCardholderRequirementsDisabledReasonProperty

  """
  Array of fields that need to be collected in order to verify and re-enable the cardholder.
  """
  past_due: [Stripe_IssuingCardholderRequirementsPastDueProperty]
}

enum Stripe_IssuingCardholderRequirementsDisabledReasonProperty {
  listed
  rejectedDOTlisted
  under_review
}

enum Stripe_IssuingCardholderRequirementsPastDueProperty {
  companyDOTtax_id
  individualDOTdobDOTday
  individualDOTdobDOTmonth
  individualDOTdobDOTyear
  individualDOTfirst_name
  individualDOTlast_name
  individualDOTverificationDOTdocument
}

type Stripe_IssuingCardholderAuthorizationControls {
  """
  Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`.
  """
  allowed_categories: [Stripe_IssuingCardholderAuthorizationControlsAllowedCategoriesProperty]

  """
  Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`.
  """
  blocked_categories: [Stripe_IssuingCardholderAuthorizationControlsBlockedCategoriesProperty]

  """
  Limit spending with amount-based rules that apply across this cardholder's cards.
  """
  spending_limits: [Stripe_IssuingCardholderSpendingLimit]

  """Currency of the amounts within `spending_limits`."""
  spending_limits_currency: String
}

enum Stripe_IssuingCardholderAuthorizationControlsAllowedCategoriesProperty {
  ac_refrigeration_repair
  accounting_bookkeeping_services
  advertising_services
  agricultural_cooperative
  airlines_air_carriers
  airports_flying_fields
  ambulance_services
  amusement_parks_carnivals
  antique_reproductions
  antique_shops
  aquariums
  architectural_surveying_services
  art_dealers_and_galleries
  artists_supply_and_craft_shops
  auto_and_home_supply_stores
  auto_body_repair_shops
  auto_paint_shops
  auto_service_shops
  automated_cash_disburse
  automated_fuel_dispensers
  automobile_associations
  automotive_parts_and_accessories_stores
  automotive_tire_stores
  bail_and_bond_payments
  bakeries
  bands_orchestras
  barber_and_beauty_shops
  betting_casino_gambling
  bicycle_shops
  billiard_pool_establishments
  boat_dealers
  boat_rentals_and_leases
  book_stores
  books_periodicals_and_newspapers
  bowling_alleys
  bus_lines
  business_secretarial_schools
  buying_shopping_services
  cable_satellite_and_other_pay_television_and_radio
  camera_and_photographic_supply_stores
  candy_nut_and_confectionery_stores
  car_and_truck_dealers_new_used
  car_and_truck_dealers_used_only
  car_rental_agencies
  car_washes
  carpentry_services
  carpet_upholstery_cleaning
  caterers
  charitable_and_social_service_organizations_fundraising
  chemicals_and_allied_products
  child_care_services
  childrens_and_infants_wear_stores
  chiropodists_podiatrists
  chiropractors
  cigar_stores_and_stands
  civic_social_fraternal_associations
  cleaning_and_maintenance
  clothing_rental
  colleges_universities
  commercial_equipment
  commercial_footwear
  commercial_photography_art_and_graphics
  commuter_transport_and_ferries
  computer_network_services
  computer_programming
  computer_repair
  computer_software_stores
  computers_peripherals_and_software
  concrete_work_services
  construction_materials
  consulting_public_relations
  correspondence_schools
  cosmetic_stores
  counseling_services
  country_clubs
  courier_services
  court_costs
  credit_reporting_agencies
  cruise_lines
  dairy_products_stores
  dance_hall_studios_schools
  dating_escort_services
  dentists_orthodontists
  department_stores
  detective_agencies
  digital_goods_applications
  digital_goods_games
  digital_goods_large_volume
  digital_goods_media
  direct_marketing_catalog_merchant
  direct_marketing_combination_catalog_and_retail_merchant
  direct_marketing_inbound_telemarketing
  direct_marketing_insurance_services
  direct_marketing_other
  direct_marketing_outbound_telemarketing
  direct_marketing_subscription
  direct_marketing_travel
  discount_stores
  doctors
  door_to_door_sales
  drapery_window_covering_and_upholstery_stores
  drinking_places
  drug_stores_and_pharmacies
  drugs_drug_proprietaries_and_druggist_sundries
  dry_cleaners
  durable_goods
  duty_free_stores
  eating_places_restaurants
  educational_services
  electric_razor_stores
  electrical_parts_and_equipment
  electrical_services
  electronics_repair_shops
  electronics_stores
  elementary_secondary_schools
  employment_temp_agencies
  equipment_rental
  exterminating_services
  family_clothing_stores
  fast_food_restaurants
  financial_institutions
  fines_government_administrative_entities
  fireplace_fireplace_screens_and_accessories_stores
  floor_covering_stores
  florists
  florists_supplies_nursery_stock_and_flowers
  freezer_and_locker_meat_provisioners
  fuel_dealers_non_automotive
  funeral_services_crematories
  furniture_home_furnishings_and_equipment_stores_except_appliances
  furniture_repair_refinishing
  furriers_and_fur_shops
  general_services
  gift_card_novelty_and_souvenir_shops
  glass_paint_and_wallpaper_stores
  glassware_crystal_stores
  golf_courses_public
  government_services
  grocery_stores_supermarkets
  hardware_equipment_and_supplies
  hardware_stores
  health_and_beauty_spas
  hearing_aids_sales_and_supplies
  heating_plumbing_a_c
  hobby_toy_and_game_shops
  home_supply_warehouse_stores
  hospitals
  hotels_motels_and_resorts
  household_appliance_stores
  industrial_supplies
  information_retrieval_services
  insurance_default
  insurance_underwriting_premiums
  intra_company_purchases
  jewelry_stores_watches_clocks_and_silverware_stores
  landscaping_services
  laundries
  laundry_cleaning_services
  legal_services_attorneys
  luggage_and_leather_goods_stores
  lumber_building_materials_stores
  manual_cash_disburse
  marinas_service_and_supplies
  masonry_stonework_and_plaster
  massage_parlors
  medical_and_dental_labs
  medical_dental_ophthalmic_and_hospital_equipment_and_supplies
  medical_services
  membership_organizations
  mens_and_boys_clothing_and_accessories_stores
  mens_womens_clothing_stores
  metal_service_centers
  miscellaneous
  miscellaneous_apparel_and_accessory_shops
  miscellaneous_auto_dealers
  miscellaneous_business_services
  miscellaneous_food_stores
  miscellaneous_general_merchandise
  miscellaneous_general_services
  miscellaneous_home_furnishing_specialty_stores
  miscellaneous_publishing_and_printing
  miscellaneous_recreation_services
  miscellaneous_repair_shops
  miscellaneous_specialty_retail
  mobile_home_dealers
  motion_picture_theaters
  motor_freight_carriers_and_trucking
  motor_homes_dealers
  motor_vehicle_supplies_and_new_parts
  motorcycle_shops_and_dealers
  motorcycle_shops_dealers
  music_stores_musical_instruments_pianos_and_sheet_music
  news_dealers_and_newsstands
  non_fi_money_orders
  non_fi_stored_value_card_purchase_load
  nondurable_goods
  nurseries_lawn_and_garden_supply_stores
  nursing_personal_care
  office_and_commercial_furniture
  opticians_eyeglasses
  optometrists_ophthalmologist
  orthopedic_goods_prosthetic_devices
  osteopaths
  package_stores_beer_wine_and_liquor
  paints_varnishes_and_supplies
  parking_lots_garages
  passenger_railways
  pawn_shops
  pet_shops_pet_food_and_supplies
  petroleum_and_petroleum_products
  photo_developing
  photographic_photocopy_microfilm_equipment_and_supplies
  photographic_studios
  picture_video_production
  piece_goods_notions_and_other_dry_goods
  plumbing_heating_equipment_and_supplies
  political_organizations
  postal_services_government_only
  precious_stones_and_metals_watches_and_jewelry
  professional_services
  public_warehousing_and_storage
  quick_copy_repro_and_blueprint
  railroads
  real_estate_agents_and_managers_rentals
  record_stores
  recreational_vehicle_rentals
  religious_goods_stores
  religious_organizations
  roofing_siding_sheet_metal
  secretarial_support_services
  security_brokers_dealers
  service_stations
  sewing_needlework_fabric_and_piece_goods_stores
  shoe_repair_hat_cleaning
  shoe_stores
  small_appliance_repair
  snowmobile_dealers
  special_trade_services
  specialty_cleaning
  sporting_goods_stores
  sporting_recreation_camps
  sports_and_riding_apparel_stores
  sports_clubs_fields
  stamp_and_coin_stores
  stationary_office_supplies_printing_and_writing_paper
  stationery_stores_office_and_school_supply_stores
  swimming_pools_sales
  t_ui_travel_germany
  tailors_alterations
  tax_payments_government_agencies
  tax_preparation_services
  taxicabs_limousines
  telecommunication_equipment_and_telephone_sales
  telecommunication_services
  telegraph_services
  tent_and_awning_shops
  testing_laboratories
  theatrical_ticket_agencies
  timeshares
  tire_retreading_and_repair
  tolls_bridge_fees
  tourist_attractions_and_exhibits
  towing_services
  trailer_parks_campgrounds
  transportation_services
  travel_agencies_tour_operators
  truck_stop_iteration
  truck_utility_trailer_rentals
  typesetting_plate_making_and_related_services
  typewriter_stores
  u_s_federal_government_agencies_or_departments
  uniforms_commercial_clothing
  used_merchandise_and_secondhand_stores
  utilities
  variety_stores
  veterinary_services
  video_amusement_game_supplies
  video_game_arcades
  video_tape_rental_stores
  vocational_trade_schools
  watch_jewelry_repair
  welding_repair
  wholesale_clubs
  wig_and_toupee_stores
  wires_money_orders
  womens_accessory_and_specialty_shops
  womens_ready_to_wear_stores
  wrecking_and_salvage_yards
}

enum Stripe_IssuingCardholderAuthorizationControlsBlockedCategoriesProperty {
  ac_refrigeration_repair
  accounting_bookkeeping_services
  advertising_services
  agricultural_cooperative
  airlines_air_carriers
  airports_flying_fields
  ambulance_services
  amusement_parks_carnivals
  antique_reproductions
  antique_shops
  aquariums
  architectural_surveying_services
  art_dealers_and_galleries
  artists_supply_and_craft_shops
  auto_and_home_supply_stores
  auto_body_repair_shops
  auto_paint_shops
  auto_service_shops
  automated_cash_disburse
  automated_fuel_dispensers
  automobile_associations
  automotive_parts_and_accessories_stores
  automotive_tire_stores
  bail_and_bond_payments
  bakeries
  bands_orchestras
  barber_and_beauty_shops
  betting_casino_gambling
  bicycle_shops
  billiard_pool_establishments
  boat_dealers
  boat_rentals_and_leases
  book_stores
  books_periodicals_and_newspapers
  bowling_alleys
  bus_lines
  business_secretarial_schools
  buying_shopping_services
  cable_satellite_and_other_pay_television_and_radio
  camera_and_photographic_supply_stores
  candy_nut_and_confectionery_stores
  car_and_truck_dealers_new_used
  car_and_truck_dealers_used_only
  car_rental_agencies
  car_washes
  carpentry_services
  carpet_upholstery_cleaning
  caterers
  charitable_and_social_service_organizations_fundraising
  chemicals_and_allied_products
  child_care_services
  childrens_and_infants_wear_stores
  chiropodists_podiatrists
  chiropractors
  cigar_stores_and_stands
  civic_social_fraternal_associations
  cleaning_and_maintenance
  clothing_rental
  colleges_universities
  commercial_equipment
  commercial_footwear
  commercial_photography_art_and_graphics
  commuter_transport_and_ferries
  computer_network_services
  computer_programming
  computer_repair
  computer_software_stores
  computers_peripherals_and_software
  concrete_work_services
  construction_materials
  consulting_public_relations
  correspondence_schools
  cosmetic_stores
  counseling_services
  country_clubs
  courier_services
  court_costs
  credit_reporting_agencies
  cruise_lines
  dairy_products_stores
  dance_hall_studios_schools
  dating_escort_services
  dentists_orthodontists
  department_stores
  detective_agencies
  digital_goods_applications
  digital_goods_games
  digital_goods_large_volume
  digital_goods_media
  direct_marketing_catalog_merchant
  direct_marketing_combination_catalog_and_retail_merchant
  direct_marketing_inbound_telemarketing
  direct_marketing_insurance_services
  direct_marketing_other
  direct_marketing_outbound_telemarketing
  direct_marketing_subscription
  direct_marketing_travel
  discount_stores
  doctors
  door_to_door_sales
  drapery_window_covering_and_upholstery_stores
  drinking_places
  drug_stores_and_pharmacies
  drugs_drug_proprietaries_and_druggist_sundries
  dry_cleaners
  durable_goods
  duty_free_stores
  eating_places_restaurants
  educational_services
  electric_razor_stores
  electrical_parts_and_equipment
  electrical_services
  electronics_repair_shops
  electronics_stores
  elementary_secondary_schools
  employment_temp_agencies
  equipment_rental
  exterminating_services
  family_clothing_stores
  fast_food_restaurants
  financial_institutions
  fines_government_administrative_entities
  fireplace_fireplace_screens_and_accessories_stores
  floor_covering_stores
  florists
  florists_supplies_nursery_stock_and_flowers
  freezer_and_locker_meat_provisioners
  fuel_dealers_non_automotive
  funeral_services_crematories
  furniture_home_furnishings_and_equipment_stores_except_appliances
  furniture_repair_refinishing
  furriers_and_fur_shops
  general_services
  gift_card_novelty_and_souvenir_shops
  glass_paint_and_wallpaper_stores
  glassware_crystal_stores
  golf_courses_public
  government_services
  grocery_stores_supermarkets
  hardware_equipment_and_supplies
  hardware_stores
  health_and_beauty_spas
  hearing_aids_sales_and_supplies
  heating_plumbing_a_c
  hobby_toy_and_game_shops
  home_supply_warehouse_stores
  hospitals
  hotels_motels_and_resorts
  household_appliance_stores
  industrial_supplies
  information_retrieval_services
  insurance_default
  insurance_underwriting_premiums
  intra_company_purchases
  jewelry_stores_watches_clocks_and_silverware_stores
  landscaping_services
  laundries
  laundry_cleaning_services
  legal_services_attorneys
  luggage_and_leather_goods_stores
  lumber_building_materials_stores
  manual_cash_disburse
  marinas_service_and_supplies
  masonry_stonework_and_plaster
  massage_parlors
  medical_and_dental_labs
  medical_dental_ophthalmic_and_hospital_equipment_and_supplies
  medical_services
  membership_organizations
  mens_and_boys_clothing_and_accessories_stores
  mens_womens_clothing_stores
  metal_service_centers
  miscellaneous
  miscellaneous_apparel_and_accessory_shops
  miscellaneous_auto_dealers
  miscellaneous_business_services
  miscellaneous_food_stores
  miscellaneous_general_merchandise
  miscellaneous_general_services
  miscellaneous_home_furnishing_specialty_stores
  miscellaneous_publishing_and_printing
  miscellaneous_recreation_services
  miscellaneous_repair_shops
  miscellaneous_specialty_retail
  mobile_home_dealers
  motion_picture_theaters
  motor_freight_carriers_and_trucking
  motor_homes_dealers
  motor_vehicle_supplies_and_new_parts
  motorcycle_shops_and_dealers
  motorcycle_shops_dealers
  music_stores_musical_instruments_pianos_and_sheet_music
  news_dealers_and_newsstands
  non_fi_money_orders
  non_fi_stored_value_card_purchase_load
  nondurable_goods
  nurseries_lawn_and_garden_supply_stores
  nursing_personal_care
  office_and_commercial_furniture
  opticians_eyeglasses
  optometrists_ophthalmologist
  orthopedic_goods_prosthetic_devices
  osteopaths
  package_stores_beer_wine_and_liquor
  paints_varnishes_and_supplies
  parking_lots_garages
  passenger_railways
  pawn_shops
  pet_shops_pet_food_and_supplies
  petroleum_and_petroleum_products
  photo_developing
  photographic_photocopy_microfilm_equipment_and_supplies
  photographic_studios
  picture_video_production
  piece_goods_notions_and_other_dry_goods
  plumbing_heating_equipment_and_supplies
  political_organizations
  postal_services_government_only
  precious_stones_and_metals_watches_and_jewelry
  professional_services
  public_warehousing_and_storage
  quick_copy_repro_and_blueprint
  railroads
  real_estate_agents_and_managers_rentals
  record_stores
  recreational_vehicle_rentals
  religious_goods_stores
  religious_organizations
  roofing_siding_sheet_metal
  secretarial_support_services
  security_brokers_dealers
  service_stations
  sewing_needlework_fabric_and_piece_goods_stores
  shoe_repair_hat_cleaning
  shoe_stores
  small_appliance_repair
  snowmobile_dealers
  special_trade_services
  specialty_cleaning
  sporting_goods_stores
  sporting_recreation_camps
  sports_and_riding_apparel_stores
  sports_clubs_fields
  stamp_and_coin_stores
  stationary_office_supplies_printing_and_writing_paper
  stationery_stores_office_and_school_supply_stores
  swimming_pools_sales
  t_ui_travel_germany
  tailors_alterations
  tax_payments_government_agencies
  tax_preparation_services
  taxicabs_limousines
  telecommunication_equipment_and_telephone_sales
  telecommunication_services
  telegraph_services
  tent_and_awning_shops
  testing_laboratories
  theatrical_ticket_agencies
  timeshares
  tire_retreading_and_repair
  tolls_bridge_fees
  tourist_attractions_and_exhibits
  towing_services
  trailer_parks_campgrounds
  transportation_services
  travel_agencies_tour_operators
  truck_stop_iteration
  truck_utility_trailer_rentals
  typesetting_plate_making_and_related_services
  typewriter_stores
  u_s_federal_government_agencies_or_departments
  uniforms_commercial_clothing
  used_merchandise_and_secondhand_stores
  utilities
  variety_stores
  veterinary_services
  video_amusement_game_supplies
  video_game_arcades
  video_tape_rental_stores
  vocational_trade_schools
  watch_jewelry_repair
  welding_repair
  wholesale_clubs
  wig_and_toupee_stores
  wires_money_orders
  womens_accessory_and_specialty_shops
  womens_ready_to_wear_stores
  wrecking_and_salvage_yards
}

type Stripe_IssuingCardholderSpendingLimit {
  """Maximum amount allowed to spend per interval."""
  amount: Int

  """
  Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories.
  """
  categories: [Stripe_IssuingCardholderSpendingLimitCategoriesProperty]

  """Interval (or event) to which the amount applies."""
  interval: Stripe_IssuingCardholderSpendingLimitIntervalProperty
}

enum Stripe_IssuingCardholderSpendingLimitCategoriesProperty {
  ac_refrigeration_repair
  accounting_bookkeeping_services
  advertising_services
  agricultural_cooperative
  airlines_air_carriers
  airports_flying_fields
  ambulance_services
  amusement_parks_carnivals
  antique_reproductions
  antique_shops
  aquariums
  architectural_surveying_services
  art_dealers_and_galleries
  artists_supply_and_craft_shops
  auto_and_home_supply_stores
  auto_body_repair_shops
  auto_paint_shops
  auto_service_shops
  automated_cash_disburse
  automated_fuel_dispensers
  automobile_associations
  automotive_parts_and_accessories_stores
  automotive_tire_stores
  bail_and_bond_payments
  bakeries
  bands_orchestras
  barber_and_beauty_shops
  betting_casino_gambling
  bicycle_shops
  billiard_pool_establishments
  boat_dealers
  boat_rentals_and_leases
  book_stores
  books_periodicals_and_newspapers
  bowling_alleys
  bus_lines
  business_secretarial_schools
  buying_shopping_services
  cable_satellite_and_other_pay_television_and_radio
  camera_and_photographic_supply_stores
  candy_nut_and_confectionery_stores
  car_and_truck_dealers_new_used
  car_and_truck_dealers_used_only
  car_rental_agencies
  car_washes
  carpentry_services
  carpet_upholstery_cleaning
  caterers
  charitable_and_social_service_organizations_fundraising
  chemicals_and_allied_products
  child_care_services
  childrens_and_infants_wear_stores
  chiropodists_podiatrists
  chiropractors
  cigar_stores_and_stands
  civic_social_fraternal_associations
  cleaning_and_maintenance
  clothing_rental
  colleges_universities
  commercial_equipment
  commercial_footwear
  commercial_photography_art_and_graphics
  commuter_transport_and_ferries
  computer_network_services
  computer_programming
  computer_repair
  computer_software_stores
  computers_peripherals_and_software
  concrete_work_services
  construction_materials
  consulting_public_relations
  correspondence_schools
  cosmetic_stores
  counseling_services
  country_clubs
  courier_services
  court_costs
  credit_reporting_agencies
  cruise_lines
  dairy_products_stores
  dance_hall_studios_schools
  dating_escort_services
  dentists_orthodontists
  department_stores
  detective_agencies
  digital_goods_applications
  digital_goods_games
  digital_goods_large_volume
  digital_goods_media
  direct_marketing_catalog_merchant
  direct_marketing_combination_catalog_and_retail_merchant
  direct_marketing_inbound_telemarketing
  direct_marketing_insurance_services
  direct_marketing_other
  direct_marketing_outbound_telemarketing
  direct_marketing_subscription
  direct_marketing_travel
  discount_stores
  doctors
  door_to_door_sales
  drapery_window_covering_and_upholstery_stores
  drinking_places
  drug_stores_and_pharmacies
  drugs_drug_proprietaries_and_druggist_sundries
  dry_cleaners
  durable_goods
  duty_free_stores
  eating_places_restaurants
  educational_services
  electric_razor_stores
  electrical_parts_and_equipment
  electrical_services
  electronics_repair_shops
  electronics_stores
  elementary_secondary_schools
  employment_temp_agencies
  equipment_rental
  exterminating_services
  family_clothing_stores
  fast_food_restaurants
  financial_institutions
  fines_government_administrative_entities
  fireplace_fireplace_screens_and_accessories_stores
  floor_covering_stores
  florists
  florists_supplies_nursery_stock_and_flowers
  freezer_and_locker_meat_provisioners
  fuel_dealers_non_automotive
  funeral_services_crematories
  furniture_home_furnishings_and_equipment_stores_except_appliances
  furniture_repair_refinishing
  furriers_and_fur_shops
  general_services
  gift_card_novelty_and_souvenir_shops
  glass_paint_and_wallpaper_stores
  glassware_crystal_stores
  golf_courses_public
  government_services
  grocery_stores_supermarkets
  hardware_equipment_and_supplies
  hardware_stores
  health_and_beauty_spas
  hearing_aids_sales_and_supplies
  heating_plumbing_a_c
  hobby_toy_and_game_shops
  home_supply_warehouse_stores
  hospitals
  hotels_motels_and_resorts
  household_appliance_stores
  industrial_supplies
  information_retrieval_services
  insurance_default
  insurance_underwriting_premiums
  intra_company_purchases
  jewelry_stores_watches_clocks_and_silverware_stores
  landscaping_services
  laundries
  laundry_cleaning_services
  legal_services_attorneys
  luggage_and_leather_goods_stores
  lumber_building_materials_stores
  manual_cash_disburse
  marinas_service_and_supplies
  masonry_stonework_and_plaster
  massage_parlors
  medical_and_dental_labs
  medical_dental_ophthalmic_and_hospital_equipment_and_supplies
  medical_services
  membership_organizations
  mens_and_boys_clothing_and_accessories_stores
  mens_womens_clothing_stores
  metal_service_centers
  miscellaneous
  miscellaneous_apparel_and_accessory_shops
  miscellaneous_auto_dealers
  miscellaneous_business_services
  miscellaneous_food_stores
  miscellaneous_general_merchandise
  miscellaneous_general_services
  miscellaneous_home_furnishing_specialty_stores
  miscellaneous_publishing_and_printing
  miscellaneous_recreation_services
  miscellaneous_repair_shops
  miscellaneous_specialty_retail
  mobile_home_dealers
  motion_picture_theaters
  motor_freight_carriers_and_trucking
  motor_homes_dealers
  motor_vehicle_supplies_and_new_parts
  motorcycle_shops_and_dealers
  motorcycle_shops_dealers
  music_stores_musical_instruments_pianos_and_sheet_music
  news_dealers_and_newsstands
  non_fi_money_orders
  non_fi_stored_value_card_purchase_load
  nondurable_goods
  nurseries_lawn_and_garden_supply_stores
  nursing_personal_care
  office_and_commercial_furniture
  opticians_eyeglasses
  optometrists_ophthalmologist
  orthopedic_goods_prosthetic_devices
  osteopaths
  package_stores_beer_wine_and_liquor
  paints_varnishes_and_supplies
  parking_lots_garages
  passenger_railways
  pawn_shops
  pet_shops_pet_food_and_supplies
  petroleum_and_petroleum_products
  photo_developing
  photographic_photocopy_microfilm_equipment_and_supplies
  photographic_studios
  picture_video_production
  piece_goods_notions_and_other_dry_goods
  plumbing_heating_equipment_and_supplies
  political_organizations
  postal_services_government_only
  precious_stones_and_metals_watches_and_jewelry
  professional_services
  public_warehousing_and_storage
  quick_copy_repro_and_blueprint
  railroads
  real_estate_agents_and_managers_rentals
  record_stores
  recreational_vehicle_rentals
  religious_goods_stores
  religious_organizations
  roofing_siding_sheet_metal
  secretarial_support_services
  security_brokers_dealers
  service_stations
  sewing_needlework_fabric_and_piece_goods_stores
  shoe_repair_hat_cleaning
  shoe_stores
  small_appliance_repair
  snowmobile_dealers
  special_trade_services
  specialty_cleaning
  sporting_goods_stores
  sporting_recreation_camps
  sports_and_riding_apparel_stores
  sports_clubs_fields
  stamp_and_coin_stores
  stationary_office_supplies_printing_and_writing_paper
  stationery_stores_office_and_school_supply_stores
  swimming_pools_sales
  t_ui_travel_germany
  tailors_alterations
  tax_payments_government_agencies
  tax_preparation_services
  taxicabs_limousines
  telecommunication_equipment_and_telephone_sales
  telecommunication_services
  telegraph_services
  tent_and_awning_shops
  testing_laboratories
  theatrical_ticket_agencies
  timeshares
  tire_retreading_and_repair
  tolls_bridge_fees
  tourist_attractions_and_exhibits
  towing_services
  trailer_parks_campgrounds
  transportation_services
  travel_agencies_tour_operators
  truck_stop_iteration
  truck_utility_trailer_rentals
  typesetting_plate_making_and_related_services
  typewriter_stores
  u_s_federal_government_agencies_or_departments
  uniforms_commercial_clothing
  used_merchandise_and_secondhand_stores
  utilities
  variety_stores
  veterinary_services
  video_amusement_game_supplies
  video_game_arcades
  video_tape_rental_stores
  vocational_trade_schools
  watch_jewelry_repair
  welding_repair
  wholesale_clubs
  wig_and_toupee_stores
  wires_money_orders
  womens_accessory_and_specialty_shops
  womens_ready_to_wear_stores
  wrecking_and_salvage_yards
}

enum Stripe_IssuingCardholderSpendingLimitIntervalProperty {
  all_time
  daily
  monthly
  per_authorization
  weekly
  yearly
}

enum Stripe_IssuingCardholderStatusProperty {
  active
  blocked
  inactive
}

enum Stripe_IssuingCardholderTypeProperty {
  company
  individual
}

enum Stripe_IssuingCardObjectProperty {
  issuingDOTcard
}

union Stripe_IssuingCardReplacedByProperty = WrappedString | Stripe_IssuingCard

union Stripe_IssuingCardReplacementForProperty = WrappedString | Stripe_IssuingCard

enum Stripe_IssuingCardReplacementReasonProperty {
  damaged
  expired
  lost
  stolen
}

type Stripe_IssuingCardShipping {
  address: Stripe_Address

  """The delivery company that shipped a card."""
  carrier: Stripe_IssuingCardShippingCarrierProperty

  """
  A unix timestamp representing a best estimate of when the card will be delivered.
  """
  eta: Int

  """Recipient name."""
  name: String

  """Shipment service, such as `standard` or `express`."""
  service: Stripe_IssuingCardShippingServiceProperty

  """The delivery status of the card."""
  status: Stripe_IssuingCardShippingStatusProperty

  """A tracking number for a card shipment."""
  tracking_number: String

  """
  A link to the shipping carrier's site where you can view detailed information about a card shipment.
  """
  tracking_url: String

  """Packaging options."""
  type: Stripe_IssuingCardShippingTypeProperty
}

enum Stripe_IssuingCardShippingCarrierProperty {
  dhl
  fedex
  royal_mail
  usps
}

enum Stripe_IssuingCardShippingServiceProperty {
  express
  priority
  standard
}

enum Stripe_IssuingCardShippingStatusProperty {
  canceled
  delivered
  failure
  pending
  returned
  shipped
}

enum Stripe_IssuingCardShippingTypeProperty {
  bulk
  individual
}

type Stripe_IssuingCardAuthorizationControls {
  """
  Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`.
  """
  allowed_categories: [Stripe_IssuingCardAuthorizationControlsAllowedCategoriesProperty]

  """
  Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`.
  """
  blocked_categories: [Stripe_IssuingCardAuthorizationControlsBlockedCategoriesProperty]

  """
  Limit spending with amount-based rules that apply across any cards this card replaced (i.e., its `replacement_for` card and _that_ card's `replacement_for` card, up the chain).
  """
  spending_limits: [Stripe_IssuingCardSpendingLimit]

  """
  Currency of the amounts within `spending_limits`. Always the same as the currency of the card.
  """
  spending_limits_currency: String
}

enum Stripe_IssuingCardAuthorizationControlsAllowedCategoriesProperty {
  ac_refrigeration_repair
  accounting_bookkeeping_services
  advertising_services
  agricultural_cooperative
  airlines_air_carriers
  airports_flying_fields
  ambulance_services
  amusement_parks_carnivals
  antique_reproductions
  antique_shops
  aquariums
  architectural_surveying_services
  art_dealers_and_galleries
  artists_supply_and_craft_shops
  auto_and_home_supply_stores
  auto_body_repair_shops
  auto_paint_shops
  auto_service_shops
  automated_cash_disburse
  automated_fuel_dispensers
  automobile_associations
  automotive_parts_and_accessories_stores
  automotive_tire_stores
  bail_and_bond_payments
  bakeries
  bands_orchestras
  barber_and_beauty_shops
  betting_casino_gambling
  bicycle_shops
  billiard_pool_establishments
  boat_dealers
  boat_rentals_and_leases
  book_stores
  books_periodicals_and_newspapers
  bowling_alleys
  bus_lines
  business_secretarial_schools
  buying_shopping_services
  cable_satellite_and_other_pay_television_and_radio
  camera_and_photographic_supply_stores
  candy_nut_and_confectionery_stores
  car_and_truck_dealers_new_used
  car_and_truck_dealers_used_only
  car_rental_agencies
  car_washes
  carpentry_services
  carpet_upholstery_cleaning
  caterers
  charitable_and_social_service_organizations_fundraising
  chemicals_and_allied_products
  child_care_services
  childrens_and_infants_wear_stores
  chiropodists_podiatrists
  chiropractors
  cigar_stores_and_stands
  civic_social_fraternal_associations
  cleaning_and_maintenance
  clothing_rental
  colleges_universities
  commercial_equipment
  commercial_footwear
  commercial_photography_art_and_graphics
  commuter_transport_and_ferries
  computer_network_services
  computer_programming
  computer_repair
  computer_software_stores
  computers_peripherals_and_software
  concrete_work_services
  construction_materials
  consulting_public_relations
  correspondence_schools
  cosmetic_stores
  counseling_services
  country_clubs
  courier_services
  court_costs
  credit_reporting_agencies
  cruise_lines
  dairy_products_stores
  dance_hall_studios_schools
  dating_escort_services
  dentists_orthodontists
  department_stores
  detective_agencies
  digital_goods_applications
  digital_goods_games
  digital_goods_large_volume
  digital_goods_media
  direct_marketing_catalog_merchant
  direct_marketing_combination_catalog_and_retail_merchant
  direct_marketing_inbound_telemarketing
  direct_marketing_insurance_services
  direct_marketing_other
  direct_marketing_outbound_telemarketing
  direct_marketing_subscription
  direct_marketing_travel
  discount_stores
  doctors
  door_to_door_sales
  drapery_window_covering_and_upholstery_stores
  drinking_places
  drug_stores_and_pharmacies
  drugs_drug_proprietaries_and_druggist_sundries
  dry_cleaners
  durable_goods
  duty_free_stores
  eating_places_restaurants
  educational_services
  electric_razor_stores
  electrical_parts_and_equipment
  electrical_services
  electronics_repair_shops
  electronics_stores
  elementary_secondary_schools
  employment_temp_agencies
  equipment_rental
  exterminating_services
  family_clothing_stores
  fast_food_restaurants
  financial_institutions
  fines_government_administrative_entities
  fireplace_fireplace_screens_and_accessories_stores
  floor_covering_stores
  florists
  florists_supplies_nursery_stock_and_flowers
  freezer_and_locker_meat_provisioners
  fuel_dealers_non_automotive
  funeral_services_crematories
  furniture_home_furnishings_and_equipment_stores_except_appliances
  furniture_repair_refinishing
  furriers_and_fur_shops
  general_services
  gift_card_novelty_and_souvenir_shops
  glass_paint_and_wallpaper_stores
  glassware_crystal_stores
  golf_courses_public
  government_services
  grocery_stores_supermarkets
  hardware_equipment_and_supplies
  hardware_stores
  health_and_beauty_spas
  hearing_aids_sales_and_supplies
  heating_plumbing_a_c
  hobby_toy_and_game_shops
  home_supply_warehouse_stores
  hospitals
  hotels_motels_and_resorts
  household_appliance_stores
  industrial_supplies
  information_retrieval_services
  insurance_default
  insurance_underwriting_premiums
  intra_company_purchases
  jewelry_stores_watches_clocks_and_silverware_stores
  landscaping_services
  laundries
  laundry_cleaning_services
  legal_services_attorneys
  luggage_and_leather_goods_stores
  lumber_building_materials_stores
  manual_cash_disburse
  marinas_service_and_supplies
  masonry_stonework_and_plaster
  massage_parlors
  medical_and_dental_labs
  medical_dental_ophthalmic_and_hospital_equipment_and_supplies
  medical_services
  membership_organizations
  mens_and_boys_clothing_and_accessories_stores
  mens_womens_clothing_stores
  metal_service_centers
  miscellaneous
  miscellaneous_apparel_and_accessory_shops
  miscellaneous_auto_dealers
  miscellaneous_business_services
  miscellaneous_food_stores
  miscellaneous_general_merchandise
  miscellaneous_general_services
  miscellaneous_home_furnishing_specialty_stores
  miscellaneous_publishing_and_printing
  miscellaneous_recreation_services
  miscellaneous_repair_shops
  miscellaneous_specialty_retail
  mobile_home_dealers
  motion_picture_theaters
  motor_freight_carriers_and_trucking
  motor_homes_dealers
  motor_vehicle_supplies_and_new_parts
  motorcycle_shops_and_dealers
  motorcycle_shops_dealers
  music_stores_musical_instruments_pianos_and_sheet_music
  news_dealers_and_newsstands
  non_fi_money_orders
  non_fi_stored_value_card_purchase_load
  nondurable_goods
  nurseries_lawn_and_garden_supply_stores
  nursing_personal_care
  office_and_commercial_furniture
  opticians_eyeglasses
  optometrists_ophthalmologist
  orthopedic_goods_prosthetic_devices
  osteopaths
  package_stores_beer_wine_and_liquor
  paints_varnishes_and_supplies
  parking_lots_garages
  passenger_railways
  pawn_shops
  pet_shops_pet_food_and_supplies
  petroleum_and_petroleum_products
  photo_developing
  photographic_photocopy_microfilm_equipment_and_supplies
  photographic_studios
  picture_video_production
  piece_goods_notions_and_other_dry_goods
  plumbing_heating_equipment_and_supplies
  political_organizations
  postal_services_government_only
  precious_stones_and_metals_watches_and_jewelry
  professional_services
  public_warehousing_and_storage
  quick_copy_repro_and_blueprint
  railroads
  real_estate_agents_and_managers_rentals
  record_stores
  recreational_vehicle_rentals
  religious_goods_stores
  religious_organizations
  roofing_siding_sheet_metal
  secretarial_support_services
  security_brokers_dealers
  service_stations
  sewing_needlework_fabric_and_piece_goods_stores
  shoe_repair_hat_cleaning
  shoe_stores
  small_appliance_repair
  snowmobile_dealers
  special_trade_services
  specialty_cleaning
  sporting_goods_stores
  sporting_recreation_camps
  sports_and_riding_apparel_stores
  sports_clubs_fields
  stamp_and_coin_stores
  stationary_office_supplies_printing_and_writing_paper
  stationery_stores_office_and_school_supply_stores
  swimming_pools_sales
  t_ui_travel_germany
  tailors_alterations
  tax_payments_government_agencies
  tax_preparation_services
  taxicabs_limousines
  telecommunication_equipment_and_telephone_sales
  telecommunication_services
  telegraph_services
  tent_and_awning_shops
  testing_laboratories
  theatrical_ticket_agencies
  timeshares
  tire_retreading_and_repair
  tolls_bridge_fees
  tourist_attractions_and_exhibits
  towing_services
  trailer_parks_campgrounds
  transportation_services
  travel_agencies_tour_operators
  truck_stop_iteration
  truck_utility_trailer_rentals
  typesetting_plate_making_and_related_services
  typewriter_stores
  u_s_federal_government_agencies_or_departments
  uniforms_commercial_clothing
  used_merchandise_and_secondhand_stores
  utilities
  variety_stores
  veterinary_services
  video_amusement_game_supplies
  video_game_arcades
  video_tape_rental_stores
  vocational_trade_schools
  watch_jewelry_repair
  welding_repair
  wholesale_clubs
  wig_and_toupee_stores
  wires_money_orders
  womens_accessory_and_specialty_shops
  womens_ready_to_wear_stores
  wrecking_and_salvage_yards
}

enum Stripe_IssuingCardAuthorizationControlsBlockedCategoriesProperty {
  ac_refrigeration_repair
  accounting_bookkeeping_services
  advertising_services
  agricultural_cooperative
  airlines_air_carriers
  airports_flying_fields
  ambulance_services
  amusement_parks_carnivals
  antique_reproductions
  antique_shops
  aquariums
  architectural_surveying_services
  art_dealers_and_galleries
  artists_supply_and_craft_shops
  auto_and_home_supply_stores
  auto_body_repair_shops
  auto_paint_shops
  auto_service_shops
  automated_cash_disburse
  automated_fuel_dispensers
  automobile_associations
  automotive_parts_and_accessories_stores
  automotive_tire_stores
  bail_and_bond_payments
  bakeries
  bands_orchestras
  barber_and_beauty_shops
  betting_casino_gambling
  bicycle_shops
  billiard_pool_establishments
  boat_dealers
  boat_rentals_and_leases
  book_stores
  books_periodicals_and_newspapers
  bowling_alleys
  bus_lines
  business_secretarial_schools
  buying_shopping_services
  cable_satellite_and_other_pay_television_and_radio
  camera_and_photographic_supply_stores
  candy_nut_and_confectionery_stores
  car_and_truck_dealers_new_used
  car_and_truck_dealers_used_only
  car_rental_agencies
  car_washes
  carpentry_services
  carpet_upholstery_cleaning
  caterers
  charitable_and_social_service_organizations_fundraising
  chemicals_and_allied_products
  child_care_services
  childrens_and_infants_wear_stores
  chiropodists_podiatrists
  chiropractors
  cigar_stores_and_stands
  civic_social_fraternal_associations
  cleaning_and_maintenance
  clothing_rental
  colleges_universities
  commercial_equipment
  commercial_footwear
  commercial_photography_art_and_graphics
  commuter_transport_and_ferries
  computer_network_services
  computer_programming
  computer_repair
  computer_software_stores
  computers_peripherals_and_software
  concrete_work_services
  construction_materials
  consulting_public_relations
  correspondence_schools
  cosmetic_stores
  counseling_services
  country_clubs
  courier_services
  court_costs
  credit_reporting_agencies
  cruise_lines
  dairy_products_stores
  dance_hall_studios_schools
  dating_escort_services
  dentists_orthodontists
  department_stores
  detective_agencies
  digital_goods_applications
  digital_goods_games
  digital_goods_large_volume
  digital_goods_media
  direct_marketing_catalog_merchant
  direct_marketing_combination_catalog_and_retail_merchant
  direct_marketing_inbound_telemarketing
  direct_marketing_insurance_services
  direct_marketing_other
  direct_marketing_outbound_telemarketing
  direct_marketing_subscription
  direct_marketing_travel
  discount_stores
  doctors
  door_to_door_sales
  drapery_window_covering_and_upholstery_stores
  drinking_places
  drug_stores_and_pharmacies
  drugs_drug_proprietaries_and_druggist_sundries
  dry_cleaners
  durable_goods
  duty_free_stores
  eating_places_restaurants
  educational_services
  electric_razor_stores
  electrical_parts_and_equipment
  electrical_services
  electronics_repair_shops
  electronics_stores
  elementary_secondary_schools
  employment_temp_agencies
  equipment_rental
  exterminating_services
  family_clothing_stores
  fast_food_restaurants
  financial_institutions
  fines_government_administrative_entities
  fireplace_fireplace_screens_and_accessories_stores
  floor_covering_stores
  florists
  florists_supplies_nursery_stock_and_flowers
  freezer_and_locker_meat_provisioners
  fuel_dealers_non_automotive
  funeral_services_crematories
  furniture_home_furnishings_and_equipment_stores_except_appliances
  furniture_repair_refinishing
  furriers_and_fur_shops
  general_services
  gift_card_novelty_and_souvenir_shops
  glass_paint_and_wallpaper_stores
  glassware_crystal_stores
  golf_courses_public
  government_services
  grocery_stores_supermarkets
  hardware_equipment_and_supplies
  hardware_stores
  health_and_beauty_spas
  hearing_aids_sales_and_supplies
  heating_plumbing_a_c
  hobby_toy_and_game_shops
  home_supply_warehouse_stores
  hospitals
  hotels_motels_and_resorts
  household_appliance_stores
  industrial_supplies
  information_retrieval_services
  insurance_default
  insurance_underwriting_premiums
  intra_company_purchases
  jewelry_stores_watches_clocks_and_silverware_stores
  landscaping_services
  laundries
  laundry_cleaning_services
  legal_services_attorneys
  luggage_and_leather_goods_stores
  lumber_building_materials_stores
  manual_cash_disburse
  marinas_service_and_supplies
  masonry_stonework_and_plaster
  massage_parlors
  medical_and_dental_labs
  medical_dental_ophthalmic_and_hospital_equipment_and_supplies
  medical_services
  membership_organizations
  mens_and_boys_clothing_and_accessories_stores
  mens_womens_clothing_stores
  metal_service_centers
  miscellaneous
  miscellaneous_apparel_and_accessory_shops
  miscellaneous_auto_dealers
  miscellaneous_business_services
  miscellaneous_food_stores
  miscellaneous_general_merchandise
  miscellaneous_general_services
  miscellaneous_home_furnishing_specialty_stores
  miscellaneous_publishing_and_printing
  miscellaneous_recreation_services
  miscellaneous_repair_shops
  miscellaneous_specialty_retail
  mobile_home_dealers
  motion_picture_theaters
  motor_freight_carriers_and_trucking
  motor_homes_dealers
  motor_vehicle_supplies_and_new_parts
  motorcycle_shops_and_dealers
  motorcycle_shops_dealers
  music_stores_musical_instruments_pianos_and_sheet_music
  news_dealers_and_newsstands
  non_fi_money_orders
  non_fi_stored_value_card_purchase_load
  nondurable_goods
  nurseries_lawn_and_garden_supply_stores
  nursing_personal_care
  office_and_commercial_furniture
  opticians_eyeglasses
  optometrists_ophthalmologist
  orthopedic_goods_prosthetic_devices
  osteopaths
  package_stores_beer_wine_and_liquor
  paints_varnishes_and_supplies
  parking_lots_garages
  passenger_railways
  pawn_shops
  pet_shops_pet_food_and_supplies
  petroleum_and_petroleum_products
  photo_developing
  photographic_photocopy_microfilm_equipment_and_supplies
  photographic_studios
  picture_video_production
  piece_goods_notions_and_other_dry_goods
  plumbing_heating_equipment_and_supplies
  political_organizations
  postal_services_government_only
  precious_stones_and_metals_watches_and_jewelry
  professional_services
  public_warehousing_and_storage
  quick_copy_repro_and_blueprint
  railroads
  real_estate_agents_and_managers_rentals
  record_stores
  recreational_vehicle_rentals
  religious_goods_stores
  religious_organizations
  roofing_siding_sheet_metal
  secretarial_support_services
  security_brokers_dealers
  service_stations
  sewing_needlework_fabric_and_piece_goods_stores
  shoe_repair_hat_cleaning
  shoe_stores
  small_appliance_repair
  snowmobile_dealers
  special_trade_services
  specialty_cleaning
  sporting_goods_stores
  sporting_recreation_camps
  sports_and_riding_apparel_stores
  sports_clubs_fields
  stamp_and_coin_stores
  stationary_office_supplies_printing_and_writing_paper
  stationery_stores_office_and_school_supply_stores
  swimming_pools_sales
  t_ui_travel_germany
  tailors_alterations
  tax_payments_government_agencies
  tax_preparation_services
  taxicabs_limousines
  telecommunication_equipment_and_telephone_sales
  telecommunication_services
  telegraph_services
  tent_and_awning_shops
  testing_laboratories
  theatrical_ticket_agencies
  timeshares
  tire_retreading_and_repair
  tolls_bridge_fees
  tourist_attractions_and_exhibits
  towing_services
  trailer_parks_campgrounds
  transportation_services
  travel_agencies_tour_operators
  truck_stop_iteration
  truck_utility_trailer_rentals
  typesetting_plate_making_and_related_services
  typewriter_stores
  u_s_federal_government_agencies_or_departments
  uniforms_commercial_clothing
  used_merchandise_and_secondhand_stores
  utilities
  variety_stores
  veterinary_services
  video_amusement_game_supplies
  video_game_arcades
  video_tape_rental_stores
  vocational_trade_schools
  watch_jewelry_repair
  welding_repair
  wholesale_clubs
  wig_and_toupee_stores
  wires_money_orders
  womens_accessory_and_specialty_shops
  womens_ready_to_wear_stores
  wrecking_and_salvage_yards
}

type Stripe_IssuingCardSpendingLimit {
  """Maximum amount allowed to spend per interval."""
  amount: Int

  """
  Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories.
  """
  categories: [Stripe_IssuingCardSpendingLimitCategoriesProperty]

  """Interval (or event) to which the amount applies."""
  interval: Stripe_IssuingCardSpendingLimitIntervalProperty
}

enum Stripe_IssuingCardSpendingLimitCategoriesProperty {
  ac_refrigeration_repair
  accounting_bookkeeping_services
  advertising_services
  agricultural_cooperative
  airlines_air_carriers
  airports_flying_fields
  ambulance_services
  amusement_parks_carnivals
  antique_reproductions
  antique_shops
  aquariums
  architectural_surveying_services
  art_dealers_and_galleries
  artists_supply_and_craft_shops
  auto_and_home_supply_stores
  auto_body_repair_shops
  auto_paint_shops
  auto_service_shops
  automated_cash_disburse
  automated_fuel_dispensers
  automobile_associations
  automotive_parts_and_accessories_stores
  automotive_tire_stores
  bail_and_bond_payments
  bakeries
  bands_orchestras
  barber_and_beauty_shops
  betting_casino_gambling
  bicycle_shops
  billiard_pool_establishments
  boat_dealers
  boat_rentals_and_leases
  book_stores
  books_periodicals_and_newspapers
  bowling_alleys
  bus_lines
  business_secretarial_schools
  buying_shopping_services
  cable_satellite_and_other_pay_television_and_radio
  camera_and_photographic_supply_stores
  candy_nut_and_confectionery_stores
  car_and_truck_dealers_new_used
  car_and_truck_dealers_used_only
  car_rental_agencies
  car_washes
  carpentry_services
  carpet_upholstery_cleaning
  caterers
  charitable_and_social_service_organizations_fundraising
  chemicals_and_allied_products
  child_care_services
  childrens_and_infants_wear_stores
  chiropodists_podiatrists
  chiropractors
  cigar_stores_and_stands
  civic_social_fraternal_associations
  cleaning_and_maintenance
  clothing_rental
  colleges_universities
  commercial_equipment
  commercial_footwear
  commercial_photography_art_and_graphics
  commuter_transport_and_ferries
  computer_network_services
  computer_programming
  computer_repair
  computer_software_stores
  computers_peripherals_and_software
  concrete_work_services
  construction_materials
  consulting_public_relations
  correspondence_schools
  cosmetic_stores
  counseling_services
  country_clubs
  courier_services
  court_costs
  credit_reporting_agencies
  cruise_lines
  dairy_products_stores
  dance_hall_studios_schools
  dating_escort_services
  dentists_orthodontists
  department_stores
  detective_agencies
  digital_goods_applications
  digital_goods_games
  digital_goods_large_volume
  digital_goods_media
  direct_marketing_catalog_merchant
  direct_marketing_combination_catalog_and_retail_merchant
  direct_marketing_inbound_telemarketing
  direct_marketing_insurance_services
  direct_marketing_other
  direct_marketing_outbound_telemarketing
  direct_marketing_subscription
  direct_marketing_travel
  discount_stores
  doctors
  door_to_door_sales
  drapery_window_covering_and_upholstery_stores
  drinking_places
  drug_stores_and_pharmacies
  drugs_drug_proprietaries_and_druggist_sundries
  dry_cleaners
  durable_goods
  duty_free_stores
  eating_places_restaurants
  educational_services
  electric_razor_stores
  electrical_parts_and_equipment
  electrical_services
  electronics_repair_shops
  electronics_stores
  elementary_secondary_schools
  employment_temp_agencies
  equipment_rental
  exterminating_services
  family_clothing_stores
  fast_food_restaurants
  financial_institutions
  fines_government_administrative_entities
  fireplace_fireplace_screens_and_accessories_stores
  floor_covering_stores
  florists
  florists_supplies_nursery_stock_and_flowers
  freezer_and_locker_meat_provisioners
  fuel_dealers_non_automotive
  funeral_services_crematories
  furniture_home_furnishings_and_equipment_stores_except_appliances
  furniture_repair_refinishing
  furriers_and_fur_shops
  general_services
  gift_card_novelty_and_souvenir_shops
  glass_paint_and_wallpaper_stores
  glassware_crystal_stores
  golf_courses_public
  government_services
  grocery_stores_supermarkets
  hardware_equipment_and_supplies
  hardware_stores
  health_and_beauty_spas
  hearing_aids_sales_and_supplies
  heating_plumbing_a_c
  hobby_toy_and_game_shops
  home_supply_warehouse_stores
  hospitals
  hotels_motels_and_resorts
  household_appliance_stores
  industrial_supplies
  information_retrieval_services
  insurance_default
  insurance_underwriting_premiums
  intra_company_purchases
  jewelry_stores_watches_clocks_and_silverware_stores
  landscaping_services
  laundries
  laundry_cleaning_services
  legal_services_attorneys
  luggage_and_leather_goods_stores
  lumber_building_materials_stores
  manual_cash_disburse
  marinas_service_and_supplies
  masonry_stonework_and_plaster
  massage_parlors
  medical_and_dental_labs
  medical_dental_ophthalmic_and_hospital_equipment_and_supplies
  medical_services
  membership_organizations
  mens_and_boys_clothing_and_accessories_stores
  mens_womens_clothing_stores
  metal_service_centers
  miscellaneous
  miscellaneous_apparel_and_accessory_shops
  miscellaneous_auto_dealers
  miscellaneous_business_services
  miscellaneous_food_stores
  miscellaneous_general_merchandise
  miscellaneous_general_services
  miscellaneous_home_furnishing_specialty_stores
  miscellaneous_publishing_and_printing
  miscellaneous_recreation_services
  miscellaneous_repair_shops
  miscellaneous_specialty_retail
  mobile_home_dealers
  motion_picture_theaters
  motor_freight_carriers_and_trucking
  motor_homes_dealers
  motor_vehicle_supplies_and_new_parts
  motorcycle_shops_and_dealers
  motorcycle_shops_dealers
  music_stores_musical_instruments_pianos_and_sheet_music
  news_dealers_and_newsstands
  non_fi_money_orders
  non_fi_stored_value_card_purchase_load
  nondurable_goods
  nurseries_lawn_and_garden_supply_stores
  nursing_personal_care
  office_and_commercial_furniture
  opticians_eyeglasses
  optometrists_ophthalmologist
  orthopedic_goods_prosthetic_devices
  osteopaths
  package_stores_beer_wine_and_liquor
  paints_varnishes_and_supplies
  parking_lots_garages
  passenger_railways
  pawn_shops
  pet_shops_pet_food_and_supplies
  petroleum_and_petroleum_products
  photo_developing
  photographic_photocopy_microfilm_equipment_and_supplies
  photographic_studios
  picture_video_production
  piece_goods_notions_and_other_dry_goods
  plumbing_heating_equipment_and_supplies
  political_organizations
  postal_services_government_only
  precious_stones_and_metals_watches_and_jewelry
  professional_services
  public_warehousing_and_storage
  quick_copy_repro_and_blueprint
  railroads
  real_estate_agents_and_managers_rentals
  record_stores
  recreational_vehicle_rentals
  religious_goods_stores
  religious_organizations
  roofing_siding_sheet_metal
  secretarial_support_services
  security_brokers_dealers
  service_stations
  sewing_needlework_fabric_and_piece_goods_stores
  shoe_repair_hat_cleaning
  shoe_stores
  small_appliance_repair
  snowmobile_dealers
  special_trade_services
  specialty_cleaning
  sporting_goods_stores
  sporting_recreation_camps
  sports_and_riding_apparel_stores
  sports_clubs_fields
  stamp_and_coin_stores
  stationary_office_supplies_printing_and_writing_paper
  stationery_stores_office_and_school_supply_stores
  swimming_pools_sales
  t_ui_travel_germany
  tailors_alterations
  tax_payments_government_agencies
  tax_preparation_services
  taxicabs_limousines
  telecommunication_equipment_and_telephone_sales
  telecommunication_services
  telegraph_services
  tent_and_awning_shops
  testing_laboratories
  theatrical_ticket_agencies
  timeshares
  tire_retreading_and_repair
  tolls_bridge_fees
  tourist_attractions_and_exhibits
  towing_services
  trailer_parks_campgrounds
  transportation_services
  travel_agencies_tour_operators
  truck_stop_iteration
  truck_utility_trailer_rentals
  typesetting_plate_making_and_related_services
  typewriter_stores
  u_s_federal_government_agencies_or_departments
  uniforms_commercial_clothing
  used_merchandise_and_secondhand_stores
  utilities
  variety_stores
  veterinary_services
  video_amusement_game_supplies
  video_game_arcades
  video_tape_rental_stores
  vocational_trade_schools
  watch_jewelry_repair
  welding_repair
  wholesale_clubs
  wig_and_toupee_stores
  wires_money_orders
  womens_accessory_and_specialty_shops
  womens_ready_to_wear_stores
  wrecking_and_salvage_yards
}

enum Stripe_IssuingCardSpendingLimitIntervalProperty {
  all_time
  daily
  monthly
  per_authorization
  weekly
  yearly
}

enum Stripe_IssuingCardStatusProperty {
  active
  canceled
  inactive
}

enum Stripe_IssuingCardTypeProperty {
  physical
  virtual
}

union Stripe_IssuingAuthorizationCardholderProperty = WrappedString | Stripe_IssuingCardholder

type Stripe_IssuingAuthorizationMerchantData {
  """
  A categorization of the seller's type of business. See our [merchant categories guide](https://stripe.com/docs/issuing/merchant-categories) for a list of possible values.
  """
  category: String

  """City where the seller is located"""
  city: String

  """Country where the seller is located"""
  country: String

  """Name of the seller"""
  name: String

  """Identifier assigned to the seller by the card brand"""
  network_id: String

  """Postal code where the seller is located"""
  postal_code: String

  """State where the seller is located"""
  state: String
}

enum Stripe_IssuingAuthorizationObjectProperty {
  issuingDOTauthorization
}

type Stripe_IssuingAuthorizationPendingRequest {
  """
  The additional amount Stripe will hold if the authorization is approved, in the card's [currency](https://stripe.com/docs/api#issuing_authorization_object-pending-request-currency) and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  amount: Int
  amount_details: Stripe_IssuingAuthorizationAmountDetails

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  If set `true`, you may provide [amount](https://stripe.com/docs/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization.
  """
  is_amount_controllable: Boolean

  """
  The amount the merchant is requesting to be authorized in the `merchant_currency`. The amount is in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  merchant_amount: Int

  """The local currency the merchant is requesting to authorize."""
  merchant_currency: String
}

type Stripe_IssuingAuthorizationRequest {
  """
  The `pending_request.amount` at the time of the request, presented in your card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Stripe held this amount from your account to fund the authorization if the request was approved.
  """
  amount: Int
  amount_details: Stripe_IssuingAuthorizationAmountDetails

  """Whether this request was approved."""
  approved: Boolean

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  The `pending_request.merchant_amount` at the time of the request, presented in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  merchant_amount: Int

  """
  The currency that was collected by the merchant and presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  merchant_currency: String

  """The reason for the approval or decline."""
  reason: Stripe_IssuingAuthorizationRequestReasonProperty
}

enum Stripe_IssuingAuthorizationRequestReasonProperty {
  account_disabled
  card_active
  card_inactive
  cardholder_inactive
  cardholder_verification_required
  insufficient_funds
  not_allowed
  spending_controls
  suspected_fraud
  verification_failed
  webhook_approved
  webhook_declined
  webhook_timeout
}

enum Stripe_IssuingAuthorizationStatusProperty {
  closed
  pending
  reversed
}

type Stripe_IssuingTransaction {
  """
  The transaction amount, which will be reflected in your balance. This amount is in your currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  """
  amount: Int
  amount_details: Stripe_IssuingTransactionAmountDetails
  authorization: Stripe_IssuingTransactionAuthorizationProperty
  balance_transaction: Stripe_IssuingTransactionBalanceTransactionProperty
  card: Stripe_IssuingTransactionCardProperty
  cardholder: Stripe_IssuingTransactionCardholderProperty

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  dispute: Stripe_IssuingTransactionDisputeProperty

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  The amount that the merchant will receive, denominated in `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). It will be different from `amount` if the merchant is taking payment in a different currency.
  """
  merchant_amount: Int

  """The currency with which the merchant is taking payment."""
  merchant_currency: String
  merchant_data: Stripe_IssuingAuthorizationMerchantData

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_IssuingTransactionObjectProperty
  purchase_details: Stripe_IssuingTransactionPurchaseDetails

  """The nature of the transaction."""
  type: Stripe_IssuingTransactionTypeProperty

  """
  The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`.
  """
  wallet: Stripe_IssuingTransactionWalletProperty
}

type Stripe_IssuingTransactionAmountDetails {
  """The fee charged by the ATM for the cash withdrawal."""
  atm_fee: Int
}

union Stripe_IssuingTransactionAuthorizationProperty = WrappedString | Stripe_IssuingAuthorization

union Stripe_IssuingTransactionBalanceTransactionProperty = WrappedString | Stripe_BalanceTransaction

union Stripe_IssuingTransactionCardProperty = WrappedString | Stripe_IssuingCard

union Stripe_IssuingTransactionCardholderProperty = WrappedString | Stripe_IssuingCardholder

union Stripe_IssuingTransactionDisputeProperty = WrappedString | Stripe_IssuingDispute

type Stripe_IssuingDispute {
  """
  Disputed amount. Usually the amount of the `transaction`, but can differ (usually because of currency fluctuation).
  """
  amount: Int

  """List of balance transactions associated with the dispute."""
  balance_transactions: [Stripe_BalanceTransaction]

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """The currency the `transaction` was made in."""
  currency: String
  evidence: Stripe_IssuingDisputeEvidence

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_IssuingDisputeObjectProperty

  """Current status of the dispute."""
  status: Stripe_IssuingDisputeStatusProperty
  transaction: Stripe_IssuingDisputeTransactionProperty
}

type Stripe_IssuingDisputeEvidence {
  canceled: Stripe_IssuingDisputeCanceledEvidence
  duplicate: Stripe_IssuingDisputeDuplicateEvidence
  fraudulent: Stripe_IssuingDisputeFraudulentEvidence
  merchandise_not_as_described: Stripe_IssuingDisputeMerchandiseNotAsDescribedEvidence
  not_received: Stripe_IssuingDisputeNotReceivedEvidence
  other: Stripe_IssuingDisputeOtherEvidence

  """
  The reason for filing the dispute. Its value will match the field containing the evidence.
  """
  reason: Stripe_IssuingDisputeEvidenceReasonProperty
  service_not_as_described: Stripe_IssuingDisputeServiceNotAsDescribedEvidence
}

type Stripe_IssuingDisputeCanceledEvidence {
  additional_documentation: Stripe_IssuingDisputeCanceledEvidenceAdditionalDocumentationProperty

  """Date when order was canceled."""
  canceled_at: Int

  """Whether the cardholder was provided with a cancellation policy."""
  cancellation_policy_provided: Boolean

  """Reason for canceling the order."""
  cancellation_reason: String

  """Date when the cardholder expected to receive the product."""
  expected_at: Int

  """Explanation of why the cardholder is disputing this transaction."""
  explanation: String

  """Description of the merchandise or service that was purchased."""
  product_description: String

  """Whether the product was a merchandise or service."""
  product_type: Stripe_IssuingDisputeCanceledEvidenceProductTypeProperty

  """Result of cardholder's attempt to return the product."""
  return_status: Stripe_IssuingDisputeCanceledEvidenceReturnStatusProperty

  """Date when the product was returned or attempted to be returned."""
  returned_at: Int
}

union Stripe_IssuingDisputeCanceledEvidenceAdditionalDocumentationProperty = WrappedString | Stripe_File

enum Stripe_IssuingDisputeCanceledEvidenceProductTypeProperty {
  merchandise
  service
}

enum Stripe_IssuingDisputeCanceledEvidenceReturnStatusProperty {
  merchant_rejected
  successful
}

type Stripe_IssuingDisputeDuplicateEvidence {
  additional_documentation: Stripe_IssuingDisputeDuplicateEvidenceAdditionalDocumentationProperty
  card_statement: Stripe_IssuingDisputeDuplicateEvidenceCardStatementProperty
  cash_receipt: Stripe_IssuingDisputeDuplicateEvidenceCashReceiptProperty
  check_image: Stripe_IssuingDisputeDuplicateEvidenceCheckImageProperty

  """Explanation of why the cardholder is disputing this transaction."""
  explanation: String

  """
  Transaction (e.g., ipi_...) that the disputed transaction is a duplicate of. Of the two or more transactions that are copies of each other, this is original undisputed one.
  """
  original_transaction: String
}

union Stripe_IssuingDisputeDuplicateEvidenceAdditionalDocumentationProperty = WrappedString | Stripe_File

union Stripe_IssuingDisputeDuplicateEvidenceCardStatementProperty = WrappedString | Stripe_File

union Stripe_IssuingDisputeDuplicateEvidenceCashReceiptProperty = WrappedString | Stripe_File

union Stripe_IssuingDisputeDuplicateEvidenceCheckImageProperty = WrappedString | Stripe_File

type Stripe_IssuingDisputeFraudulentEvidence {
  additional_documentation: Stripe_IssuingDisputeFraudulentEvidenceAdditionalDocumentationProperty

  """Explanation of why the cardholder is disputing this transaction."""
  explanation: String
}

union Stripe_IssuingDisputeFraudulentEvidenceAdditionalDocumentationProperty = WrappedString | Stripe_File

type Stripe_IssuingDisputeMerchandiseNotAsDescribedEvidence {
  additional_documentation: Stripe_IssuingDisputeMerchandiseNotAsDescribedEvidenceAdditionalDocumentationProperty

  """Explanation of why the cardholder is disputing this transaction."""
  explanation: String

  """Date when the product was received."""
  received_at: Int

  """Description of the cardholder's attempt to return the product."""
  return_description: String

  """Result of cardholder's attempt to return the product."""
  return_status: Stripe_IssuingDisputeMerchandiseNotAsDescribedEvidenceReturnStatusProperty

  """Date when the product was returned or attempted to be returned."""
  returned_at: Int
}

union Stripe_IssuingDisputeMerchandiseNotAsDescribedEvidenceAdditionalDocumentationProperty = WrappedString | Stripe_File

enum Stripe_IssuingDisputeMerchandiseNotAsDescribedEvidenceReturnStatusProperty {
  merchant_rejected
  successful
}

type Stripe_IssuingDisputeNotReceivedEvidence {
  additional_documentation: Stripe_IssuingDisputeNotReceivedEvidenceAdditionalDocumentationProperty

  """Date when the cardholder expected to receive the product."""
  expected_at: Int

  """Explanation of why the cardholder is disputing this transaction."""
  explanation: String

  """Description of the merchandise or service that was purchased."""
  product_description: String

  """Whether the product was a merchandise or service."""
  product_type: Stripe_IssuingDisputeNotReceivedEvidenceProductTypeProperty
}

union Stripe_IssuingDisputeNotReceivedEvidenceAdditionalDocumentationProperty = WrappedString | Stripe_File

enum Stripe_IssuingDisputeNotReceivedEvidenceProductTypeProperty {
  merchandise
  service
}

type Stripe_IssuingDisputeOtherEvidence {
  additional_documentation: Stripe_IssuingDisputeOtherEvidenceAdditionalDocumentationProperty

  """Explanation of why the cardholder is disputing this transaction."""
  explanation: String

  """Description of the merchandise or service that was purchased."""
  product_description: String

  """Whether the product was a merchandise or service."""
  product_type: Stripe_IssuingDisputeOtherEvidenceProductTypeProperty
}

union Stripe_IssuingDisputeOtherEvidenceAdditionalDocumentationProperty = WrappedString | Stripe_File

enum Stripe_IssuingDisputeOtherEvidenceProductTypeProperty {
  merchandise
  service
}

enum Stripe_IssuingDisputeEvidenceReasonProperty {
  canceled
  duplicate
  fraudulent
  merchandise_not_as_described
  not_received
  other
  service_not_as_described
}

type Stripe_IssuingDisputeServiceNotAsDescribedEvidence {
  additional_documentation: Stripe_IssuingDisputeServiceNotAsDescribedEvidenceAdditionalDocumentationProperty

  """Date when order was canceled."""
  canceled_at: Int

  """Reason for canceling the order."""
  cancellation_reason: String

  """Explanation of why the cardholder is disputing this transaction."""
  explanation: String

  """Date when the product was received."""
  received_at: Int
}

union Stripe_IssuingDisputeServiceNotAsDescribedEvidenceAdditionalDocumentationProperty = WrappedString | Stripe_File

enum Stripe_IssuingDisputeObjectProperty {
  issuingDOTdispute
}

enum Stripe_IssuingDisputeStatusProperty {
  expired
  lost
  submitted
  unsubmitted
  won
}

union Stripe_IssuingDisputeTransactionProperty = WrappedString | Stripe_IssuingTransaction

enum Stripe_IssuingTransactionObjectProperty {
  issuingDOTtransaction
}

type Stripe_IssuingTransactionPurchaseDetails {
  flight: Stripe_IssuingTransactionFlightData
  fuel: Stripe_IssuingTransactionFuelData
  lodging: Stripe_IssuingTransactionLodgingData

  """The line items in the purchase."""
  receipt: [Stripe_IssuingTransactionReceiptData]

  """A merchant-specific order number."""
  reference: String
}

type Stripe_IssuingTransactionFlightData {
  """The time that the flight departed."""
  departure_at: Int

  """The name of the passenger."""
  passenger_name: String

  """Whether the ticket is refundable."""
  refundable: Boolean

  """The legs of the trip."""
  segments: [Stripe_IssuingTransactionFlightDataLeg]

  """The travel agency that issued the ticket."""
  travel_agency: String
}

type Stripe_IssuingTransactionFlightDataLeg {
  """The three-letter IATA airport code of the flight's destination."""
  arrival_airport_code: String

  """The airline carrier code."""
  carrier: String

  """The three-letter IATA airport code that the flight departed from."""
  departure_airport_code: String

  """The flight number."""
  flight_number: String

  """The flight's service class."""
  service_class: String

  """Whether a stopover is allowed on this flight."""
  stopover_allowed: Boolean
}

type Stripe_IssuingTransactionFuelData {
  """
  The type of fuel that was purchased. One of `diesel`, `unleaded_plus`, `unleaded_regular`, `unleaded_super`, or `other`.
  """
  type: String

  """The units for `volume_decimal`. One of `us_gallon` or `liter`."""
  unit: String

  """
  The cost in cents per each unit of fuel, represented as a decimal string with at most 12 decimal places.
  """
  unit_cost_decimal: String

  """
  The volume of the fuel that was pumped, represented as a decimal string with at most 12 decimal places.
  """
  volume_decimal: String
}

type Stripe_IssuingTransactionLodgingData {
  """The time of checking into the lodging."""
  check_in_at: Int

  """The number of nights stayed at the lodging."""
  nights: Int
}

type Stripe_IssuingTransactionReceiptData {
  """
  The description of the item. The maximum length of this field is 26 characters.
  """
  description: String

  """The quantity of the item."""
  quantity: Float

  """The total for this line item in cents."""
  total: Int

  """The unit cost of the item in cents."""
  unit_cost: Int
}

enum Stripe_IssuingTransactionTypeProperty {
  capture
  refund
}

enum Stripe_IssuingTransactionWalletProperty {
  apple_pay
  google_pay
  samsung_pay
}

type Stripe_IssuingAuthorizationVerificationData {
  """
  Whether the cardholder provided an address first line and if it matched the cardholder’s `billing.address.line1`.
  """
  address_line1_check: Stripe_IssuingAuthorizationVerificationDataAddressLine1CheckProperty

  """
  Whether the cardholder provided a postal code and if it matched the cardholder’s `billing.address.postal_code`.
  """
  address_postal_code_check: Stripe_IssuingAuthorizationVerificationDataAddressPostalCodeCheckProperty

  """
  Whether the cardholder provided a CVC and if it matched Stripe’s record.
  """
  cvc_check: Stripe_IssuingAuthorizationVerificationDataCvcCheckProperty

  """
  Whether the cardholder provided an expiry date and if it matched Stripe’s record.
  """
  expiry_check: Stripe_IssuingAuthorizationVerificationDataExpiryCheckProperty
}

enum Stripe_IssuingAuthorizationVerificationDataAddressLine1CheckProperty {
  match
  mismatch
  not_provided
}

enum Stripe_IssuingAuthorizationVerificationDataAddressPostalCodeCheckProperty {
  match
  mismatch
  not_provided
}

enum Stripe_IssuingAuthorizationVerificationDataCvcCheckProperty {
  match
  mismatch
  not_provided
}

enum Stripe_IssuingAuthorizationVerificationDataExpiryCheckProperty {
  match
  mismatch
  not_provided
}

type Stripe_Payout {
  """Amount (in %s) to be transferred to your bank account or debit card."""
  amount: Int

  """
  Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.
  """
  arrival_date: Int

  """
  Returns `true` if the payout was created by an [automated payout schedule](https://stripe.com/docs/payouts#payout-schedule), and `false` if it was [requested manually](https://stripe.com/docs/payouts#manual-payouts).
  """
  automatic: Boolean
  balance_transaction: Stripe_PayoutBalanceTransactionProperty

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String
  destination: Stripe_PayoutDestinationProperty
  failure_balance_transaction: Stripe_PayoutFailureBalanceTransactionProperty

  """
  Error code explaining reason for payout failure if available. See [Types of payout failures](https://stripe.com/docs/api#payout_failures) for a list of failure codes.
  """
  failure_code: String

  """
  Message to user further explaining reason for payout failure if available.
  """
  failure_message: String

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  The method used to send this payout, which can be `standard` or `instant`. `instant` is only supported for payouts to debit cards. (See [Instant payouts for marketplaces](https://stripe.com/blog/instant-payouts-for-marketplaces) for more information.)
  """
  method: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_PayoutObjectProperty
  original_payout: Stripe_PayoutOriginalPayoutProperty
  reversed_by: Stripe_PayoutReversedByProperty

  """
  The source balance this payout came from. One of `card`, `fpx`, or `bank_account`.
  """
  source_type: String

  """
  Extra information about a payout to be displayed on the user's bank statement.
  """
  statement_descriptor: String

  """
  Current status of the payout: `paid`, `pending`, `in_transit`, `canceled` or `failed`. A payout is `pending` until it is submitted to the bank, when it becomes `in_transit`. The status then changes to `paid` if the transaction goes through, or to `failed` or `canceled` (within 5 business days). Some failed payouts may initially show as `paid` but then change to `failed`.
  """
  status: String

  """Can be `bank_account` or `card`."""
  type: Stripe_PayoutTypeProperty
}

union Stripe_PayoutBalanceTransactionProperty = WrappedString | Stripe_BalanceTransaction

union Stripe_PayoutDestinationProperty = WrappedString | Stripe_BankAccount | Stripe_Card | Stripe_DeletedBankAccount | Stripe_DeletedCard

type Stripe_DeletedBankAccount {
  """
  Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.
  """
  currency: String

  """Unique identifier for the object."""
  id: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_DeletedBankAccountObjectProperty
}

enum Stripe_DeletedBankAccountObjectProperty {
  bank_account
}

type Stripe_DeletedCard {
  """
  Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.
  """
  currency: String

  """Unique identifier for the object."""
  id: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_DeletedCardObjectProperty
}

enum Stripe_DeletedCardObjectProperty {
  card
}

union Stripe_PayoutFailureBalanceTransactionProperty = WrappedString | Stripe_BalanceTransaction

enum Stripe_PayoutObjectProperty {
  payout
}

union Stripe_PayoutOriginalPayoutProperty = WrappedString | Stripe_Payout

union Stripe_PayoutReversedByProperty = WrappedString | Stripe_Payout

enum Stripe_PayoutTypeProperty {
  bank_account
  card
}

type Stripe_PlatformTaxFee {
  """The Connected account that incurred this charge."""
  account: String

  """Unique identifier for the object."""
  id: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_PlatformTaxFeeObjectProperty

  """The payment object that caused this tax to be inflicted."""
  source_transaction: String

  """The type of tax (VAT)."""
  type: String
}

enum Stripe_PlatformTaxFeeObjectProperty {
  platform_tax_fee
}

type Stripe_Refund {
  """Amount, in %s."""
  amount: Int
  balance_transaction: Stripe_RefundBalanceTransactionProperty
  charge: Stripe_RefundChargeProperty

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only)
  """
  description: String
  failure_balance_transaction: Stripe_RefundFailureBalanceTransactionProperty

  """
  If the refund failed, the reason for refund failure if known. Possible values are `lost_or_stolen_card`, `expired_or_canceled_card`, or `unknown`.
  """
  failure_reason: String

  """Unique identifier for the object."""
  id: String

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_RefundObjectProperty
  payment_intent: Stripe_RefundPaymentIntentProperty

  """
  Reason for the refund, either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
  """
  reason: String

  """
  This is the transaction number that appears on email receipts sent for this refund.
  """
  receipt_number: String
  source_transfer_reversal: Stripe_RefundSourceTransferReversalProperty

  """
  Status of the refund. For credit card refunds, this can be `pending`, `succeeded`, or `failed`. For other types of refunds, it can be `pending`, `succeeded`, `failed`, or `canceled`. Refer to our [refunds](https://stripe.com/docs/refunds#failed-refunds) documentation for more details.
  """
  status: String
  transfer_reversal: Stripe_RefundTransferReversalProperty
}

union Stripe_RefundBalanceTransactionProperty = WrappedString | Stripe_BalanceTransaction

union Stripe_RefundChargeProperty = WrappedString | Stripe_Charge

union Stripe_RefundFailureBalanceTransactionProperty = WrappedString | Stripe_BalanceTransaction

enum Stripe_RefundObjectProperty {
  refund
}

union Stripe_RefundPaymentIntentProperty = WrappedString | Stripe_PaymentIntent

union Stripe_RefundSourceTransferReversalProperty = WrappedString | Stripe_TransferReversal

type Stripe_TransferReversal {
  """Amount, in %s."""
  amount: Int
  balance_transaction: Stripe_TransferReversalBalanceTransactionProperty

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  destination_payment_refund: Stripe_TransferReversalDestinationPaymentRefundProperty

  """Unique identifier for the object."""
  id: String

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_TransferReversalObjectProperty
  source_refund: Stripe_TransferReversalSourceRefundProperty
  transfer: Stripe_TransferReversalTransferProperty
}

union Stripe_TransferReversalBalanceTransactionProperty = WrappedString | Stripe_BalanceTransaction

union Stripe_TransferReversalDestinationPaymentRefundProperty = WrappedString | Stripe_Refund

enum Stripe_TransferReversalObjectProperty {
  transfer_reversal
}

union Stripe_TransferReversalSourceRefundProperty = WrappedString | Stripe_Refund

union Stripe_TransferReversalTransferProperty = WrappedString | Stripe_Transfer

type Stripe_Transfer {
  """Amount in %s to be transferred."""
  amount: Int

  """
  Amount in %s reversed (can be less than the amount attribute on the transfer if a partial reversal was issued).
  """
  amount_reversed: Int
  balance_transaction: Stripe_TransferBalanceTransactionProperty

  """Time that this record of the transfer was first created."""
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String
  destination: Stripe_TransferDestinationProperty
  destination_payment: Stripe_TransferDestinationPaymentProperty

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_TransferObjectProperty

  """A list of reversals that have been applied to the transfer."""
  reversals: Stripe_TransferReversalsProperty

  """
  Whether the transfer has been fully reversed. If the transfer is only partially reversed, this attribute will still be false.
  """
  reversed: Boolean
  source_transaction: Stripe_TransferSourceTransactionProperty

  """
  The source balance this transfer came from. One of `card`, `fpx`, or `bank_account`.
  """
  source_type: String

  """
  A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details.
  """
  transfer_group: String
}

union Stripe_TransferBalanceTransactionProperty = WrappedString | Stripe_BalanceTransaction

union Stripe_TransferDestinationProperty = WrappedString | Stripe_Account

union Stripe_TransferDestinationPaymentProperty = WrappedString | Stripe_Charge

enum Stripe_TransferObjectProperty {
  transfer
}

"""A list of reversals that have been applied to the transfer."""
type Stripe_TransferReversalsProperty {
  """Details about each object."""
  data: [Stripe_TransferReversal!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_TransferReversalsObjectProperty!

  """The URL where this list can be accessed."""
  url: String!
}

enum Stripe_TransferReversalsObjectProperty {
  list
}

union Stripe_TransferSourceTransactionProperty = WrappedString | Stripe_Charge

union Stripe_RefundTransferReversalProperty = WrappedString | Stripe_TransferReversal

type Stripe_ReserveTransaction {
  amount: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String

  """Unique identifier for the object."""
  id: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_ReserveTransactionObjectProperty
}

enum Stripe_ReserveTransactionObjectProperty {
  reserve_transaction
}

type Stripe_TaxDeductedAtSource {
  """Unique identifier for the object."""
  id: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_TaxDeductedAtSourceObjectProperty

  """
  The end of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
  """
  period_end: Int

  """
  The start of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
  """
  period_start: Int

  """The TAN that was supplied to Stripe when TDS was assessed"""
  tax_deduction_account_number: String
}

enum Stripe_TaxDeductedAtSourceObjectProperty {
  tax_deducted_at_source
}

type Stripe_Topup {
  """Amount transferred."""
  amount: Int
  balance_transaction: Stripe_TopupBalanceTransactionProperty

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String

  """
  Date the funds are expected to arrive in your Stripe account for payouts. This factors in delays like weekends or bank holidays. May not be specified depending on status of top-up.
  """
  expected_availability_date: Int

  """
  Error code explaining reason for top-up failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes).
  """
  failure_code: String

  """
  Message to user further explaining reason for top-up failure if available.
  """
  failure_message: String

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_TopupObjectProperty
  source: Stripe_Source

  """
  Extra information about a top-up. This will appear on your source's bank statement. It must contain at least one letter.
  """
  statement_descriptor: String

  """
  The status of the top-up is either `canceled`, `failed`, `pending`, `reversed`, or `succeeded`.
  """
  status: Stripe_TopupStatusProperty

  """A string that identifies this top-up as part of a group."""
  transfer_group: String
}

union Stripe_TopupBalanceTransactionProperty = WrappedString | Stripe_BalanceTransaction

enum Stripe_TopupObjectProperty {
  topup
}

enum Stripe_TopupStatusProperty {
  canceled
  failed
  pending
  reversed
  succeeded
}

enum Stripe_BalanceTransactionTypeProperty {
  adjustment
  advance
  advance_funding
  anticipation_repayment
  application_fee
  application_fee_refund
  charge
  connect_collection_transfer
  contribution
  issuing_authorization_hold
  issuing_authorization_release
  issuing_dispute
  issuing_transaction
  payment
  payment_failure_refund
  payment_refund
  payout
  payout_cancel
  payout_failure
  refund
  refund_failure
  reserve_transaction
  reserved_funds
  stripe_fee
  stripe_fx_fee
  tax_fee
  topup
  topup_reversal
  transfer
  transfer_cancel
  transfer_failure
  transfer_refund
}

union Stripe_ApplicationFeeChargeProperty = WrappedString | Stripe_Charge

enum Stripe_ApplicationFeeObjectProperty {
  application_fee
}

union Stripe_ApplicationFeeOriginatingTransactionProperty = WrappedString | Stripe_Charge

"""A list of refunds that have been applied to the fee."""
type Stripe_ApplicationFeeRefundsProperty {
  """Details about each object."""
  data: [Stripe_FeeRefund!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_ApplicationFeeRefundsObjectProperty!

  """The URL where this list can be accessed."""
  url: String!
}

enum Stripe_ApplicationFeeRefundsObjectProperty {
  list
}

union Stripe_ChargeBalanceTransactionProperty = WrappedString | Stripe_BalanceTransaction

union Stripe_ChargeCustomerProperty = WrappedString | Stripe_Customer | Stripe_DeletedCustomer

type Stripe_ChargeFraudDetails {
  """Assessments from Stripe. If set, the value is `fraudulent`."""
  stripe_report: String

  """
  Assessments reported by you. If set, possible values of are `safe` and `fraudulent`.
  """
  user_report: String
}

union Stripe_ChargeInvoiceProperty = WrappedString | Stripe_Invoice

type Stripe_Invoice {
  """
  The country of the business associated with this invoice, most often the business creating the invoice.
  """
  account_country: String

  """
  The public name of the business associated with this invoice, most often the business creating the invoice.
  """
  account_name: String

  """
  The account tax IDs associated with the invoice. Only editable when the invoice is a draft.
  """
  account_tax_ids: [Stripe_InvoiceAccountTaxIdsProperty]

  """
  Final amount due at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the `amount_due` may be 0. If there is a positive `starting_balance` for the invoice (the customer owes money), the `amount_due` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in `amount_due`.
  """
  amount_due: Int

  """The amount, in %s, that was paid."""
  amount_paid: Int

  """The amount remaining, in %s, that is due."""
  amount_remaining: Int

  """
  The fee in %s that will be applied to the invoice and transferred to the application owner's Stripe account when the invoice is paid.
  """
  application_fee_amount: Int

  """
  Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule.
  """
  attempt_count: Int

  """
  Whether an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the `invoice.created` webhook, for example, so you might not want to display that invoice as unpaid to your users.
  """
  attempted: Boolean

  """
  Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice. When `false`, the invoice's state will not automatically advance without an explicit action.
  """
  auto_advance: Boolean
  automatic_tax: Stripe_AutomaticTax

  """
  Indicates the reason why the invoice was created. `subscription_cycle` indicates an invoice created by a subscription advancing into a new period. `subscription_create` indicates an invoice created due to creating a subscription. `subscription_update` indicates an invoice created due to updating a subscription. `subscription` is set for all old invoices to indicate either a change to a subscription or a period advancement. `manual` is set for all invoices unrelated to a subscription (for example: created via the invoice editor). The `upcoming` value is reserved for simulated invoices per the upcoming invoice endpoint. `subscription_threshold` indicates an invoice created due to a billing threshold being reached.
  """
  billing_reason: Stripe_InvoiceBillingReasonProperty
  charge: Stripe_InvoiceChargeProperty

  """
  Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions.
  """
  collection_method: Stripe_InvoiceCollectionMethodProperty

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """Custom fields displayed on the invoice."""
  custom_fields: [Stripe_InvoiceSettingCustomField]
  customer: Stripe_InvoiceCustomerProperty
  customer_address: Stripe_Address

  """
  The customer's email. Until the invoice is finalized, this field will equal `customer.email`. Once the invoice is finalized, this field will no longer be updated.
  """
  customer_email: String

  """
  The customer's name. Until the invoice is finalized, this field will equal `customer.name`. Once the invoice is finalized, this field will no longer be updated.
  """
  customer_name: String

  """
  The customer's phone number. Until the invoice is finalized, this field will equal `customer.phone`. Once the invoice is finalized, this field will no longer be updated.
  """
  customer_phone: String
  customer_shipping: Stripe_Shipping

  """
  The customer's tax exempt status. Until the invoice is finalized, this field will equal `customer.tax_exempt`. Once the invoice is finalized, this field will no longer be updated.
  """
  customer_tax_exempt: Stripe_InvoiceCustomerTaxExemptProperty

  """
  The customer's tax IDs. Until the invoice is finalized, this field will contain the same tax IDs as `customer.tax_ids`. Once the invoice is finalized, this field will no longer be updated.
  """
  customer_tax_ids: [Stripe_InvoicesResourceInvoiceTaxId]
  default_payment_method: Stripe_InvoiceDefaultPaymentMethodProperty
  default_source: Stripe_InvoiceDefaultSourceProperty

  """The tax rates applied to this invoice, if any."""
  default_tax_rates: [Stripe_TaxRate]

  """
  An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard.
  """
  description: String
  discount: Stripe_Discount

  """
  The discounts applied to the invoice. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount.
  """
  discounts: [Stripe_InvoiceDiscountsProperty]

  """
  The date on which payment for this invoice is due. This value will be `null` for invoices where `collection_method=charge_automatically`.
  """
  due_date: Int

  """
  Ending customer balance after the invoice is finalized. Invoices are finalized approximately an hour after successful webhook delivery or when payment collection is attempted for the invoice. If the invoice has not been finalized yet, this will be null.
  """
  ending_balance: Int

  """Footer displayed on the invoice."""
  footer: String

  """
  The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null.
  """
  hosted_invoice_url: String

  """Unique identifier for the object."""
  id: String

  """
  The link to download the PDF for the invoice. If the invoice has not been finalized yet, this will be null.
  """
  invoice_pdf: String
  last_finalization_error: Stripe_ApiErrors

  """
  The individual line items that make up the invoice. `lines` is sorted as follows: invoice items in reverse chronological order, followed by the subscription, if any.
  """
  lines: Stripe_InvoiceLinesProperty

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  The time at which payment will next be attempted. This value will be `null` for invoices where `collection_method=send_invoice`.
  """
  next_payment_attempt: Int

  """
  A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer's unique invoice_prefix if it is specified.
  """
  number: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_InvoiceObjectProperty
  on_behalf_of: Stripe_InvoiceOnBehalfOfProperty

  """
  Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance.
  """
  paid: Boolean
  payment_intent: Stripe_InvoicePaymentIntentProperty
  payment_settings: Stripe_InvoicesPaymentSettings

  """
  End of the usage period during which invoice items were added to this invoice.
  """
  period_end: Int

  """
  Start of the usage period during which invoice items were added to this invoice.
  """
  period_start: Int

  """Total amount of all post-payment credit notes issued for this invoice."""
  post_payment_credit_notes_amount: Int

  """Total amount of all pre-payment credit notes issued for this invoice."""
  pre_payment_credit_notes_amount: Int
  quote: Stripe_InvoiceQuoteProperty

  """
  This is the transaction number that appears on email receipts sent for this invoice.
  """
  receipt_number: String

  """
  Starting customer balance before the invoice is finalized. If the invoice has not been finalized yet, this will be the current customer balance.
  """
  starting_balance: Int

  """
  Extra information about an invoice for the customer's credit card statement.
  """
  statement_descriptor: String

  """
  The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview)
  """
  status: Stripe_InvoiceStatusProperty
  status_transitions: Stripe_InvoicesStatusTransitions
  subscription: Stripe_InvoiceSubscriptionProperty

  """
  Only set for upcoming invoices that preview prorations. The time used to calculate prorations.
  """
  subscription_proration_date: Int

  """
  Total of all subscriptions, invoice items, and prorations on the invoice before any invoice level discount or tax is applied. Item discounts are already incorporated
  """
  subtotal: Int

  """
  The amount of tax on this invoice. This is the sum of all the tax amounts on this invoice.
  """
  tax: Int
  threshold_reason: Stripe_InvoiceThresholdReason

  """Total after discounts and taxes."""
  total: Int

  """The aggregate amounts calculated per discount across all line items."""
  total_discount_amounts: [Stripe_DiscountsResourceDiscountAmount]

  """The aggregate amounts calculated per tax rate for all line items."""
  total_tax_amounts: [Stripe_InvoiceTaxAmount]
  transfer_data: Stripe_InvoiceTransferData

  """
  Invoices are automatically paid or sent 1 hour after webhooks are delivered, or until all webhook delivery attempts have [been exhausted](https://stripe.com/docs/billing/webhooks#understand). This field tracks the time when webhooks for this invoice were successfully delivered. If the invoice had no webhooks to deliver, this will be set while the invoice is being created.
  """
  webhooks_delivered_at: Int
}

union Stripe_InvoiceAccountTaxIdsProperty = WrappedString | Stripe_TaxId

type Stripe_TaxId {
  """Two-letter ISO code representing the country of the tax ID."""
  country: String

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int
  customer: Stripe_TaxIdCustomerProperty

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_TaxIdObjectProperty

  """
  Type of the tax ID, one of `ae_trn`, `au_abn`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_vat`, `cl_tin`, `es_cif`, `eu_vat`, `gb_vat`, `hk_br`, `id_npwp`, `il_vat`, `in_gst`, `jp_cn`, `jp_rn`, `kr_brn`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `no_vat`, `nz_gst`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `th_vat`, `tw_vat`, `us_ein`, or `za_vat`. Note that some legacy tax IDs have type `unknown`
  """
  type: Stripe_TaxIdTypeProperty

  """Value of the tax ID."""
  value: String
  verification: Stripe_TaxIdVerification
}

union Stripe_TaxIdCustomerProperty = WrappedString | Stripe_Customer

enum Stripe_TaxIdObjectProperty {
  tax_id
}

enum Stripe_TaxIdTypeProperty {
  ae_trn
  au_abn
  br_cnpj
  br_cpf
  ca_bn
  ca_gst_hst
  ca_pst_bc
  ca_pst_mb
  ca_pst_sk
  ca_qst
  ch_vat
  cl_tin
  es_cif
  eu_vat
  gb_vat
  hk_br
  id_npwp
  il_vat
  in_gst
  jp_cn
  jp_rn
  kr_brn
  li_uid
  mx_rfc
  my_frp
  my_itn
  my_sst
  no_vat
  nz_gst
  ru_inn
  ru_kpp
  sa_vat
  sg_gst
  sg_uen
  th_vat
  tw_vat
  unknown
  us_ein
  za_vat
}

type Stripe_TaxIdVerification {
  """
  Verification status, one of `pending`, `verified`, `unverified`, or `unavailable`.
  """
  status: Stripe_TaxIdVerificationStatusProperty

  """Verified address."""
  verified_address: String

  """Verified name."""
  verified_name: String
}

enum Stripe_TaxIdVerificationStatusProperty {
  pending
  unavailable
  unverified
  verified
}

type Stripe_AutomaticTax {
  """Whether Stripe automatically computes tax on this invoice."""
  enabled: Boolean

  """
  The status of the most recent automated tax calculation for this invoice.
  """
  status: Stripe_AutomaticTaxStatusProperty
}

enum Stripe_AutomaticTaxStatusProperty {
  complete
  failed
  requires_location_inputs
}

enum Stripe_InvoiceBillingReasonProperty {
  automatic_pending_invoice_item_invoice
  manual
  quote_accept
  subscription
  subscription_create
  subscription_cycle
  subscription_threshold
  subscription_update
  upcoming
}

union Stripe_InvoiceChargeProperty = WrappedString | Stripe_Charge

enum Stripe_InvoiceCollectionMethodProperty {
  charge_automatically
  send_invoice
}

union Stripe_InvoiceCustomerProperty = WrappedString | Stripe_Customer | Stripe_DeletedCustomer

enum Stripe_InvoiceCustomerTaxExemptProperty {
  exempt
  none
  reverse
}

type Stripe_InvoicesResourceInvoiceTaxId {
  """
  The type of the tax ID, one of `eu_vat`, `br_cnpj`, `br_cpf`, `gb_vat`, `nz_gst`, `au_abn`, `in_gst`, `no_vat`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `li_uid`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, or `unknown`
  """
  type: Stripe_InvoicesResourceInvoiceTaxIdTypeProperty

  """The value of the tax ID."""
  value: String
}

enum Stripe_InvoicesResourceInvoiceTaxIdTypeProperty {
  ae_trn
  au_abn
  br_cnpj
  br_cpf
  ca_bn
  ca_gst_hst
  ca_pst_bc
  ca_pst_mb
  ca_pst_sk
  ca_qst
  ch_vat
  cl_tin
  es_cif
  eu_vat
  gb_vat
  hk_br
  id_npwp
  il_vat
  in_gst
  jp_cn
  jp_rn
  kr_brn
  li_uid
  mx_rfc
  my_frp
  my_itn
  my_sst
  no_vat
  nz_gst
  ru_inn
  ru_kpp
  sa_vat
  sg_gst
  sg_uen
  th_vat
  tw_vat
  unknown
  us_ein
  za_vat
}

union Stripe_InvoiceDefaultPaymentMethodProperty = WrappedString | Stripe_PaymentMethod

union Stripe_InvoiceDefaultSourceProperty = WrappedString | Stripe_AlipayAccount | Stripe_BankAccount | Stripe_BitcoinReceiver | Stripe_Card | Stripe_Source

type Stripe_TaxRate {
  """
  Defaults to `true`. When set to `false`, this tax rate cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.
  """
  active: Boolean

  """
  Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
  """
  country: String

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.
  """
  description: String

  """
  The display name of the tax rates as it will appear to your customer on their receipt email, PDF, and the hosted invoice page.
  """
  display_name: String

  """Unique identifier for the object."""
  id: String

  """This specifies if the tax rate is inclusive or exclusive."""
  inclusive: Boolean

  """
  The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.
  """
  jurisdiction: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_TaxRateObjectProperty

  """This represents the tax rate percent out of 100."""
  percentage: Float

  """
  [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, "NY" for New York, United States.
  """
  state: String

  """The high-level tax type, such as `vat` or `sales_tax`."""
  tax_type: Stripe_TaxRateTaxTypeProperty
}

enum Stripe_TaxRateObjectProperty {
  tax_rate
}

enum Stripe_TaxRateTaxTypeProperty {
  gst
  hst
  pst
  qst
  sales_tax
  vat
}

union Stripe_InvoiceDiscountsProperty = WrappedString | Stripe_Discount | Stripe_DeletedDiscount

type Stripe_DeletedDiscount {
  """
  The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode.
  """
  checkout_session: String
  coupon: Stripe_Coupon
  customer: Stripe_DeletedDiscountCustomerProperty

  """
  The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array.
  """
  id: String

  """
  The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice.
  """
  invoice: String

  """
  The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item.
  """
  invoice_item: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_DeletedDiscountObjectProperty
  promotion_code: Stripe_DeletedDiscountPromotionCodeProperty

  """Date that the coupon was applied."""
  start: Int

  """
  The subscription that this coupon is applied to, if it is applied to a particular subscription.
  """
  subscription: String
}

union Stripe_DeletedDiscountCustomerProperty = WrappedString | Stripe_Customer | Stripe_DeletedCustomer

enum Stripe_DeletedDiscountObjectProperty {
  discount
}

union Stripe_DeletedDiscountPromotionCodeProperty = WrappedString | Stripe_PromotionCode

"""
The individual line items that make up the invoice. `lines` is sorted as follows: invoice items in reverse chronological order, followed by the subscription, if any.
"""
type Stripe_InvoiceLinesProperty {
  """Details about each object."""
  data: [Stripe_LineItem!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_InvoiceLinesObjectProperty!

  """The URL where this list can be accessed."""
  url: String!
}

type Stripe_LineItem {
  """The amount, in %s."""
  amount: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String

  """The amount of discount calculated per discount for this line item."""
  discount_amounts: [Stripe_DiscountsResourceDiscountAmount]

  """
  If true, discounts will apply to this line item. Always false for prorations.
  """
  discountable: Boolean

  """
  The discounts applied to the invoice line item. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount.
  """
  discounts: [Stripe_LineItemDiscountsProperty]

  """Unique identifier for the object."""
  id: String

  """
  The ID of the [invoice item](https://stripe.com/docs/api/invoiceitems) associated with this line item if any.
  """
  invoice_item: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Note that for line items with `type=subscription` this will reflect the metadata of the subscription that caused the line item to be created.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_LineItemObjectProperty
  period: Stripe_InvoiceLineItemPeriod
  price: Stripe_Price

  """Whether this is a proration."""
  proration: Boolean

  """
  The quantity of the subscription, if the line item is a subscription or a proration.
  """
  quantity: Int

  """The subscription that the invoice item pertains to, if any."""
  subscription: String

  """
  The subscription item that generated this invoice item. Left empty if the line item is not an explicit result of a subscription.
  """
  subscription_item: String

  """The amount of tax calculated per tax rate for this line item"""
  tax_amounts: [Stripe_InvoiceTaxAmount]

  """The tax rates which apply to the line item."""
  tax_rates: [Stripe_TaxRate]

  """
  A string identifying the type of the source of this line item, either an `invoiceitem` or a `subscription`.
  """
  type: Stripe_LineItemTypeProperty
}

type Stripe_DiscountsResourceDiscountAmount {
  """The amount, in %s, of the discount."""
  amount: Int
  discount: Stripe_DiscountsResourceDiscountAmountDiscountProperty
}

union Stripe_DiscountsResourceDiscountAmountDiscountProperty = WrappedString | Stripe_Discount | Stripe_DeletedDiscount

union Stripe_LineItemDiscountsProperty = WrappedString | Stripe_Discount

enum Stripe_LineItemObjectProperty {
  line_item
}

type Stripe_InvoiceLineItemPeriod {
  """End of the line item's billing period"""
  end: Int

  """Start of the line item's billing period"""
  start: Int
}

type Stripe_InvoiceTaxAmount {
  """The amount, in %s, of the tax."""
  amount: Int

  """Whether this tax amount is inclusive or exclusive."""
  inclusive: Boolean
  tax_rate: Stripe_InvoiceTaxAmountTaxRateProperty
}

union Stripe_InvoiceTaxAmountTaxRateProperty = WrappedString | Stripe_TaxRate

enum Stripe_LineItemTypeProperty {
  invoiceitem
  subscription
}

enum Stripe_InvoiceLinesObjectProperty {
  list
}

enum Stripe_InvoiceObjectProperty {
  invoice
}

union Stripe_InvoiceOnBehalfOfProperty = WrappedString | Stripe_Account

union Stripe_InvoicePaymentIntentProperty = WrappedString | Stripe_PaymentIntent

type Stripe_InvoicesPaymentSettings {
  payment_method_options: Stripe_InvoicesPaymentMethodOptions

  """
  The list of payment method types (e.g. card) to provide to the invoice’s PaymentIntent. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice’s default payment method, the subscription’s default payment method, the customer’s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice).
  """
  payment_method_types: [Stripe_InvoicesPaymentSettingsPaymentMethodTypesProperty]
}

type Stripe_InvoicesPaymentMethodOptions {
  bancontact: Stripe_InvoicePaymentMethodOptionsBancontact
  card: Stripe_InvoicePaymentMethodOptionsCard
}

type Stripe_InvoicePaymentMethodOptionsBancontact {
  """
  Preferred language of the Bancontact authorization page that the customer is redirected to.
  """
  preferred_language: Stripe_InvoicePaymentMethodOptionsBancontactPreferredLanguageProperty
}

enum Stripe_InvoicePaymentMethodOptionsBancontactPreferredLanguageProperty {
  de
  en
  fr
  nl
}

type Stripe_InvoicePaymentMethodOptionsCard {
  """
  We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
  """
  request_three_d_secure: Stripe_InvoicePaymentMethodOptionsCardRequestThreeDSecureProperty
}

enum Stripe_InvoicePaymentMethodOptionsCardRequestThreeDSecureProperty {
  any
  automatic
}

enum Stripe_InvoicesPaymentSettingsPaymentMethodTypesProperty {
  ach_credit_transfer
  ach_debit
  au_becs_debit
  bacs_debit
  bancontact
  boleto
  card
  fpx
  giropay
  ideal
  sepa_debit
  sofort
  wechat_pay
}

union Stripe_InvoiceQuoteProperty = WrappedString | Stripe_Quote

type Stripe_Quote {
  """Total before any discounts or taxes are applied."""
  amount_subtotal: Int

  """Total after discounts and taxes are applied."""
  amount_total: Int

  """
  The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. Only applicable if there are no line items with recurring prices on the quote.
  """
  application_fee_amount: Int

  """
  A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. Only applicable if there are line items with recurring prices on the quote.
  """
  application_fee_percent: Float
  automatic_tax: Stripe_QuotesResourceAutomaticTax

  """
  Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or on finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`.
  """
  collection_method: Stripe_QuoteCollectionMethodProperty
  computed: Stripe_QuotesResourceComputed

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  customer: Stripe_QuoteCustomerProperty

  """The tax rates applied to this quote."""
  default_tax_rates: [Stripe_QuoteDefaultTaxRatesProperty]

  """A description that will be displayed on the quote PDF."""
  description: String

  """The discounts applied to this quote."""
  discounts: [Stripe_QuoteDiscountsProperty]

  """
  The date on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch.
  """
  expires_at: Int

  """A footer that will be displayed on the quote PDF."""
  footer: String
  from_quote: Stripe_QuotesResourceFromQuote

  """A header that will be displayed on the quote PDF."""
  header: String

  """Unique identifier for the object."""
  id: String
  invoice: Stripe_QuoteInvoiceProperty
  invoice_settings: Stripe_InvoiceSettingQuoteSetting

  """A list of items the customer is being quoted for."""
  line_items: Stripe_QuoteLineItemsProperty

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  A unique number that identifies this particular quote. This number is assigned once the quote is [finalized](https://stripe.com/docs/quotes/overview#finalize).
  """
  number: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_QuoteObjectProperty
  on_behalf_of: Stripe_QuoteOnBehalfOfProperty

  """The status of the quote."""
  status: Stripe_QuoteStatusProperty
  status_transitions: Stripe_QuotesResourceStatusTransitions
  subscription: Stripe_QuoteSubscriptionProperty
  subscription_data: Stripe_QuotesResourceSubscriptionData
  subscription_schedule: Stripe_QuoteSubscriptionScheduleProperty
  total_details: Stripe_QuotesResourceTotalDetails
  transfer_data: Stripe_QuotesResourceTransferData
}

type Stripe_QuotesResourceAutomaticTax {
  """Automatically calculate taxes"""
  enabled: Boolean

  """
  The status of the most recent automated tax calculation for this quote.
  """
  status: Stripe_QuotesResourceAutomaticTaxStatusProperty
}

enum Stripe_QuotesResourceAutomaticTaxStatusProperty {
  complete
  failed
  requires_location_inputs
}

enum Stripe_QuoteCollectionMethodProperty {
  charge_automatically
  send_invoice
}

type Stripe_QuotesResourceComputed {
  recurring: Stripe_QuotesResourceRecurring
  upfront: Stripe_QuotesResourceUpfront
}

type Stripe_QuotesResourceRecurring {
  """Total before any discounts or taxes are applied."""
  amount_subtotal: Int

  """Total after discounts and taxes are applied."""
  amount_total: Int

  """
  The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
  """
  interval: Stripe_QuotesResourceRecurringIntervalProperty

  """
  The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.
  """
  interval_count: Int
  total_details: Stripe_QuotesResourceTotalDetails
}

enum Stripe_QuotesResourceRecurringIntervalProperty {
  day
  month
  week
  year
}

type Stripe_QuotesResourceTotalDetails {
  """This is the sum of all the line item discounts."""
  amount_discount: Int

  """This is the sum of all the line item shipping amounts."""
  amount_shipping: Int

  """This is the sum of all the line item tax amounts."""
  amount_tax: Int
  breakdown: Stripe_QuotesResourceTotalDetailsResourceBreakdown
}

type Stripe_QuotesResourceTotalDetailsResourceBreakdown {
  """The aggregated line item discounts."""
  discounts: [Stripe_LineItemsDiscountAmount]

  """The aggregated line item tax amounts by rate."""
  taxes: [Stripe_LineItemsTaxAmount]
}

type Stripe_LineItemsDiscountAmount {
  """The amount discounted."""
  amount: Int
  discount: Stripe_Discount
}

type Stripe_LineItemsTaxAmount {
  """Amount of tax applied for this rate."""
  amount: Int
  rate: Stripe_TaxRate
}

type Stripe_QuotesResourceUpfront {
  """Total before any discounts or taxes are applied."""
  amount_subtotal: Int

  """Total after discounts and taxes are applied."""
  amount_total: Int

  """
  The line items that will appear on the next invoice after this quote is accepted. This does not include pending invoice items that exist on the customer but may still be included in the next invoice.
  """
  line_items: Stripe_QuotesResourceUpfrontLineItemsProperty
  total_details: Stripe_QuotesResourceTotalDetails
}

"""
The line items that will appear on the next invoice after this quote is accepted. This does not include pending invoice items that exist on the customer but may still be included in the next invoice.
"""
type Stripe_QuotesResourceUpfrontLineItemsProperty {
  """Details about each object."""
  data: [Stripe_Item!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_QuotesResourceUpfrontLineItemsObjectProperty!

  """The URL where this list can be accessed."""
  url: String!
}

type Stripe_Item {
  """Total before any discounts or taxes are applied."""
  amount_subtotal: Int

  """Total after discounts and taxes."""
  amount_total: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  An arbitrary string attached to the object. Often useful for displaying to users. Defaults to product name.
  """
  description: String

  """The discounts applied to the line item."""
  discounts: [Stripe_LineItemsDiscountAmount]

  """Unique identifier for the object."""
  id: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_ItemObjectProperty
  price: Stripe_Price

  """The quantity of products being purchased."""
  quantity: Int

  """The taxes applied to the line item."""
  taxes: [Stripe_LineItemsTaxAmount]
}

enum Stripe_ItemObjectProperty {
  item
}

enum Stripe_QuotesResourceUpfrontLineItemsObjectProperty {
  list
}

union Stripe_QuoteCustomerProperty = WrappedString | Stripe_Customer | Stripe_DeletedCustomer

union Stripe_QuoteDefaultTaxRatesProperty = WrappedString | Stripe_TaxRate

union Stripe_QuoteDiscountsProperty = WrappedString | Stripe_Discount

type Stripe_QuotesResourceFromQuote {
  """Whether this quote is a revision of a different quote."""
  is_revision: Boolean
  quote: Stripe_QuotesResourceFromQuoteQuoteProperty
}

union Stripe_QuotesResourceFromQuoteQuoteProperty = WrappedString | Stripe_Quote

union Stripe_QuoteInvoiceProperty = WrappedString | Stripe_Invoice | Stripe_DeletedInvoice

type Stripe_DeletedInvoice {
  """Unique identifier for the object."""
  id: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_DeletedInvoiceObjectProperty
}

enum Stripe_DeletedInvoiceObjectProperty {
  invoice
}

type Stripe_InvoiceSettingQuoteSetting {
  """
  Number of days within which a customer must pay invoices generated by this quote. This value will be `null` for quotes where `collection_method=charge_automatically`.
  """
  days_until_due: Int
}

"""A list of items the customer is being quoted for."""
type Stripe_QuoteLineItemsProperty {
  """Details about each object."""
  data: [Stripe_Item!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_QuoteLineItemsObjectProperty!

  """The URL where this list can be accessed."""
  url: String!
}

enum Stripe_QuoteLineItemsObjectProperty {
  list
}

enum Stripe_QuoteObjectProperty {
  quote
}

union Stripe_QuoteOnBehalfOfProperty = WrappedString | Stripe_Account

enum Stripe_QuoteStatusProperty {
  accepted
  canceled
  draft
  open
}

type Stripe_QuotesResourceStatusTransitions {
  """
  The time that the quote was accepted. Measured in seconds since Unix epoch.
  """
  accepted_at: Int

  """
  The time that the quote was canceled. Measured in seconds since Unix epoch.
  """
  canceled_at: Int

  """
  The time that the quote was finalized. Measured in seconds since Unix epoch.
  """
  finalized_at: Int
}

union Stripe_QuoteSubscriptionProperty = WrappedString | Stripe_Subscription

type Stripe_Subscription {
  """
  A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account.
  """
  application_fee_percent: Float
  automatic_tax: Stripe_SubscriptionAutomaticTax

  """
  Determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices.
  """
  billing_cycle_anchor: Int
  billing_thresholds: Stripe_SubscriptionBillingThresholds

  """
  A date in the future at which the subscription will automatically get canceled
  """
  cancel_at: Int

  """
  If the subscription has been canceled with the `at_period_end` flag set to `true`, `cancel_at_period_end` on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period.
  """
  cancel_at_period_end: Boolean

  """
  If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will reflect the time of the most recent update request, not the end of the subscription period when the subscription is automatically moved to a canceled state.
  """
  canceled_at: Int

  """
  Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
  """
  collection_method: Stripe_SubscriptionCollectionMethodProperty

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.
  """
  current_period_end: Int

  """
  Start of the current period that the subscription has been invoiced for.
  """
  current_period_start: Int
  customer: Stripe_SubscriptionCustomerProperty

  """
  Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `collection_method=charge_automatically`.
  """
  days_until_due: Int
  default_payment_method: Stripe_SubscriptionDefaultPaymentMethodProperty
  default_source: Stripe_SubscriptionDefaultSourceProperty

  """
  The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription.
  """
  default_tax_rates: [Stripe_TaxRate]
  discount: Stripe_Discount

  """If the subscription has ended, the date the subscription ended."""
  ended_at: Int

  """Unique identifier for the object."""
  id: String

  """List of subscription items, each with an attached price."""
  items: Stripe_SubscriptionItemsProperty
  latest_invoice: Stripe_SubscriptionLatestInvoiceProperty

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at `pending_invoice_item_interval`.
  """
  next_pending_invoice_item_invoice: Int

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_SubscriptionObjectProperty
  pause_collection: Stripe_SubscriptionsResourcePauseCollection
  payment_settings: Stripe_SubscriptionsResourcePaymentSettings
  pending_invoice_item_interval: Stripe_SubscriptionPendingInvoiceItemInterval
  pending_setup_intent: Stripe_SubscriptionPendingSetupIntentProperty
  pending_update: Stripe_SubscriptionsResourcePendingUpdate
  schedule: Stripe_SubscriptionScheduleProperty

  """
  Date when the subscription was first created. The date might differ from the `created` date due to backdating.
  """
  start_date: Int

  """
  Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, or `unpaid`. 
  
  For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this state can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` state. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal state, the open invoice will be voided and no further invoices will be generated. 
  
  A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over. 
  
  If subscription `collection_method=charge_automatically` it becomes `past_due` when payment to renew it fails and `canceled` or `unpaid` (depending on your subscriptions settings) when Stripe has exhausted all payment retry attempts. 
  
  If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
  """
  status: Stripe_SubscriptionStatusProperty
  transfer_data: Stripe_SubscriptionTransferData

  """If the subscription has a trial, the end of that trial."""
  trial_end: Int

  """If the subscription has a trial, the beginning of that trial."""
  trial_start: Int
}

type Stripe_SubscriptionAutomaticTax {
  """Whether Stripe automatically computes tax on this subscription."""
  enabled: Boolean
}

type Stripe_SubscriptionBillingThresholds {
  """Monetary threshold that triggers the subscription to create an invoice"""
  amount_gte: Int

  """
  Indicates if the `billing_cycle_anchor` should be reset when a threshold is reached. If true, `billing_cycle_anchor` will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged. This value may not be `true` if the subscription contains items with plans that have `aggregate_usage=last_ever`.
  """
  reset_billing_cycle_anchor: Boolean
}

enum Stripe_SubscriptionCollectionMethodProperty {
  charge_automatically
  send_invoice
}

union Stripe_SubscriptionCustomerProperty = WrappedString | Stripe_Customer | Stripe_DeletedCustomer

union Stripe_SubscriptionDefaultPaymentMethodProperty = WrappedString | Stripe_PaymentMethod

union Stripe_SubscriptionDefaultSourceProperty = WrappedString | Stripe_AlipayAccount | Stripe_BankAccount | Stripe_BitcoinReceiver | Stripe_Card | Stripe_Source

"""List of subscription items, each with an attached price."""
type Stripe_SubscriptionItemsProperty {
  """Details about each object."""
  data: [Stripe_SubscriptionItem!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_SubscriptionItemsObjectProperty!

  """The URL where this list can be accessed."""
  url: String!
}

type Stripe_SubscriptionItem {
  billing_thresholds: Stripe_SubscriptionItemBillingThresholds

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """Unique identifier for the object."""
  id: String

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_SubscriptionItemObjectProperty
  price: Stripe_Price

  """
  The [quantity](https://stripe.com/docs/subscriptions/quantities) of the plan to which the customer should be subscribed.
  """
  quantity: Int

  """The `subscription` this `subscription_item` belongs to."""
  subscription: String

  """
  The tax rates which apply to this `subscription_item`. When set, the `default_tax_rates` on the subscription do not apply to this `subscription_item`.
  """
  tax_rates: [Stripe_TaxRate]
}

type Stripe_SubscriptionItemBillingThresholds {
  """Usage threshold that triggers the subscription to create an invoice"""
  usage_gte: Int
}

enum Stripe_SubscriptionItemObjectProperty {
  subscription_item
}

enum Stripe_SubscriptionItemsObjectProperty {
  list
}

union Stripe_SubscriptionLatestInvoiceProperty = WrappedString | Stripe_Invoice

enum Stripe_SubscriptionObjectProperty {
  subscription
}

type Stripe_SubscriptionsResourcePauseCollection {
  """
  The payment collection behavior for this subscription while paused. One of `keep_as_draft`, `mark_uncollectible`, or `void`.
  """
  behavior: Stripe_SubscriptionsResourcePauseCollectionBehaviorProperty

  """The time after which the subscription will resume collecting payments."""
  resumes_at: Int
}

enum Stripe_SubscriptionsResourcePauseCollectionBehaviorProperty {
  keep_as_draft
  mark_uncollectible
  void
}

type Stripe_SubscriptionsResourcePaymentSettings {
  payment_method_options: Stripe_SubscriptionsResourcePaymentMethodOptions

  """
  The list of payment method types to provide to every invoice created by the subscription. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice’s default payment method, the subscription’s default payment method, the customer’s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice).
  """
  payment_method_types: [Stripe_SubscriptionsResourcePaymentSettingsPaymentMethodTypesProperty]
}

type Stripe_SubscriptionsResourcePaymentMethodOptions {
  bancontact: Stripe_InvoicePaymentMethodOptionsBancontact
  card: Stripe_InvoicePaymentMethodOptionsCard
}

enum Stripe_SubscriptionsResourcePaymentSettingsPaymentMethodTypesProperty {
  ach_credit_transfer
  ach_debit
  au_becs_debit
  bacs_debit
  bancontact
  boleto
  card
  fpx
  giropay
  ideal
  sepa_debit
  sofort
  wechat_pay
}

type Stripe_SubscriptionPendingInvoiceItemInterval {
  """
  Specifies invoicing frequency. Either `day`, `week`, `month` or `year`.
  """
  interval: Stripe_SubscriptionPendingInvoiceItemIntervalIntervalProperty

  """
  The number of intervals between invoices. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks).
  """
  interval_count: Int
}

enum Stripe_SubscriptionPendingInvoiceItemIntervalIntervalProperty {
  day
  month
  week
  year
}

union Stripe_SubscriptionPendingSetupIntentProperty = WrappedString | Stripe_SetupIntent

type Stripe_SetupIntent {
  application: Stripe_SetupIntentApplicationProperty

  """
  Reason for cancellation of this SetupIntent, one of `abandoned`, `requested_by_customer`, or `duplicate`.
  """
  cancellation_reason: Stripe_SetupIntentCancellationReasonProperty

  """
  The client secret of this SetupIntent. Used for client-side retrieval using a publishable key.
  
  The client secret can be used to complete payment setup from your frontend. It should not be stored, logged, embedded in URLs, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
  """
  client_secret: String

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int
  customer: Stripe_SetupIntentCustomerProperty

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String

  """Unique identifier for the object."""
  id: String
  last_setup_error: Stripe_ApiErrors
  latest_attempt: Stripe_SetupIntentLatestAttemptProperty

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean
  mandate: Stripe_SetupIntentMandateProperty

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject
  next_action: Stripe_SetupIntentNextAction

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_SetupIntentObjectProperty
  on_behalf_of: Stripe_SetupIntentOnBehalfOfProperty
  payment_method: Stripe_SetupIntentPaymentMethodProperty
  payment_method_options: Stripe_SetupIntentPaymentMethodOptions

  """
  The list of payment method types (e.g. card) that this SetupIntent is allowed to set up.
  """
  payment_method_types: [String]
  single_use_mandate: Stripe_SetupIntentSingleUseMandateProperty

  """
  [Status](https://stripe.com/docs/payments/intents#intent-statuses) of this SetupIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `canceled`, or `succeeded`.
  """
  status: Stripe_SetupIntentStatusProperty

  """
  Indicates how the payment method is intended to be used in the future.
  
  Use `on_session` if you intend to only reuse the payment method when the customer is in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow. If not provided, this value defaults to `off_session`.
  """
  usage: String
}

union Stripe_SetupIntentApplicationProperty = WrappedString | Stripe_Application

enum Stripe_SetupIntentCancellationReasonProperty {
  abandoned
  duplicate
  requested_by_customer
}

union Stripe_SetupIntentCustomerProperty = WrappedString | Stripe_Customer | Stripe_DeletedCustomer

union Stripe_SetupIntentLatestAttemptProperty = WrappedString | Stripe_SetupAttempt

union Stripe_SetupIntentMandateProperty = WrappedString | Stripe_Mandate

type Stripe_SetupIntentNextAction {
  redirect_to_url: Stripe_SetupIntentNextActionRedirectToUrl

  """
  Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, or `oxxo_display_details`.
  """
  type: String

  """
  When confirming a SetupIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js.
  """
  use_stripe_sdk: JSONObject
  verify_with_microdeposits: Stripe_SetupIntentNextActionVerifyWithMicrodeposits
}

type Stripe_SetupIntentNextActionRedirectToUrl {
  """
  If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.
  """
  return_url: String

  """The URL you must redirect your customer to in order to authenticate."""
  url: String
}

type Stripe_SetupIntentNextActionVerifyWithMicrodeposits {
  """The timestamp when the microdeposits are expected to land."""
  arrival_date: Int

  """
  The URL for the hosted verification page, which allows customers to verify their bank account.
  """
  hosted_verification_url: String
}

enum Stripe_SetupIntentObjectProperty {
  setup_intent
}

union Stripe_SetupIntentOnBehalfOfProperty = WrappedString | Stripe_Account

union Stripe_SetupIntentPaymentMethodProperty = WrappedString | Stripe_PaymentMethod

type Stripe_SetupIntentPaymentMethodOptions {
  acss_debit: Stripe_SetupIntentPaymentMethodOptionsAcssDebit
  card: Stripe_SetupIntentPaymentMethodOptionsCard
  sepa_debit: Stripe_SetupIntentPaymentMethodOptionsSepaDebit
}

type Stripe_SetupIntentPaymentMethodOptionsAcssDebit {
  """Currency supported by the bank account"""
  currency: Stripe_SetupIntentPaymentMethodOptionsAcssDebitCurrencyProperty
  mandate_options: Stripe_SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit

  """Bank account verification method."""
  verification_method: Stripe_SetupIntentPaymentMethodOptionsAcssDebitVerificationMethodProperty
}

enum Stripe_SetupIntentPaymentMethodOptionsAcssDebitCurrencyProperty {
  cad
  usd
}

type Stripe_SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit {
  """A URL for custom mandate text"""
  custom_mandate_url: String

  """
  Description of the interval. Only required if 'payment_schedule' parmeter is 'interval' or 'combined'.
  """
  interval_description: String

  """Payment schedule for the mandate."""
  payment_schedule: Stripe_SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitPaymentScheduleProperty

  """Transaction type of the mandate."""
  transaction_type: Stripe_SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitTransactionTypeProperty
}

enum Stripe_SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitPaymentScheduleProperty {
  combined
  interval
  sporadic
}

enum Stripe_SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitTransactionTypeProperty {
  business
  personal
}

enum Stripe_SetupIntentPaymentMethodOptionsAcssDebitVerificationMethodProperty {
  automatic
  instant
  microdeposits
}

type Stripe_SetupIntentPaymentMethodOptionsCard {
  """
  We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: `automatic` or `any`. If not provided, defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
  """
  request_three_d_secure: Stripe_SetupIntentPaymentMethodOptionsCardRequestThreeDSecureProperty
}

enum Stripe_SetupIntentPaymentMethodOptionsCardRequestThreeDSecureProperty {
  any
  automatic
  challenge_only
}

type Stripe_SetupIntentPaymentMethodOptionsSepaDebit {
  mandate_options: Stripe_SetupIntentPaymentMethodOptionsMandateOptionsSepaDebit
}

type Stripe_SetupIntentPaymentMethodOptionsMandateOptionsSepaDebit {
  result: JSONObject
}

union Stripe_SetupIntentSingleUseMandateProperty = WrappedString | Stripe_Mandate

enum Stripe_SetupIntentStatusProperty {
  canceled
  processing
  requires_action
  requires_confirmation
  requires_payment_method
  succeeded
}

type Stripe_SubscriptionsResourcePendingUpdate {
  """
  If the update is applied, determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices.
  """
  billing_cycle_anchor: Int

  """
  The point after which the changes reflected by this update will be discarded and no longer applied.
  """
  expires_at: Int

  """
  List of subscription items, each with an attached plan, that will be set if the update is applied.
  """
  subscription_items: [Stripe_SubscriptionItem]

  """
  Unix timestamp representing the end of the trial period the customer will get before being charged for the first time, if the update is applied.
  """
  trial_end: Int

  """
  Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed.
  """
  trial_from_plan: Boolean
}

union Stripe_SubscriptionScheduleProperty = WrappedString | Stripe_SubscriptionSchedule

type Stripe_SubscriptionSchedule {
  """
  Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch.
  """
  canceled_at: Int

  """
  Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch.
  """
  completed_at: Int

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int
  current_phase: Stripe_SubscriptionScheduleCurrentPhase
  customer: Stripe_SubscriptionScheduleCustomerProperty
  default_settings: Stripe_SubscriptionSchedulesResourceDefaultSettings

  """
  Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` and `cancel`.
  """
  end_behavior: Stripe_SubscriptionScheduleEndBehaviorProperty

  """Unique identifier for the object."""
  id: String

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_SubscriptionScheduleObjectProperty

  """Configuration for the subscription schedule's phases."""
  phases: [Stripe_SubscriptionSchedulePhaseConfiguration]

  """
  Time at which the subscription schedule was released. Measured in seconds since the Unix epoch.
  """
  released_at: Int

  """
  ID of the subscription once managed by the subscription schedule (if it is released).
  """
  released_subscription: String

  """
  The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. You can read more about the different states in our [behavior guide](https://stripe.com/docs/billing/subscriptions/subscription-schedules).
  """
  status: Stripe_SubscriptionScheduleStatusProperty
  subscription: Stripe_SubscriptionScheduleSubscriptionProperty
}

type Stripe_SubscriptionScheduleCurrentPhase {
  """The end of this phase of the subscription schedule."""
  end_date: Int

  """The start of this phase of the subscription schedule."""
  start_date: Int
}

union Stripe_SubscriptionScheduleCustomerProperty = WrappedString | Stripe_Customer | Stripe_DeletedCustomer

type Stripe_SubscriptionSchedulesResourceDefaultSettings {
  """
  A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account during this phase of the schedule.
  """
  application_fee_percent: Float
  automatic_tax: Stripe_SubscriptionSchedulesResourceDefaultSettingsAutomaticTax

  """
  Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
  """
  billing_cycle_anchor: Stripe_SubscriptionSchedulesResourceDefaultSettingsBillingCycleAnchorProperty
  billing_thresholds: Stripe_SubscriptionBillingThresholds

  """
  Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
  """
  collection_method: Stripe_SubscriptionSchedulesResourceDefaultSettingsCollectionMethodProperty
  default_payment_method: Stripe_SubscriptionSchedulesResourceDefaultSettingsDefaultPaymentMethodProperty
  invoice_settings: Stripe_InvoiceSettingSubscriptionScheduleSetting
  transfer_data: Stripe_SubscriptionTransferData
}

type Stripe_SubscriptionSchedulesResourceDefaultSettingsAutomaticTax {
  """
  Whether Stripe automatically computes tax on invoices created during this phase.
  """
  enabled: Boolean
}

enum Stripe_SubscriptionSchedulesResourceDefaultSettingsBillingCycleAnchorProperty {
  automatic
  phase_start
}

enum Stripe_SubscriptionSchedulesResourceDefaultSettingsCollectionMethodProperty {
  charge_automatically
  send_invoice
}

union Stripe_SubscriptionSchedulesResourceDefaultSettingsDefaultPaymentMethodProperty = WrappedString | Stripe_PaymentMethod

type Stripe_InvoiceSettingSubscriptionScheduleSetting {
  """
  Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`.
  """
  days_until_due: Int
}

type Stripe_SubscriptionTransferData {
  """
  A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the destination account. By default, the entire amount is transferred to the destination.
  """
  amount_percent: Float
  destination: Stripe_SubscriptionTransferDataDestinationProperty
}

union Stripe_SubscriptionTransferDataDestinationProperty = WrappedString | Stripe_Account

enum Stripe_SubscriptionScheduleEndBehaviorProperty {
  cancel
  none
  release
  renew
}

enum Stripe_SubscriptionScheduleObjectProperty {
  subscription_schedule
}

type Stripe_SubscriptionSchedulePhaseConfiguration {
  """
  A list of prices and quantities that will generate invoice items appended to the first invoice for this phase.
  """
  add_invoice_items: [Stripe_SubscriptionScheduleAddInvoiceItem]

  """
  A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account during this phase of the schedule.
  """
  application_fee_percent: Float
  automatic_tax: Stripe_SchedulesPhaseAutomaticTax

  """
  Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
  """
  billing_cycle_anchor: Stripe_SubscriptionSchedulePhaseConfigurationBillingCycleAnchorProperty
  billing_thresholds: Stripe_SubscriptionBillingThresholds

  """
  Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
  """
  collection_method: Stripe_SubscriptionSchedulePhaseConfigurationCollectionMethodProperty
  coupon: Stripe_SubscriptionSchedulePhaseConfigurationCouponProperty
  default_payment_method: Stripe_SubscriptionSchedulePhaseConfigurationDefaultPaymentMethodProperty

  """
  The default tax rates to apply to the subscription during this phase of the subscription schedule.
  """
  default_tax_rates: [Stripe_TaxRate]

  """The end of this phase of the subscription schedule."""
  end_date: Int
  invoice_settings: Stripe_InvoiceSettingSubscriptionScheduleSetting

  """
  Subscription items to configure the subscription to during this phase of the subscription schedule.
  """
  items: [Stripe_SubscriptionScheduleConfigurationItem]

  """
  If the subscription schedule will prorate when transitioning to this phase. Possible values are `create_prorations` and `none`.
  """
  proration_behavior: Stripe_SubscriptionSchedulePhaseConfigurationProrationBehaviorProperty

  """The start of this phase of the subscription schedule."""
  start_date: Int
  transfer_data: Stripe_SubscriptionTransferData

  """When the trial ends within the phase."""
  trial_end: Int
}

type Stripe_SubscriptionScheduleAddInvoiceItem {
  price: Stripe_SubscriptionScheduleAddInvoiceItemPriceProperty

  """The quantity of the invoice item."""
  quantity: Int

  """
  The tax rates which apply to the item. When set, the `default_tax_rates` do not apply to this item.
  """
  tax_rates: [Stripe_TaxRate]
}

union Stripe_SubscriptionScheduleAddInvoiceItemPriceProperty = WrappedString | Stripe_Price | Stripe_DeletedPrice

type Stripe_DeletedPrice {
  """Unique identifier for the object."""
  id: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_DeletedPriceObjectProperty
}

enum Stripe_DeletedPriceObjectProperty {
  price
}

type Stripe_SchedulesPhaseAutomaticTax {
  """
  Whether Stripe automatically computes tax on invoices created during this phase.
  """
  enabled: Boolean
}

enum Stripe_SubscriptionSchedulePhaseConfigurationBillingCycleAnchorProperty {
  automatic
  phase_start
}

enum Stripe_SubscriptionSchedulePhaseConfigurationCollectionMethodProperty {
  charge_automatically
  send_invoice
}

union Stripe_SubscriptionSchedulePhaseConfigurationCouponProperty = WrappedString | Stripe_Coupon | Stripe_DeletedCoupon

type Stripe_DeletedCoupon {
  """Unique identifier for the object."""
  id: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_DeletedCouponObjectProperty
}

enum Stripe_DeletedCouponObjectProperty {
  coupon
}

union Stripe_SubscriptionSchedulePhaseConfigurationDefaultPaymentMethodProperty = WrappedString | Stripe_PaymentMethod

type Stripe_SubscriptionScheduleConfigurationItem {
  billing_thresholds: Stripe_SubscriptionItemBillingThresholds
  price: Stripe_SubscriptionScheduleConfigurationItemPriceProperty

  """Quantity of the plan to which the customer should be subscribed."""
  quantity: Int

  """
  The tax rates which apply to this `phase_item`. When set, the `default_tax_rates` on the phase do not apply to this `phase_item`.
  """
  tax_rates: [Stripe_TaxRate]
}

union Stripe_SubscriptionScheduleConfigurationItemPriceProperty = WrappedString | Stripe_Price | Stripe_DeletedPrice

enum Stripe_SubscriptionSchedulePhaseConfigurationProrationBehaviorProperty {
  always_invoice
  create_prorations
  none
}

enum Stripe_SubscriptionScheduleStatusProperty {
  active
  canceled
  completed
  not_started
  released
}

union Stripe_SubscriptionScheduleSubscriptionProperty = WrappedString | Stripe_Subscription

enum Stripe_SubscriptionStatusProperty {
  active
  canceled
  incomplete
  incomplete_expired
  past_due
  trialing
  unpaid
}

type Stripe_QuotesResourceSubscriptionData {
  """
  When creating a new subscription, the date of which the subscription schedule will start after the quote is accepted. This date is ignored if it is in the past when the quote is accepted. Measured in seconds since the Unix epoch.
  """
  effective_date: Int

  """
  Integer representing the number of trial period days before the customer is charged for the first time.
  """
  trial_period_days: Int
}

union Stripe_QuoteSubscriptionScheduleProperty = WrappedString | Stripe_SubscriptionSchedule

type Stripe_QuotesResourceTransferData {
  """
  The amount in %s that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination.
  """
  amount: Int

  """
  A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the destination account. By default, the entire amount will be transferred to the destination.
  """
  amount_percent: Float
  destination: Stripe_QuotesResourceTransferDataDestinationProperty
}

union Stripe_QuotesResourceTransferDataDestinationProperty = WrappedString | Stripe_Account

enum Stripe_InvoiceStatusProperty {
  deleted
  draft
  open
  paid
  uncollectible
  void
}

type Stripe_InvoicesStatusTransitions {
  """The time that the invoice draft was finalized."""
  finalized_at: Int

  """The time that the invoice was marked uncollectible."""
  marked_uncollectible_at: Int

  """The time that the invoice was paid."""
  paid_at: Int

  """The time that the invoice was voided."""
  voided_at: Int
}

union Stripe_InvoiceSubscriptionProperty = WrappedString | Stripe_Subscription

type Stripe_InvoiceThresholdReason {
  """
  The total invoice amount threshold boundary if it triggered the threshold invoice.
  """
  amount_gte: Int

  """Indicates which line items triggered a threshold invoice."""
  item_reasons: [Stripe_InvoiceItemThresholdReason]
}

type Stripe_InvoiceItemThresholdReason {
  """The IDs of the line items that triggered the threshold invoice."""
  line_item_ids: [String]

  """The quantity threshold boundary that applied to the given line item."""
  usage_gte: Int
}

type Stripe_InvoiceTransferData {
  """
  The amount in %s that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination.
  """
  amount: Int
  destination: Stripe_InvoiceTransferDataDestinationProperty
}

union Stripe_InvoiceTransferDataDestinationProperty = WrappedString | Stripe_Account

enum Stripe_ChargeObjectProperty {
  charge
}

union Stripe_ChargeOnBehalfOfProperty = WrappedString | Stripe_Account

union Stripe_ChargeOrderProperty = WrappedString | Stripe_Order

type Stripe_Order {
  """
  A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order.
  """
  amount: Int

  """The total amount that was returned to the customer."""
  amount_returned: Int

  """ID of the Connect Application that created the order."""
  application: String

  """
  A fee in cents that will be applied to the order and transferred to the application owner’s Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees documentation.
  """
  application_fee: Int
  charge: Stripe_OrderChargeProperty

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  customer: Stripe_OrderCustomerProperty

  """The email address of the customer placing the order."""
  email: String

  """External coupon code to load for this order."""
  external_coupon_code: String

  """Unique identifier for the object."""
  id: String

  """
  List of items constituting the order. An order can have up to 25 items.
  """
  items: [Stripe_OrderItem]

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_OrderObjectProperty

  """A list of returns that have taken place for this order."""
  returns: Stripe_OrderReturnsProperty

  """
  The shipping method that is currently selected for this order, if any. If present, it is equal to one of the `id`s of shipping methods in the `shipping_methods` array. At order creation time, if there are multiple shipping methods, Stripe will automatically selected the first method.
  """
  selected_shipping_method: String
  shipping: Stripe_Shipping

  """
  A list of supported shipping methods for this order. The desired shipping method can be specified either by updating the order, or when paying it.
  """
  shipping_methods: [Stripe_ShippingMethod]

  """
  Current order status. One of `created`, `paid`, `canceled`, `fulfilled`, or `returned`. More details in the [Orders Guide](https://stripe.com/docs/orders/guide#understanding-order-statuses).
  """
  status: String
  status_transitions: Stripe_StatusTransitions

  """
  Time at which the object was last updated. Measured in seconds since the Unix epoch.
  """
  updated: Int

  """The user's order ID if it is different from the Stripe order ID."""
  upstream_id: String
}

union Stripe_OrderChargeProperty = WrappedString | Stripe_Charge

union Stripe_OrderCustomerProperty = WrappedString | Stripe_Customer | Stripe_DeletedCustomer

type Stripe_OrderItem {
  """
  A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the line item.
  """
  amount: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """
  Description of the line item, meant to be displayable to the user (e.g., `"Express shipping"`).
  """
  description: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_OrderItemObjectProperty
  parent: Stripe_OrderItemParentProperty

  """
  A positive integer representing the number of instances of `parent` that are included in this order item. Applicable/present only if `type` is `sku`.
  """
  quantity: Int

  """The type of line item. One of `sku`, `tax`, `shipping`, or `discount`."""
  type: String
}

enum Stripe_OrderItemObjectProperty {
  order_item
}

union Stripe_OrderItemParentProperty = WrappedString | Stripe_Sku

type Stripe_Sku {
  """Whether the SKU is available for purchase."""
  active: Boolean

  """
  A dictionary of attributes and values for the attributes defined by the product. If, for example, a product's attributes are `["size", "gender"]`, a valid SKU has the following dictionary of attributes: `{"size": "Medium", "gender": "Unisex"}`.
  """
  attributes: JSONObject

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """Unique identifier for the object."""
  id: String

  """
  The URL of an image for this SKU, meant to be displayable to the customer.
  """
  image: String
  inventory: Stripe_SkuInventory

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_SkuObjectProperty
  package_dimensions: Stripe_PackageDimensions

  """
  The cost of the item as a positive integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency).
  """
  price: Int
  product: Stripe_SkuProductProperty

  """
  Time at which the object was last updated. Measured in seconds since the Unix epoch.
  """
  updated: Int
}

type Stripe_SkuInventory {
  """
  The count of inventory available. Will be present if and only if `type` is `finite`.
  """
  quantity: Int

  """
  Inventory type. Possible values are `finite`, `bucket` (not quantified), and `infinite`.
  """
  type: String

  """
  An indicator of the inventory available. Possible values are `in_stock`, `limited`, and `out_of_stock`. Will be present if and only if `type` is `bucket`.
  """
  value: String
}

enum Stripe_SkuObjectProperty {
  sku
}

union Stripe_SkuProductProperty = WrappedString | Stripe_Product

enum Stripe_OrderObjectProperty {
  order
}

"""A list of returns that have taken place for this order."""
type Stripe_OrderReturnsProperty {
  """Details about each object."""
  data: [Stripe_OrderReturn!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_OrderReturnsObjectProperty!

  """The URL where this list can be accessed."""
  url: String!
}

type Stripe_OrderReturn {
  """
  A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the returned line item.
  """
  amount: Int

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String

  """Unique identifier for the object."""
  id: String

  """The items included in this order return."""
  items: [Stripe_OrderItem]

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_OrderReturnObjectProperty
  order: Stripe_OrderReturnOrderProperty
  refund: Stripe_OrderReturnRefundProperty
}

enum Stripe_OrderReturnObjectProperty {
  order_return
}

union Stripe_OrderReturnOrderProperty = WrappedString | Stripe_Order

union Stripe_OrderReturnRefundProperty = WrappedString | Stripe_Refund

enum Stripe_OrderReturnsObjectProperty {
  list
}

type Stripe_ShippingMethod {
  """
  A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the line item.
  """
  amount: Int

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  delivery_estimate: Stripe_DeliveryEstimate

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String

  """Unique identifier for the object."""
  id: String
}

type Stripe_DeliveryEstimate {
  """
  If `type` is `"exact"`, `date` will be the expected delivery date in the format YYYY-MM-DD.
  """
  date: String

  """
  If `type` is `"range"`, `earliest` will be be the earliest delivery date in the format YYYY-MM-DD.
  """
  earliest: String

  """
  If `type` is `"range"`, `latest` will be the latest delivery date in the format YYYY-MM-DD.
  """
  latest: String

  """The type of estimate. Must be either `"range"` or `"exact"`."""
  type: String
}

type Stripe_StatusTransitions {
  """The time that the order was canceled."""
  canceled: Int

  """The time that the order was fulfilled."""
  fulfiled: Int

  """The time that the order was paid."""
  paid: Int

  """The time that the order was returned."""
  returned: Int
}

type Stripe_ChargeOutcome {
  """
  Possible values are `approved_by_network`, `declined_by_network`, `not_sent_to_network`, and `reversed_after_approval`. The value `reversed_after_approval` indicates the payment was [blocked by Stripe](https://stripe.com/docs/declines#blocked-payments) after bank authorization, and may temporarily appear as "pending" on a cardholder's statement.
  """
  network_status: String

  """
  An enumerated value providing a more detailed explanation of the outcome's `type`. Charges blocked by Radar's default block rule have the value `highest_risk_level`. Charges placed in review by Radar's default review rule have the value `elevated_risk_level`. Charges authorized, blocked, or placed in review by custom rules have the value `rule`. See [understanding declines](https://stripe.com/docs/declines) for more details.
  """
  reason: String

  """
  Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are `normal`, `elevated`, `highest`. For non-card payments, and card-based payments predating the public assignment of risk levels, this field will have the value `not_assessed`. In the event of an error in the evaluation, this field will have the value `unknown`. This field is only available with Radar.
  """
  risk_level: String

  """
  Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are between 0 and 100. For non-card payments, card-based payments predating the public assignment of risk scores, or in the event of an error during evaluation, this field will not be present. This field is only available with Radar for Fraud Teams.
  """
  risk_score: Int
  rule: Stripe_ChargeOutcomeRuleProperty

  """
  A human-readable description of the outcome type and reason, designed for you (the recipient of the payment), not your customer.
  """
  seller_message: String

  """
  Possible values are `authorized`, `manual_review`, `issuer_declined`, `blocked`, and `invalid`. See [understanding declines](https://stripe.com/docs/declines) and [Radar reviews](https://stripe.com/docs/radar/reviews) for details.
  """
  type: String
}

union Stripe_ChargeOutcomeRuleProperty = WrappedString | Stripe_Rule

type Stripe_Rule {
  """The action taken on the payment."""
  action: String

  """Unique identifier for the object."""
  id: String

  """The predicate to evaluate the payment against."""
  predicate: String
}

union Stripe_ChargePaymentIntentProperty = WrappedString | Stripe_PaymentIntent

type Stripe_PaymentMethodDetails {
  ach_credit_transfer: Stripe_PaymentMethodDetailsAchCreditTransfer
  ach_debit: Stripe_PaymentMethodDetailsAchDebit
  acss_debit: Stripe_PaymentMethodDetailsAcssDebit
  afterpay_clearpay: Stripe_PaymentMethodDetailsAfterpayClearpay
  alipay: Stripe_PaymentFlowsPrivatePaymentMethodsAlipayDetails
  au_becs_debit: Stripe_PaymentMethodDetailsAuBecsDebit
  bacs_debit: Stripe_PaymentMethodDetailsBacsDebit
  bancontact: Stripe_PaymentMethodDetailsBancontact
  boleto: Stripe_PaymentMethodDetailsBoleto
  card: Stripe_PaymentMethodDetailsCard
  card_present: Stripe_PaymentMethodDetailsCardPresent
  eps: Stripe_PaymentMethodDetailsEps
  fpx: Stripe_PaymentMethodDetailsFpx
  giropay: Stripe_PaymentMethodDetailsGiropay
  grabpay: Stripe_PaymentMethodDetailsGrabpay
  ideal: Stripe_PaymentMethodDetailsIdeal
  interac_present: Stripe_PaymentMethodDetailsInteracPresent
  klarna: Stripe_PaymentMethodDetailsKlarna
  multibanco: Stripe_PaymentMethodDetailsMultibanco
  oxxo: Stripe_PaymentMethodDetailsOxxo
  p24: Stripe_PaymentMethodDetailsP24
  sepa_debit: Stripe_PaymentMethodDetailsSepaDebit
  sofort: Stripe_PaymentMethodDetailsSofort
  stripe_account: Stripe_PaymentMethodDetailsStripeAccount

  """
  The type of transaction-specific details of the payment method used in the payment, one of `ach_credit_transfer`, `ach_debit`, `acss_debit`, `alipay`, `au_becs_debit`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `klarna`, `multibanco`, `p24`, `sepa_debit`, `sofort`, `stripe_account`, or `wechat`.
  An additional hash is included on `payment_method_details` with a name matching this value.
  It contains information specific to the payment method.
  """
  type: String
  wechat: Stripe_PaymentMethodDetailsWechat
  wechat_pay: Stripe_PaymentMethodDetailsWechatPay
}

type Stripe_PaymentMethodDetailsAchCreditTransfer {
  """Account number to transfer funds to."""
  account_number: String

  """Name of the bank associated with the routing number."""
  bank_name: String

  """Routing transit number for the bank account to transfer funds to."""
  routing_number: String

  """SWIFT code of the bank associated with the routing number."""
  swift_code: String
}

type Stripe_PaymentMethodDetailsAchDebit {
  """
  Type of entity that holds the account. This can be either `individual` or `company`.
  """
  account_holder_type: Stripe_PaymentMethodDetailsAchDebitAccountHolderTypeProperty

  """Name of the bank associated with the bank account."""
  bank_name: String

  """
  Two-letter ISO code representing the country the bank account is located in.
  """
  country: String

  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String

  """Last four digits of the bank account number."""
  last4: String

  """Routing transit number of the bank account."""
  routing_number: String
}

enum Stripe_PaymentMethodDetailsAchDebitAccountHolderTypeProperty {
  company
  individual
}

type Stripe_PaymentMethodDetailsAcssDebit {
  """Name of the bank associated with the bank account."""
  bank_name: String

  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String

  """Institution number of the bank account"""
  institution_number: String

  """Last four digits of the bank account number."""
  last4: String

  """ID of the mandate used to make this payment."""
  mandate: String

  """Transit number of the bank account."""
  transit_number: String
}

type Stripe_PaymentMethodDetailsAfterpayClearpay {
  """Order identifier shown to the merchant in Afterpay’s online portal."""
  reference: String
}

type Stripe_PaymentFlowsPrivatePaymentMethodsAlipayDetails {
  """
  Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same.
  """
  fingerprint: String

  """Transaction ID of this particular Alipay transaction."""
  transaction_id: String
}

type Stripe_PaymentMethodDetailsAuBecsDebit {
  """Bank-State-Branch number of the bank account."""
  bsb_number: String

  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String

  """Last four digits of the bank account number."""
  last4: String

  """ID of the mandate used to make this payment."""
  mandate: String
}

type Stripe_PaymentMethodDetailsBacsDebit {
  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String

  """Last four digits of the bank account number."""
  last4: String

  """ID of the mandate used to make this payment."""
  mandate: String

  """Sort code of the bank account. (e.g., `10-20-30`)"""
  sort_code: String
}

type Stripe_PaymentMethodDetailsBancontact {
  """Bank code of bank associated with the bank account."""
  bank_code: String

  """Name of the bank associated with the bank account."""
  bank_name: String

  """Bank Identifier Code of the bank associated with the bank account."""
  bic: String
  generated_sepa_debit: Stripe_PaymentMethodDetailsBancontactGeneratedSepaDebitProperty
  generated_sepa_debit_mandate: Stripe_PaymentMethodDetailsBancontactGeneratedSepaDebitMandateProperty

  """Last four characters of the IBAN."""
  iban_last4: String

  """
  Preferred language of the Bancontact authorization page that the customer is redirected to.
  Can be one of `en`, `de`, `fr`, or `nl`
  """
  preferred_language: Stripe_PaymentMethodDetailsBancontactPreferredLanguageProperty

  """
  Owner's verified full name. Values are verified or provided by Bancontact directly
  (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verified_name: String
}

union Stripe_PaymentMethodDetailsBancontactGeneratedSepaDebitProperty = WrappedString | Stripe_PaymentMethod

union Stripe_PaymentMethodDetailsBancontactGeneratedSepaDebitMandateProperty = WrappedString | Stripe_Mandate

enum Stripe_PaymentMethodDetailsBancontactPreferredLanguageProperty {
  de
  en
  fr
  nl
}

type Stripe_PaymentMethodDetailsBoleto {
  """Uniquely identifies this customer tax_id (CNPJ or CPF)"""
  tax_id: String
}

type Stripe_PaymentMethodDetailsCard {
  """
  Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
  """
  brand: String
  checks: Stripe_PaymentMethodDetailsCardChecks

  """
  Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
  """
  country: String

  """Two-digit number representing the card's expiration month."""
  exp_month: Int

  """Four-digit number representing the card's expiration year."""
  exp_year: Int

  """
  Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
  
  *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
  """
  fingerprint: String

  """Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."""
  funding: String
  installments: Stripe_PaymentMethodDetailsCardInstallments

  """The last four digits of the card."""
  last4: String

  """
  Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
  """
  network: String
  three_d_secure: Stripe_ThreeDSecureDetails
  wallet: Stripe_PaymentMethodDetailsCardWallet
}

type Stripe_PaymentMethodDetailsCardChecks {
  """
  If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  address_line1_check: String

  """
  If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  address_postal_code_check: String

  """
  If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
  """
  cvc_check: String
}

type Stripe_PaymentMethodDetailsCardInstallments {
  plan: Stripe_PaymentMethodDetailsCardInstallmentsPlan
}

type Stripe_PaymentMethodDetailsCardInstallmentsPlan {
  """
  For `fixed_count` installment plans, this is the number of installment payments your customer will make to their credit card.
  """
  count: Int

  """
  For `fixed_count` installment plans, this is the interval between installment payments your customer will make to their credit card.
  One of `month`.
  """
  interval: Stripe_PaymentMethodDetailsCardInstallmentsPlanIntervalProperty

  """Type of installment plan, one of `fixed_count`."""
  type: Stripe_PaymentMethodDetailsCardInstallmentsPlanTypeProperty
}

enum Stripe_PaymentMethodDetailsCardInstallmentsPlanIntervalProperty {
  month
}

enum Stripe_PaymentMethodDetailsCardInstallmentsPlanTypeProperty {
  fixed_count
}

type Stripe_PaymentMethodDetailsCardWallet {
  amex_express_checkout: Stripe_PaymentMethodDetailsCardWalletAmexExpressCheckout
  apple_pay: Stripe_PaymentMethodDetailsCardWalletApplePay

  """
  (For tokenized numbers only.) The last four digits of the device account number.
  """
  dynamic_last4: String
  google_pay: Stripe_PaymentMethodDetailsCardWalletGooglePay
  masterpass: Stripe_PaymentMethodDetailsCardWalletMasterpass
  samsung_pay: Stripe_PaymentMethodDetailsCardWalletSamsungPay

  """
  The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, or `visa_checkout`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.
  """
  type: Stripe_PaymentMethodDetailsCardWalletTypeProperty
  visa_checkout: Stripe_PaymentMethodDetailsCardWalletVisaCheckout
}

type Stripe_PaymentMethodDetailsCardWalletAmexExpressCheckout {
  result: JSONObject
}

type Stripe_PaymentMethodDetailsCardWalletApplePay {
  result: JSONObject
}

type Stripe_PaymentMethodDetailsCardWalletGooglePay {
  result: JSONObject
}

type Stripe_PaymentMethodDetailsCardWalletMasterpass {
  billing_address: Stripe_Address

  """
  Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  email: String

  """
  Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  name: String
  shipping_address: Stripe_Address
}

type Stripe_PaymentMethodDetailsCardWalletSamsungPay {
  result: JSONObject
}

enum Stripe_PaymentMethodDetailsCardWalletTypeProperty {
  amex_express_checkout
  apple_pay
  google_pay
  masterpass
  samsung_pay
  visa_checkout
}

type Stripe_PaymentMethodDetailsCardWalletVisaCheckout {
  billing_address: Stripe_Address

  """
  Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  email: String

  """
  Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  name: String
  shipping_address: Stripe_Address
}

type Stripe_PaymentMethodDetailsEps {
  """
  The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`.
  """
  bank: Stripe_PaymentMethodDetailsEpsBankProperty

  """
  Owner's verified full name. Values are verified or provided by EPS directly
  (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  EPS rarely provides this information so the attribute is usually empty.
  """
  verified_name: String
}

enum Stripe_PaymentMethodDetailsEpsBankProperty {
  arzte_und_apotheker_bank
  austrian_anadi_bank_ag
  bank_austria
  bankhaus_carl_spangler
  bankhaus_schelhammer_und_schattera_ag
  bawag_psk_ag
  bks_bank_ag
  brull_kallmus_bank_ag
  btv_vier_lander_bank
  capital_bank_grawe_gruppe_ag
  dolomitenbank
  easybank_ag
  erste_bank_und_sparkassen
  hypo_alpeadriabank_international_ag
  hypo_bank_burgenland_aktiengesellschaft
  hypo_noe_lb_fur_niederosterreich_u_wien
  hypo_oberosterreich_salzburg_steiermark
  hypo_tirol_bank_ag
  hypo_vorarlberg_bank_ag
  marchfelder_bank
  oberbank_ag
  raiffeisen_bankengruppe_osterreich
  schoellerbank_ag
  sparda_bank_wien
  volksbank_gruppe
  volkskreditbank_ag
  vr_bank_braunau
}

type Stripe_PaymentMethodDetailsFpx {
  """
  The customer's bank. Can be one of `affin_bank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, or `pb_enterprise`.
  """
  bank: Stripe_PaymentMethodDetailsFpxBankProperty

  """
  Unique transaction id generated by FPX for every request from the merchant
  """
  transaction_id: String
}

enum Stripe_PaymentMethodDetailsFpxBankProperty {
  affin_bank
  alliance_bank
  ambank
  bank_islam
  bank_muamalat
  bank_rakyat
  bsn
  cimb
  deutsche_bank
  hong_leong_bank
  hsbc
  kfh
  maybank2e
  maybank2u
  ocbc
  pb_enterprise
  public_bank
  rhb
  standard_chartered
  uob
}

type Stripe_PaymentMethodDetailsGiropay {
  """Bank code of bank associated with the bank account."""
  bank_code: String

  """Name of the bank associated with the bank account."""
  bank_name: String

  """Bank Identifier Code of the bank associated with the bank account."""
  bic: String

  """
  Owner's verified full name. Values are verified or provided by Giropay directly
  (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  Giropay rarely provides this information so the attribute is usually empty.
  """
  verified_name: String
}

type Stripe_PaymentMethodDetailsGrabpay {
  """Unique transaction id generated by GrabPay"""
  transaction_id: String
}

type Stripe_PaymentMethodDetailsIdeal {
  """
  The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`.
  """
  bank: Stripe_PaymentMethodDetailsIdealBankProperty

  """The Bank Identifier Code of the customer's bank."""
  bic: Stripe_PaymentMethodDetailsIdealBicProperty
  generated_sepa_debit: Stripe_PaymentMethodDetailsIdealGeneratedSepaDebitProperty
  generated_sepa_debit_mandate: Stripe_PaymentMethodDetailsIdealGeneratedSepaDebitMandateProperty

  """Last four characters of the IBAN."""
  iban_last4: String

  """
  Owner's verified full name. Values are verified or provided by iDEAL directly
  (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verified_name: String
}

enum Stripe_PaymentMethodDetailsIdealBankProperty {
  abn_amro
  asn_bank
  bunq
  handelsbanken
  ing
  knab
  moneyou
  rabobank
  regiobank
  revolut
  sns_bank
  triodos_bank
  van_lanschot
}

enum Stripe_PaymentMethodDetailsIdealBicProperty {
  ABNANL2A
  ASNBNL21
  BUNQNL2A
  FVLBNL22
  HANDNL2A
  INGBNL2A
  KNABNL2H
  MOYONL21
  RABONL2U
  RBRBNL21
  REVOLT21
  SNSBNL2A
  TRIONL2U
}

union Stripe_PaymentMethodDetailsIdealGeneratedSepaDebitProperty = WrappedString | Stripe_PaymentMethod

union Stripe_PaymentMethodDetailsIdealGeneratedSepaDebitMandateProperty = WrappedString | Stripe_Mandate

type Stripe_PaymentMethodDetailsInteracPresent {
  """Card brand. Can be `interac`, `mastercard` or `visa`."""
  brand: String

  """
  The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`).
  """
  cardholder_name: String

  """
  Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
  """
  country: String

  """Authorization response cryptogram."""
  emv_auth_data: String

  """Two-digit number representing the card's expiration month."""
  exp_month: Int

  """Four-digit number representing the card's expiration year."""
  exp_year: Int

  """
  Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
  
  *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
  """
  fingerprint: String

  """Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."""
  funding: String

  """
  ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod.
  """
  generated_card: String

  """The last four digits of the card."""
  last4: String

  """
  Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
  """
  network: String

  """
  EMV tag 5F2D. Preferred languages specified by the integrated circuit chip.
  """
  preferred_locales: [String]

  """How card details were read in this transaction."""
  read_method: Stripe_PaymentMethodDetailsInteracPresentReadMethodProperty
  receipt: Stripe_PaymentMethodDetailsInteracPresentReceipt
}

enum Stripe_PaymentMethodDetailsInteracPresentReadMethodProperty {
  contact_emv
  contactless_emv
  contactless_magstripe_mode
  magnetic_stripe_fallback
  magnetic_stripe_track2
}

type Stripe_PaymentMethodDetailsInteracPresentReceipt {
  """The type of account being debited or credited"""
  account_type: Stripe_PaymentMethodDetailsInteracPresentReceiptAccountTypeProperty

  """EMV tag 9F26, cryptogram generated by the integrated circuit chip."""
  application_cryptogram: String

  """Mnenomic of the Application Identifier."""
  application_preferred_name: String

  """Identifier for this transaction."""
  authorization_code: String

  """EMV tag 8A. A code returned by the card issuer."""
  authorization_response_code: String

  """How the cardholder verified ownership of the card."""
  cardholder_verification_method: String

  """
  EMV tag 84. Similar to the application identifier stored on the integrated circuit chip.
  """
  dedicated_file_name: String

  """The outcome of a series of EMV functions performed by the card reader."""
  terminal_verification_results: String

  """
  An indication of various EMV functions performed during the transaction.
  """
  transaction_status_information: String
}

enum Stripe_PaymentMethodDetailsInteracPresentReceiptAccountTypeProperty {
  checking
  savings
  unknown
}

type Stripe_PaymentMethodDetailsKlarna {
  result: JSONObject
}

type Stripe_PaymentMethodDetailsMultibanco {
  """Entity number associated with this Multibanco payment."""
  entity: String

  """Reference number associated with this Multibanco payment."""
  reference: String
}

type Stripe_PaymentMethodDetailsOxxo {
  """OXXO reference number"""
  number: String
}

type Stripe_PaymentMethodDetailsP24 {
  """
  The customer's bank. Can be one of `ing`, `citi_handlowy`, `tmobile_usbugi_bankowe`, `plus_bank`, `etransfer_pocztowy24`, `banki_spbdzielcze`, `bank_nowy_bfg_sa`, `getin_bank`, `blik`, `noble_pay`, `ideabank`, `envelobank`, `santander_przelew24`, `nest_przelew`, `mbank_mtransfer`, `inteligo`, `pbac_z_ipko`, `bnp_paribas`, `credit_agricole`, `toyota_bank`, `bank_pekao_sa`, `volkswagen_bank`, `bank_millennium`, `alior_bank`, or `boz`.
  """
  bank: Stripe_PaymentMethodDetailsP24BankProperty

  """Unique reference for this Przelewy24 payment."""
  reference: String

  """
  Owner's verified full name. Values are verified or provided by Przelewy24 directly
  (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  Przelewy24 rarely provides this information so the attribute is usually empty.
  """
  verified_name: String
}

enum Stripe_PaymentMethodDetailsP24BankProperty {
  alior_bank
  bank_millennium
  bank_nowy_bfg_sa
  bank_pekao_sa
  banki_spbdzielcze
  blik
  bnp_paribas
  boz
  citi_handlowy
  credit_agricole
  envelobank
  etransfer_pocztowy24
  getin_bank
  ideabank
  ing
  inteligo
  mbank_mtransfer
  nest_przelew
  noble_pay
  pbac_z_ipko
  plus_bank
  santander_przelew24
  tmobile_usbugi_bankowe
  toyota_bank
  volkswagen_bank
}

type Stripe_PaymentMethodDetailsSepaDebit {
  """Bank code of bank associated with the bank account."""
  bank_code: String

  """Branch code of bank associated with the bank account."""
  branch_code: String

  """
  Two-letter ISO code representing the country the bank account is located in.
  """
  country: String

  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String

  """Last four characters of the IBAN."""
  last4: String

  """ID of the mandate used to make this payment."""
  mandate: String
}

type Stripe_PaymentMethodDetailsSofort {
  """Bank code of bank associated with the bank account."""
  bank_code: String

  """Name of the bank associated with the bank account."""
  bank_name: String

  """Bank Identifier Code of the bank associated with the bank account."""
  bic: String

  """
  Two-letter ISO code representing the country the bank account is located in.
  """
  country: String
  generated_sepa_debit: Stripe_PaymentMethodDetailsSofortGeneratedSepaDebitProperty
  generated_sepa_debit_mandate: Stripe_PaymentMethodDetailsSofortGeneratedSepaDebitMandateProperty

  """Last four characters of the IBAN."""
  iban_last4: String

  """
  Preferred language of the SOFORT authorization page that the customer is redirected to.
  Can be one of `de`, `en`, `es`, `fr`, `it`, `nl`, or `pl`
  """
  preferred_language: Stripe_PaymentMethodDetailsSofortPreferredLanguageProperty

  """
  Owner's verified full name. Values are verified or provided by SOFORT directly
  (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verified_name: String
}

union Stripe_PaymentMethodDetailsSofortGeneratedSepaDebitProperty = WrappedString | Stripe_PaymentMethod

union Stripe_PaymentMethodDetailsSofortGeneratedSepaDebitMandateProperty = WrappedString | Stripe_Mandate

enum Stripe_PaymentMethodDetailsSofortPreferredLanguageProperty {
  de
  en
  es
  fr
  it
  nl
  pl
}

type Stripe_PaymentMethodDetailsStripeAccount {
  result: JSONObject
}

type Stripe_PaymentMethodDetailsWechat {
  result: JSONObject
}

type Stripe_PaymentMethodDetailsWechatPay {
  """
  Uniquely identifies this particular WeChat Pay account. You can use this attribute to check whether two WeChat accounts are the same.
  """
  fingerprint: String

  """Transaction ID of this particular WeChat Pay transaction."""
  transaction_id: String
}

"""A list of refunds that have been applied to the charge."""
type Stripe_ChargeRefundsProperty {
  """Details about each object."""
  data: [Stripe_Refund!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_ChargeRefundsObjectProperty!

  """The URL where this list can be accessed."""
  url: String!
}

enum Stripe_ChargeRefundsObjectProperty {
  list
}

union Stripe_ChargeReviewProperty = WrappedString | Stripe_Review

type Stripe_Review {
  """The ZIP or postal code of the card used, if applicable."""
  billing_zip: String
  charge: Stripe_ReviewChargeProperty

  """
  The reason the review was closed, or null if it has not yet been closed. One of `approved`, `refunded`, `refunded_as_fraud`, or `disputed`.
  """
  closed_reason: Stripe_ReviewClosedReasonProperty

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int

  """Unique identifier for the object."""
  id: String

  """The IP address where the payment originated."""
  ip_address: String
  ip_address_location: Stripe_RadarReviewResourceLocation

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_ReviewObjectProperty

  """If `true`, the review needs action."""
  open: Boolean

  """The reason the review was opened. One of `rule` or `manual`."""
  opened_reason: Stripe_ReviewOpenedReasonProperty
  payment_intent: Stripe_ReviewPaymentIntentProperty

  """
  The reason the review is currently open or closed. One of `rule`, `manual`, `approved`, `refunded`, `refunded_as_fraud`, or `disputed`.
  """
  reason: String
  session: Stripe_RadarReviewResourceSession
}

union Stripe_ReviewChargeProperty = WrappedString | Stripe_Charge

enum Stripe_ReviewClosedReasonProperty {
  approved
  disputed
  refunded
  refunded_as_fraud
}

type Stripe_RadarReviewResourceLocation {
  """The city where the payment originated."""
  city: String

  """
  Two-letter ISO code representing the country where the payment originated.
  """
  country: String

  """The geographic latitude where the payment originated."""
  latitude: Float

  """The geographic longitude where the payment originated."""
  longitude: Float

  """The state/county/province/region where the payment originated."""
  region: String
}

enum Stripe_ReviewObjectProperty {
  review
}

enum Stripe_ReviewOpenedReasonProperty {
  manual
  rule
}

union Stripe_ReviewPaymentIntentProperty = WrappedString | Stripe_PaymentIntent

type Stripe_RadarReviewResourceSession {
  """The browser used in this browser session (e.g., `Chrome`)."""
  browser: String

  """
  Information about the device used for the browser session (e.g., `Samsung SM-G930T`).
  """
  device: String

  """The platform for the browser session (e.g., `Macintosh`)."""
  platform: String

  """The version for the browser session (e.g., `61.0.3163.100`)."""
  version: String
}

union Stripe_ChargeSourceTransferProperty = WrappedString | Stripe_Transfer

union Stripe_ChargeTransferProperty = WrappedString | Stripe_Transfer

type Stripe_ChargeTransferData {
  """
  The amount transferred to the destination account, if specified. By default, the entire charge amount is transferred to the destination account.
  """
  amount: Int
  destination: Stripe_ChargeTransferDataDestinationProperty
}

union Stripe_ChargeTransferDataDestinationProperty = WrappedString | Stripe_Account

enum Stripe_PaymentIntentChargesObjectProperty {
  list
}

enum Stripe_PaymentIntentConfirmationMethodProperty {
  automatic
  manual
}

union Stripe_PaymentIntentCustomerProperty = WrappedString | Stripe_Customer | Stripe_DeletedCustomer

union Stripe_PaymentIntentInvoiceProperty = WrappedString | Stripe_Invoice

type Stripe_PaymentIntentNextAction {
  alipay_handle_redirect: Stripe_PaymentIntentNextActionAlipayHandleRedirect
  boleto_display_details: Stripe_PaymentIntentNextActionBoleto
  oxxo_display_details: Stripe_PaymentIntentNextActionDisplayOxxoDetails
  redirect_to_url: Stripe_PaymentIntentNextActionRedirectToUrl

  """
  Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, or `oxxo_display_details`.
  """
  type: String

  """
  When confirming a PaymentIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js.
  """
  use_stripe_sdk: JSONObject
  verify_with_microdeposits: Stripe_PaymentIntentNextActionVerifyWithMicrodeposits
  wechat_pay_display_qr_code: Stripe_PaymentIntentNextActionWechatPayDisplayQrCode
  wechat_pay_redirect_to_android_app: Stripe_PaymentIntentNextActionWechatPayRedirectToAndroidApp
  wechat_pay_redirect_to_ios_app: Stripe_PaymentIntentNextActionWechatPayRedirectToIosApp
}

type Stripe_PaymentIntentNextActionAlipayHandleRedirect {
  """
  The native data to be used with Alipay SDK you must redirect your customer to in order to authenticate the payment in an Android App.
  """
  native_data: String

  """
  The native URL you must redirect your customer to in order to authenticate the payment in an iOS App.
  """
  native_url: String

  """
  If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.
  """
  return_url: String

  """
  The URL you must redirect your customer to in order to authenticate the payment.
  """
  url: String
}

type Stripe_PaymentIntentNextActionBoleto {
  """The timestamp after which the boleto expires."""
  expires_at: Int

  """
  The URL to the hosted boleto voucher page, which allows customers to view the boleto voucher.
  """
  hosted_voucher_url: String

  """The boleto number."""
  number: String

  """The URL to the downloadable boleto voucher PDF."""
  pdf: String
}

type Stripe_PaymentIntentNextActionDisplayOxxoDetails {
  """The timestamp after which the OXXO voucher expires."""
  expires_after: Int

  """
  The URL for the hosted OXXO voucher page, which allows customers to view and print an OXXO voucher.
  """
  hosted_voucher_url: String

  """OXXO reference number."""
  number: String
}

type Stripe_PaymentIntentNextActionRedirectToUrl {
  """
  If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.
  """
  return_url: String

  """
  The URL you must redirect your customer to in order to authenticate the payment.
  """
  url: String
}

type Stripe_PaymentIntentNextActionVerifyWithMicrodeposits {
  """The timestamp when the microdeposits are expected to land."""
  arrival_date: Int

  """
  The URL for the hosted verification page, which allows customers to verify their bank account.
  """
  hosted_verification_url: String
}

type Stripe_PaymentIntentNextActionWechatPayDisplayQrCode {
  """The data being used to generate QR code"""
  data: String

  """The base64 image data for a pre-generated QR code"""
  image_data_url: String
}

type Stripe_PaymentIntentNextActionWechatPayRedirectToAndroidApp {
  """app_id is the APP ID registered on WeChat open platform"""
  app_id: String

  """nonce_str is a random string"""
  nonce_str: String

  """package is static value"""
  package: String

  """an unique merchant ID assigned by Wechat Pay"""
  partner_id: String

  """an unique trading ID assigned by Wechat Pay"""
  prepay_id: String

  """A signature"""
  sign: String

  """Specifies the current time in epoch format"""
  timestamp: String
}

type Stripe_PaymentIntentNextActionWechatPayRedirectToIosApp {
  """An universal link that redirect to Wechat Pay APP"""
  native_url: String
}

enum Stripe_PaymentIntentObjectProperty {
  payment_intent
}

union Stripe_PaymentIntentOnBehalfOfProperty = WrappedString | Stripe_Account

union Stripe_PaymentIntentPaymentMethodProperty = WrappedString | Stripe_PaymentMethod

type Stripe_PaymentIntentPaymentMethodOptions {
  acss_debit: Stripe_PaymentIntentPaymentMethodOptionsAcssDebit
  afterpay_clearpay: Stripe_PaymentMethodOptionsAfterpayClearpay
  alipay: Stripe_PaymentMethodOptionsAlipay
  bancontact: Stripe_PaymentMethodOptionsBancontact
  boleto: Stripe_PaymentMethodOptionsBoleto
  card: Stripe_PaymentIntentPaymentMethodOptionsCard
  card_present: Stripe_PaymentMethodOptionsCardPresent
  ideal: Stripe_PaymentMethodOptionsIdeal
  oxxo: Stripe_PaymentMethodOptionsOxxo
  p24: Stripe_PaymentMethodOptionsP24
  sepa_debit: Stripe_PaymentIntentPaymentMethodOptionsSepaDebit
  sofort: Stripe_PaymentMethodOptionsSofort
  wechat_pay: Stripe_PaymentMethodOptionsWechatPay
}

type Stripe_PaymentIntentPaymentMethodOptionsAcssDebit {
  mandate_options: Stripe_PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit

  """Bank account verification method."""
  verification_method: Stripe_PaymentIntentPaymentMethodOptionsAcssDebitVerificationMethodProperty
}

type Stripe_PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit {
  """A URL for custom mandate text"""
  custom_mandate_url: String

  """
  Description of the interval. Only required if 'payment_schedule' parmeter is 'interval' or 'combined'.
  """
  interval_description: String

  """Payment schedule for the mandate."""
  payment_schedule: Stripe_PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitPaymentScheduleProperty

  """Transaction type of the mandate."""
  transaction_type: Stripe_PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitTransactionTypeProperty
}

enum Stripe_PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitPaymentScheduleProperty {
  combined
  interval
  sporadic
}

enum Stripe_PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitTransactionTypeProperty {
  business
  personal
}

enum Stripe_PaymentIntentPaymentMethodOptionsAcssDebitVerificationMethodProperty {
  automatic
  instant
  microdeposits
}

type Stripe_PaymentMethodOptionsAfterpayClearpay {
  """
  Order identifier shown to the merchant in Afterpay’s online portal. We recommend using a value that helps you answer any questions a customer might have about
  the payment. The identifier is limited to 128 characters and may contain only letters, digits, underscores, backslashes and dashes.
  """
  reference: String
}

type Stripe_PaymentMethodOptionsAlipay {
  result: JSONObject
}

type Stripe_PaymentMethodOptionsBancontact {
  """
  Preferred language of the Bancontact authorization page that the customer is redirected to.
  """
  preferred_language: Stripe_PaymentMethodOptionsBancontactPreferredLanguageProperty
}

enum Stripe_PaymentMethodOptionsBancontactPreferredLanguageProperty {
  de
  en
  fr
  nl
}

type Stripe_PaymentMethodOptionsBoleto {
  """
  The number of calendar days before a Boleto voucher expires. For example, if you create a Boleto voucher on Monday and you set expires_after_days to 2, the Boleto voucher will expire on Wednesday at 23:59 America/Sao_Paulo time.
  """
  expires_after_days: Int
}

type Stripe_PaymentIntentPaymentMethodOptionsCard {
  installments: Stripe_PaymentMethodOptionsCardInstallments

  """
  Selected network to process this payment intent on. Depends on the available networks of the card attached to the payment intent. Can be only set confirm-time.
  """
  network: Stripe_PaymentIntentPaymentMethodOptionsCardNetworkProperty

  """
  We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: `automatic` or `any`. If not provided, defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
  """
  request_three_d_secure: Stripe_PaymentIntentPaymentMethodOptionsCardRequestThreeDSecureProperty
}

type Stripe_PaymentMethodOptionsCardInstallments {
  """Installment plans that may be selected for this PaymentIntent."""
  available_plans: [Stripe_PaymentMethodDetailsCardInstallmentsPlan]

  """Whether Installments are enabled for this PaymentIntent."""
  enabled: Boolean
  plan: Stripe_PaymentMethodDetailsCardInstallmentsPlan
}

enum Stripe_PaymentIntentPaymentMethodOptionsCardNetworkProperty {
  amex
  cartes_bancaires
  diners
  discover
  interac
  jcb
  mastercard
  unionpay
  unknown
  visa
}

enum Stripe_PaymentIntentPaymentMethodOptionsCardRequestThreeDSecureProperty {
  any
  automatic
  challenge_only
}

type Stripe_PaymentMethodOptionsCardPresent {
  result: JSONObject
}

type Stripe_PaymentMethodOptionsIdeal {
  result: JSONObject
}

type Stripe_PaymentMethodOptionsOxxo {
  """
  The number of calendar days before an OXXO invoice expires. For example, if you create an OXXO invoice on Monday and you set expires_after_days to 2, the OXXO invoice will expire on Wednesday at 23:59 America/Mexico_City time.
  """
  expires_after_days: Int
}

type Stripe_PaymentMethodOptionsP24 {
  result: JSONObject
}

type Stripe_PaymentIntentPaymentMethodOptionsSepaDebit {
  mandate_options: Stripe_PaymentIntentPaymentMethodOptionsMandateOptionsSepaDebit
}

type Stripe_PaymentIntentPaymentMethodOptionsMandateOptionsSepaDebit {
  result: JSONObject
}

type Stripe_PaymentMethodOptionsSofort {
  """
  Preferred language of the SOFORT authorization page that the customer is redirected to.
  """
  preferred_language: Stripe_PaymentMethodOptionsSofortPreferredLanguageProperty
}

enum Stripe_PaymentMethodOptionsSofortPreferredLanguageProperty {
  de
  en
  es
  fr
  it
  nl
  pl
}

type Stripe_PaymentMethodOptionsWechatPay {
  """
  The app ID registered with WeChat Pay. Only required when client is ios or android.
  """
  app_id: String

  """The client type that the end customer will pay from"""
  client: Stripe_PaymentMethodOptionsWechatPayClientProperty
}

enum Stripe_PaymentMethodOptionsWechatPayClientProperty {
  android
  ios
  web
}

union Stripe_PaymentIntentReviewProperty = WrappedString | Stripe_Review

enum Stripe_PaymentIntentSetupFutureUsageProperty {
  off_session
  on_session
}

enum Stripe_PaymentIntentStatusProperty {
  canceled
  processing
  requires_action
  requires_capture
  requires_confirmation
  requires_payment_method
  succeeded
}

type Stripe_TransferData {
  """
  Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
  """
  amount: Int
  destination: Stripe_TransferDataDestinationProperty
}

union Stripe_TransferDataDestinationProperty = WrappedString | Stripe_Account

union Stripe_ApiErrorsSourceProperty = Stripe_BankAccount | Stripe_Card | Stripe_Source

enum Stripe_ApiErrorsTypeProperty {
  api_error
  card_error
  idempotency_error
  invalid_request_error
}

union Stripe_SetupAttemptSetupIntentProperty = WrappedString | Stripe_SetupIntent

type Stripe_Networks {
  """All available networks for the card."""
  available: [String]

  """The preferred network for the card."""
  preferred: String
}

type Stripe_ThreeDSecureUsage {
  """Whether 3D Secure is supported on this card."""
  supported: Boolean
}

type Stripe_PaymentMethodCardWallet {
  amex_express_checkout: Stripe_PaymentMethodCardWalletAmexExpressCheckout
  apple_pay: Stripe_PaymentMethodCardWalletApplePay

  """
  (For tokenized numbers only.) The last four digits of the device account number.
  """
  dynamic_last4: String
  google_pay: Stripe_PaymentMethodCardWalletGooglePay
  masterpass: Stripe_PaymentMethodCardWalletMasterpass
  samsung_pay: Stripe_PaymentMethodCardWalletSamsungPay

  """
  The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, or `visa_checkout`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.
  """
  type: Stripe_PaymentMethodCardWalletTypeProperty
  visa_checkout: Stripe_PaymentMethodCardWalletVisaCheckout
}

type Stripe_PaymentMethodCardWalletAmexExpressCheckout {
  result: JSONObject
}

type Stripe_PaymentMethodCardWalletApplePay {
  result: JSONObject
}

type Stripe_PaymentMethodCardWalletGooglePay {
  result: JSONObject
}

type Stripe_PaymentMethodCardWalletMasterpass {
  billing_address: Stripe_Address

  """
  Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  email: String

  """
  Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  name: String
  shipping_address: Stripe_Address
}

type Stripe_PaymentMethodCardWalletSamsungPay {
  result: JSONObject
}

enum Stripe_PaymentMethodCardWalletTypeProperty {
  amex_express_checkout
  apple_pay
  google_pay
  masterpass
  samsung_pay
  visa_checkout
}

type Stripe_PaymentMethodCardWalletVisaCheckout {
  billing_address: Stripe_Address

  """
  Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  email: String

  """
  Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  name: String
  shipping_address: Stripe_Address
}

type Stripe_PaymentMethodCardPresent {
  result: JSONObject
}

union Stripe_PaymentMethodCustomerProperty = WrappedString | Stripe_Customer

type Stripe_PaymentMethodEps {
  """
  The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`.
  """
  bank: Stripe_PaymentMethodEpsBankProperty
}

enum Stripe_PaymentMethodEpsBankProperty {
  arzte_und_apotheker_bank
  austrian_anadi_bank_ag
  bank_austria
  bankhaus_carl_spangler
  bankhaus_schelhammer_und_schattera_ag
  bawag_psk_ag
  bks_bank_ag
  brull_kallmus_bank_ag
  btv_vier_lander_bank
  capital_bank_grawe_gruppe_ag
  dolomitenbank
  easybank_ag
  erste_bank_und_sparkassen
  hypo_alpeadriabank_international_ag
  hypo_bank_burgenland_aktiengesellschaft
  hypo_noe_lb_fur_niederosterreich_u_wien
  hypo_oberosterreich_salzburg_steiermark
  hypo_tirol_bank_ag
  hypo_vorarlberg_bank_ag
  marchfelder_bank
  oberbank_ag
  raiffeisen_bankengruppe_osterreich
  schoellerbank_ag
  sparda_bank_wien
  volksbank_gruppe
  volkskreditbank_ag
  vr_bank_braunau
}

type Stripe_PaymentMethodFpx {
  """
  The customer's bank, if provided. Can be one of `affin_bank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, or `pb_enterprise`.
  """
  bank: Stripe_PaymentMethodFpxBankProperty
}

enum Stripe_PaymentMethodFpxBankProperty {
  affin_bank
  alliance_bank
  ambank
  bank_islam
  bank_muamalat
  bank_rakyat
  bsn
  cimb
  deutsche_bank
  hong_leong_bank
  hsbc
  kfh
  maybank2e
  maybank2u
  ocbc
  pb_enterprise
  public_bank
  rhb
  standard_chartered
  uob
}

type Stripe_PaymentMethodGiropay {
  result: JSONObject
}

type Stripe_PaymentMethodGrabpay {
  result: JSONObject
}

type Stripe_PaymentMethodIdeal {
  """
  The customer's bank, if provided. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`.
  """
  bank: Stripe_PaymentMethodIdealBankProperty

  """
  The Bank Identifier Code of the customer's bank, if the bank was provided.
  """
  bic: Stripe_PaymentMethodIdealBicProperty
}

enum Stripe_PaymentMethodIdealBankProperty {
  abn_amro
  asn_bank
  bunq
  handelsbanken
  ing
  knab
  moneyou
  rabobank
  regiobank
  revolut
  sns_bank
  triodos_bank
  van_lanschot
}

enum Stripe_PaymentMethodIdealBicProperty {
  ABNANL2A
  ASNBNL21
  BUNQNL2A
  FVLBNL22
  HANDNL2A
  INGBNL2A
  KNABNL2H
  MOYONL21
  RABONL2U
  RBRBNL21
  REVOLT21
  SNSBNL2A
  TRIONL2U
}

type Stripe_PaymentMethodInteracPresent {
  result: JSONObject
}

enum Stripe_PaymentMethodObjectProperty {
  payment_method
}

type Stripe_PaymentMethodOxxo {
  result: JSONObject
}

type Stripe_PaymentMethodP24 {
  """The customer's bank, if provided."""
  bank: Stripe_PaymentMethodP24BankProperty
}

enum Stripe_PaymentMethodP24BankProperty {
  alior_bank
  bank_millennium
  bank_nowy_bfg_sa
  bank_pekao_sa
  banki_spbdzielcze
  blik
  bnp_paribas
  boz
  citi_handlowy
  credit_agricole
  envelobank
  etransfer_pocztowy24
  getin_bank
  ideabank
  ing
  inteligo
  mbank_mtransfer
  nest_przelew
  noble_pay
  pbac_z_ipko
  plus_bank
  santander_przelew24
  tmobile_usbugi_bankowe
  toyota_bank
  volkswagen_bank
}

type Stripe_PaymentMethodSepaDebit {
  """Bank code of bank associated with the bank account."""
  bank_code: String

  """Branch code of bank associated with the bank account."""
  branch_code: String

  """
  Two-letter ISO code representing the country the bank account is located in.
  """
  country: String

  """
  Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  """
  fingerprint: String
  generated_from: Stripe_SepaDebitGeneratedFrom

  """Last four characters of the IBAN."""
  last4: String
}

type Stripe_SepaDebitGeneratedFrom {
  charge: Stripe_SepaDebitGeneratedFromChargeProperty
  setup_attempt: Stripe_SepaDebitGeneratedFromSetupAttemptProperty
}

union Stripe_SepaDebitGeneratedFromChargeProperty = WrappedString | Stripe_Charge

union Stripe_SepaDebitGeneratedFromSetupAttemptProperty = WrappedString | Stripe_SetupAttempt

type Stripe_PaymentMethodSofort {
  """
  Two-letter ISO code representing the country the bank account is located in.
  """
  country: String
}

enum Stripe_PaymentMethodTypeProperty {
  acss_debit
  afterpay_clearpay
  alipay
  au_becs_debit
  bacs_debit
  bancontact
  boleto
  card
  card_present
  eps
  fpx
  giropay
  grabpay
  ideal
  interac_present
  oxxo
  p24
  sepa_debit
  sofort
  wechat_pay
}

type Stripe_PaymentMethodWechatPay {
  result: JSONObject
}

enum Stripe_CustomerObjectProperty {
  customer
}

"""The customer's payment sources, if any."""
type Stripe_CustomerSourcesProperty {
  """Details about each object."""
  data: [Stripe_CustomerSourcesDataProperty!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_CustomerSourcesObjectProperty!

  """The URL where this list can be accessed."""
  url: String!
}

union Stripe_CustomerSourcesDataProperty = Stripe_AlipayAccount | Stripe_BankAccount | Stripe_BitcoinReceiver | Stripe_Card | Stripe_Source

enum Stripe_CustomerSourcesObjectProperty {
  list
}

"""The customer's current subscriptions, if any."""
type Stripe_CustomerSubscriptionsProperty {
  """Details about each object."""
  data: [Stripe_Subscription!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_CustomerSubscriptionsObjectProperty!

  """The URL where this list can be accessed."""
  url: String!
}

enum Stripe_CustomerSubscriptionsObjectProperty {
  list
}

type Stripe_CustomerTax {
  """
  Surfaces if automatic tax computation is possible given the current customer location information.
  """
  automatic_tax: Stripe_CustomerTaxAutomaticTaxProperty

  """
  A recent IP address of the customer used for tax reporting and tax location inference.
  """
  ip_address: String
  location: Stripe_CustomerTaxLocation
}

enum Stripe_CustomerTaxAutomaticTaxProperty {
  failed
  not_collecting
  supported
  unrecognized_location
}

type Stripe_CustomerTaxLocation {
  """The customer's country as identified by Stripe Tax."""
  country: String

  """The data source used to infer the customer's location."""
  source: Stripe_CustomerTaxLocationSourceProperty

  """
  The customer's state, county, province, or region as identified by Stripe Tax.
  """
  state: String
}

enum Stripe_CustomerTaxLocationSourceProperty {
  billing_address
  ip_address
  payment_method
  shipping_destination
}

enum Stripe_CustomerTaxExemptProperty {
  exempt
  none
  reverse
}

"""The customer's tax IDs."""
type Stripe_CustomerTaxIdsProperty {
  """Details about each object."""
  data: [Stripe_TaxId!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_CustomerTaxIdsObjectProperty!

  """The URL where this list can be accessed."""
  url: String!
}

enum Stripe_CustomerTaxIdsObjectProperty {
  list
}

type Stripe_ListProductsResponse {
  data: [Stripe_Product]

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_ListProductsResponseObjectProperty

  """The URL where this list can be accessed."""
  url: String
}

enum Stripe_ListProductsResponseObjectProperty {
  list
}

type ProfilePaginatedList {
  items: [Profile!]!
  total: Int!
}

input TSWhereProfileInput {
  id: TSWhereStringInput
  name: TSWhereStringInput
  email: TSWhereStringInput
  bio: TSWhereStringInput
  avatar: TSWhereAssetRelationshipInput
  stripeCustomerId: TSWhereStringInput
  _shapeId: TSWhereIDInput
  _id: TSWhereIDInput
  _version: TSWhereIntegerInput
  _shapeName: TSWhereStringInput
  _createdAt: TSWhereDateInput
  _updatedAt: TSWhereDateInput
  _schemaVersion: TSWhereNumberInput
  _status: TSWhereWorkflowInput
  _contentTypeId: TSWhereIDInput
  _contentTypeName: TSWhereStringInput
  AND: [TSWhereProfileInput]
  OR: [TSWhereProfileInput]
  NOT: TSWhereProfileInput
}

type Klaviyo_GetListsResponse {
  items: [Klaviyo_GetListsResponseItemsProperty]
}

type Klaviyo_GetListsResponseItemsProperty {
  list_id: String
  list_name: String
}

"""Asset search results"""
type AssetSearchResults {
  results: [Asset!]!
  total: Int!
}

"""TsStaticSite search results"""
type TsStaticSiteSearchResults {
  results: [TsStaticSite!]!
  total: Int!
}

"""Profile search results"""
type ProfileSearchResults {
  results: [Profile!]!
  total: Int!
}

"""TSSearchable search results"""
type TSSearchableSearchResults {
  results: [TSSearchable!]!
  total: Int!
}

"""This query allow you to pass context to your queries"""
type WithContext {
  taxonomySuggest(
    shapeNames: [String]
    shapeIds: [String]
    contentTypeNames: [String]
    contentTypeIds: [String]
    terms: String
    locale: String
    enableLocaleFallback: Boolean = true

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): TSSuggestionPaginatedList

  """List Versions for a piece of content"""
  getContentVersion(id: ID!, version: Int!, locale: String, enableLocaleFallback: Boolean = true): TSVersionResponse

  """List Versions for a piece of content"""
  getContentVersionList(id: ID!, from: Int, size: Int): TSVersionsPaginatedList

  """Get a Asset by ID"""
  getAsset(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Asset

  """Returns a list Asset in natural order."""
  getAssetList(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereAssetInput
  ): AssetPaginatedList

  """Get a TsStaticSite by ID"""
  getTsStaticSite(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): TsStaticSite

  """Returns a list TsStaticSite in natural order."""
  getTsStaticSiteList(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereTsStaticSiteInput
  ): TsStaticSitePaginatedList

  """Get product reviews for an SKU"""
  getProductReviews(sku: String): Reviews_ProductReviewsQueryResponse

  """Fetch Stripe products from the API Index."""
  getIndexedProductList(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereStripeProductInput
  ): Stripe_ProductPaginatedList

  """Get my profile"""
  getMyProfile: Profile

  """Get my subscriptions"""
  getMySubscriptions(expand: [String]): [Stripe_Subscription]

  """Get my invoices"""
  getMyInvoices(expand: [String], status: String, limit: Float, created: JSON, startingAfter: String): [Stripe_Invoice]

  """Get my payments"""
  getMyPayments(expand: [String], limit: Float, created: JSON, startingAfter: String, endingBefore: String): [Stripe_PaymentIntent]

  """Get Stripe products."""
  getStripeProducts: Stripe_ListProductsResponse

  """Get a profile by ID"""
  getProfile(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Profile

  """Returns a list of profiles in natural order."""
  getProfileList(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereProfileInput
  ): ProfilePaginatedList

  """
  <p>Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.</p>
  """
  Stripe_listProducts(active: Boolean, created: JSON, ending_before: String, expand: [String], ids: [String], limit: Int, shippable: Boolean, starting_after: String, url: String): Stripe_ListProductsResponse

  """
  <p>Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.</p>
  """
  Stripe_getProduct(expand: [String], id: String!): Stripe_Product
  Klaviyo_getLists: Klaviyo_GetListsResponse
  searchAssetIndex(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereAssetInput
  ): AssetSearchResults
  searchTsStaticSiteIndex(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereTsStaticSiteInput
  ): TsStaticSiteSearchResults
  searchProfileIndex(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereProfileInput
  ): ProfileSearchResults
  search(
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSONObject

    """An list of fields to sort by."""
    sort: [TSSearchSortInput]
    locale: String
    enableLocaleFallback: Boolean = true
    shapeNames: [String]
    shapeIds: [String]
    contentTypeNames: [String]
    contentTypeIds: [String]

    """
    The where clause uses the boolean AND, OR, and NOT parameters to construct complex filters based on the values of your fields. It applies an implicit AND to all the top-level keys. To avoid this, use a single OR or NOT key as the only top-level key.
    """
    where: TSWhereInput
  ): TSSearchableSearchResults
}

type Mutation {
  """Initiate upload process for asset(s)"""
  uploadAssets(projectId: ID, files: [TSFile]!): [Upload]

  """Replace an asset file"""
  replaceAsset(projectId: ID, _id: ID!, _version: Int!, file: TSFile!): Upload

  """Update Asset"""
  updateAsset(input: UpdateAssetInput!, clientMutationId: String, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateAssetResult

  """Create Asset"""
  createAsset(input: CreateAssetInput!, clientMutationId: String): CreateAssetResult

  """Duplicate Asset"""
  duplicateAsset(input: DuplicateAssetInput!, clientMutationId: String, locale: String, enableLocaleFallback: Boolean = true): DuplicateAssetResult

  """Delete Asset"""
  deleteAsset(input: DeleteAssetInput!, clientMutationId: String): DeleteAssetResult

  """Update TsStaticSite"""
  updateTsStaticSite(input: UpdateTsStaticSiteInput!, clientMutationId: String, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateTsStaticSiteResult

  """Create TsStaticSite"""
  createTsStaticSite(input: CreateTsStaticSiteInput!, clientMutationId: String): CreateTsStaticSiteResult

  """Duplicate TsStaticSite"""
  duplicateTsStaticSite(input: DuplicateTsStaticSiteInput!, clientMutationId: String, locale: String, enableLocaleFallback: Boolean = true): DuplicateTsStaticSiteResult

  """Delete TsStaticSite"""
  deleteTsStaticSite(input: DeleteTsStaticSiteInput!, clientMutationId: String): DeleteTsStaticSiteResult
  Klaviyo_getListMembers(input: GetListMembersInput, list_id: String!): [GetListMemberItem]

  """Queue a review invitation with Reviews.io"""
  queueReviewInvitation(name: String, email: String, orderId: String, products: [Reviews_ProductInput]): Reviews_PostResponse

  """Upsert my profile."""
  upsertMyProfile(name: String, bio: String, avatarId: String): Profile

  """Upsert my Stripe customer."""
  upsertMyCustomer(name: String, description: String, address: Stripe_CustomerAddressPropertyInput): Stripe_Customer

  """Delete a Stripe subscription"""
  deleteMySubscription(subscriptionId: String!): Stripe_Subscription

  """Create a Stripe checkout session."""
  createMyCheckoutSession(redirectUrl: String!, mode: String, lineItems: [Stripe_CheckoutSessionLineItemsPropertyInput!]!): Stripe_CheckoutSession

  """Update Profile"""
  updateProfile(input: UpdateProfileInput!, clientMutationId: String, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateProfileResult

  """Create Profile"""
  createProfile(input: CreateProfileInput!, clientMutationId: String): CreateProfileResult

  """Duplicate Profile"""
  duplicateProfile(input: DuplicateProfileInput!, clientMutationId: String, locale: String, enableLocaleFallback: Boolean = true): DuplicateProfileResult

  """Delete Profile"""
  deleteProfile(input: DeleteProfileInput!, clientMutationId: String): DeleteProfileResult
}

"""A project file stored on s3"""
type Upload {
  uploadUrl: ID
  asset: Asset
}

input TSFile {
  name: String!
  type: String!
}

type UpdateAssetResult {
  clientMutationId: String
  result: Asset
}

"""update Asset input"""
input UpdateAssetInput {
  _id: ID!
  title: String
  description: String
  filename: String
  caption: JSON
  credit: JSON
  path: String
  mimeType: String
  sourceUrl: String
  uploadStatus: String
  _shapeId: String
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
  s3Key: String
}

"""Describes a structural update to an array of data."""
input ContentStructureInput {
  """A deep path to the array being updated (e.g. a.b[1].c)."""
  path: String!

  """
  An array where the indices represent the to index, and the values represent the from index.For example to transform ["a","b","c","d"] into ["c","a"], this value would be [2,0].
  """
  structure: [Int]
}

type CreateAssetResult {
  clientMutationId: String
  result: Asset
}

"""create Asset input"""
input CreateAssetInput {
  title: String
  description: String
  filename: String!
  caption: JSON
  credit: JSON
  path: String!
  mimeType: String
  sourceUrl: String
  uploadStatus: String
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
  s3Key: String
}

type DuplicateAssetResult {
  clientMutationId: String
  result: Asset
}

"""duplicate Asset input"""
input DuplicateAssetInput {
  _id: ID!
  title: String
  description: String
  filename: String
  caption: JSON
  credit: JSON
  path: String
  mimeType: String
  sourceUrl: String
  uploadStatus: String
  _shapeId: String
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
  s3Key: String
}

type DeleteAssetResult {
  clientMutationId: String
  result: Boolean
}

"""delete Asset input"""
input DeleteAssetInput {
  _id: ID!
}

type UpdateTsStaticSiteResult {
  clientMutationId: String
  result: TsStaticSite
}

"""update TsStaticSite input"""
input UpdateTsStaticSiteInput {
  _id: ID!
  title: String
  baseUrl: String
  provider: String
  idKey: String
  secretKey: String
  destination: String
  privateAcl: Boolean
  environmentVariables: [TsStaticSiteEnvironmentVariablesInput]
  triggers: [TsStaticSiteTriggersInput]
  templateHash: String
  _shapeId: String
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

input TsStaticSiteEnvironmentVariablesInput {
  name: String
  value: String
}

input TsStaticSiteTriggersInput {
  contentTypeId: String
  status: String
}

type CreateTsStaticSiteResult {
  clientMutationId: String
  result: TsStaticSite
}

"""create TsStaticSite input"""
input CreateTsStaticSiteInput {
  title: String!
  baseUrl: String
  provider: String! = "s3"
  idKey: String
  secretKey: String
  destination: String!
  privateAcl: Boolean
  environmentVariables: [TsStaticSiteEnvironmentVariablesInput]
  triggers: [TsStaticSiteTriggersInput]
  templateHash: String
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

type DuplicateTsStaticSiteResult {
  clientMutationId: String
  result: TsStaticSite
}

"""duplicate TsStaticSite input"""
input DuplicateTsStaticSiteInput {
  _id: ID!
  title: String
  baseUrl: String
  provider: String
  idKey: String
  secretKey: String
  destination: String
  privateAcl: Boolean
  environmentVariables: [TsStaticSiteEnvironmentVariablesInput]
  triggers: [TsStaticSiteTriggersInput]
  templateHash: String
  _shapeId: String
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

type DeleteTsStaticSiteResult {
  clientMutationId: String
  result: Boolean
}

"""delete TsStaticSite input"""
input DeleteTsStaticSiteInput {
  _id: ID!
}

type GetListMemberItem {
  id: String
  created: String
  email: String
  push_token: String
  phone_number: String
}

input GetListMembersInput {
  emails: [String]
  phone_numbers: [String]
  push_tokens: [String]
}

type Reviews_PostResponse {
  status: String
  messages: [String]
}

input Reviews_ProductInput {
  name: String
  sku: String
  image: String
  pageUrl: String
  description: String
}

input Stripe_CustomerAddressPropertyInput {
  line1: String
  line2: String
  city: String
  country: String
  postal_code: String
  state: String
}

type Stripe_CheckoutSession {
  """Enables user redeemable promotion codes."""
  allow_promotion_codes: Boolean

  """Total of all items before discounts or taxes are applied."""
  amount_subtotal: Int

  """Total of all items after discounts and taxes are applied."""
  amount_total: Int
  automatic_tax: Stripe_PaymentPagesCheckoutSessionAutomaticTax

  """
  Describes whether Checkout should collect the customer's billing address.
  """
  billing_address_collection: Stripe_CheckoutSessionBillingAddressCollectionProperty

  """
  The URL the customer will be directed to if they decide to cancel payment and return to your website.
  """
  cancel_url: String

  """
  A unique string to reference the Checkout Session. This can be a
  customer ID, a cart ID, or similar, and can be used to reconcile the
  Session with your internal systems.
  """
  client_reference_id: String

  """
  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: String
  customer: Stripe_CheckoutSessionCustomerProperty
  customer_details: Stripe_PaymentPagesCheckoutSessionCustomerDetails

  """
  If provided, this value will be used when the Customer object is created.
  If not provided, customers will be asked to enter their email address.
  Use this parameter to prefill customer data if you already have an email
  on file. To access information about the customer once the payment flow is
  complete, use the `customer` attribute.
  """
  customer_email: String

  """
  Unique identifier for the object. Used to pass to `redirectToCheckout`
  in Stripe.js.
  """
  id: String

  """The line items purchased by the customer."""
  line_items: Stripe_CheckoutSessionLineItemsProperty

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used.
  """
  locale: Stripe_CheckoutSessionLocaleProperty

  """
  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSONObject

  """The mode of the Checkout Session."""
  mode: Stripe_CheckoutSessionModeProperty

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: Stripe_CheckoutSessionObjectProperty
  payment_intent: Stripe_CheckoutSessionPaymentIntentProperty
  payment_method_options: Stripe_CheckoutSessionPaymentMethodOptions

  """
  A list of the types of payment methods (e.g. card) this Checkout
  Session is allowed to accept.
  """
  payment_method_types: [String]

  """
  The payment status of the Checkout Session, one of `paid`, `unpaid`, or `no_payment_required`.
  You can use this value to decide when to fulfill your customer's order.
  """
  payment_status: Stripe_CheckoutSessionPaymentStatusProperty
  setup_intent: Stripe_CheckoutSessionSetupIntentProperty
  shipping: Stripe_Shipping
  shipping_address_collection: Stripe_PaymentPagesPaymentPageResourcesShippingAddressCollection

  """
  Describes the type of transaction being performed by Checkout in order to customize
  relevant text on the page, such as the submit button. `submit_type` can only be
  specified on Checkout Sessions in `payment` mode, but not Checkout Sessions
  in `subscription` or `setup` mode.
  """
  submit_type: Stripe_CheckoutSessionSubmitTypeProperty
  subscription: Stripe_CheckoutSessionSubscriptionProperty

  """
  The URL the customer will be directed to after the payment or
  subscription creation is successful.
  """
  success_url: String
  tax_id_collection: Stripe_PaymentPagesCheckoutSessionTaxIdCollection
  total_details: Stripe_PaymentPagesCheckoutSessionTotalDetails

  """The URL to the Checkout Session."""
  url: String
}

type Stripe_PaymentPagesCheckoutSessionAutomaticTax {
  """Indicates whether automatic tax is enabled for the session"""
  enabled: Boolean

  """
  The status of the most recent automated tax calculation for this session.
  """
  status: Stripe_PaymentPagesCheckoutSessionAutomaticTaxStatusProperty
}

enum Stripe_PaymentPagesCheckoutSessionAutomaticTaxStatusProperty {
  complete
  failed
  requires_location_inputs
}

enum Stripe_CheckoutSessionBillingAddressCollectionProperty {
  auto
  required
}

union Stripe_CheckoutSessionCustomerProperty = WrappedString | Stripe_Customer | Stripe_DeletedCustomer

type Stripe_PaymentPagesCheckoutSessionCustomerDetails {
  """The customer’s email at time of checkout."""
  email: String

  """The customer’s tax exempt status at time of checkout."""
  tax_exempt: Stripe_PaymentPagesCheckoutSessionCustomerDetailsTaxExemptProperty

  """The customer’s tax IDs at time of checkout."""
  tax_ids: [Stripe_PaymentPagesCheckoutSessionTaxId]
}

enum Stripe_PaymentPagesCheckoutSessionCustomerDetailsTaxExemptProperty {
  exempt
  none
  reverse
}

type Stripe_PaymentPagesCheckoutSessionTaxId {
  """
  The type of the tax ID, one of `eu_vat`, `br_cnpj`, `br_cpf`, `gb_vat`, `nz_gst`, `au_abn`, `in_gst`, `no_vat`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `li_uid`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, or `unknown`
  """
  type: Stripe_PaymentPagesCheckoutSessionTaxIdTypeProperty

  """The value of the tax ID."""
  value: String
}

enum Stripe_PaymentPagesCheckoutSessionTaxIdTypeProperty {
  ae_trn
  au_abn
  br_cnpj
  br_cpf
  ca_bn
  ca_gst_hst
  ca_pst_bc
  ca_pst_mb
  ca_pst_sk
  ca_qst
  ch_vat
  cl_tin
  es_cif
  eu_vat
  gb_vat
  hk_br
  id_npwp
  il_vat
  in_gst
  jp_cn
  jp_rn
  kr_brn
  li_uid
  mx_rfc
  my_frp
  my_itn
  my_sst
  no_vat
  nz_gst
  ru_inn
  ru_kpp
  sa_vat
  sg_gst
  sg_uen
  th_vat
  tw_vat
  unknown
  us_ein
  za_vat
}

"""The line items purchased by the customer."""
type Stripe_CheckoutSessionLineItemsProperty {
  """Details about each object."""
  data: [Stripe_Item!]!

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean!

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: Stripe_CheckoutSessionLineItemsObjectProperty!

  """The URL where this list can be accessed."""
  url: String!
}

enum Stripe_CheckoutSessionLineItemsObjectProperty {
  list
}

enum Stripe_CheckoutSessionLocaleProperty {
  auto
  bg
  cs
  da
  de
  el
  en
  enDASHGB
  es
  esDASH419
  et
  fi
  fr
  frDASHCA
  hr
  hu
  id
  it
  ja
  ko
  lt
  lv
  ms
  mt
  nb
  nl
  pl
  pt
  ptDASHBR
  ro
  ru
  sk
  sl
  sv
  th
  tr
  vi
  zh
  zhDASHHK
  zhDASHTW
}

enum Stripe_CheckoutSessionModeProperty {
  payment
  setup
  subscription
}

enum Stripe_CheckoutSessionObjectProperty {
  checkoutDOTsession
}

union Stripe_CheckoutSessionPaymentIntentProperty = WrappedString | Stripe_PaymentIntent

type Stripe_CheckoutSessionPaymentMethodOptions {
  acss_debit: Stripe_CheckoutAcssDebitPaymentMethodOptions
  boleto: Stripe_PaymentMethodOptionsBoleto
  oxxo: Stripe_PaymentMethodOptionsOxxo
}

type Stripe_CheckoutAcssDebitPaymentMethodOptions {
  """
  Currency supported by the bank account. Returned when the Session is in `setup` mode.
  """
  currency: Stripe_CheckoutAcssDebitPaymentMethodOptionsCurrencyProperty
  mandate_options: Stripe_CheckoutAcssDebitMandateOptions

  """Bank account verification method."""
  verification_method: Stripe_CheckoutAcssDebitPaymentMethodOptionsVerificationMethodProperty
}

enum Stripe_CheckoutAcssDebitPaymentMethodOptionsCurrencyProperty {
  cad
  usd
}

type Stripe_CheckoutAcssDebitMandateOptions {
  """A URL for custom mandate text"""
  custom_mandate_url: String

  """
  Description of the interval. Only required if 'payment_schedule' parmeter is 'interval' or 'combined'.
  """
  interval_description: String

  """Payment schedule for the mandate."""
  payment_schedule: Stripe_CheckoutAcssDebitMandateOptionsPaymentScheduleProperty

  """Transaction type of the mandate."""
  transaction_type: Stripe_CheckoutAcssDebitMandateOptionsTransactionTypeProperty
}

enum Stripe_CheckoutAcssDebitMandateOptionsPaymentScheduleProperty {
  combined
  interval
  sporadic
}

enum Stripe_CheckoutAcssDebitMandateOptionsTransactionTypeProperty {
  business
  personal
}

enum Stripe_CheckoutAcssDebitPaymentMethodOptionsVerificationMethodProperty {
  automatic
  instant
  microdeposits
}

enum Stripe_CheckoutSessionPaymentStatusProperty {
  no_payment_required
  paid
  unpaid
}

union Stripe_CheckoutSessionSetupIntentProperty = WrappedString | Stripe_SetupIntent

type Stripe_PaymentPagesPaymentPageResourcesShippingAddressCollection {
  """
  An array of two-letter ISO country codes representing which countries Checkout should provide as options for
  shipping locations. Unsupported country codes: `AS, CX, CC, CU, HM, IR, KP, MH, FM, NF, MP, PW, SD, SY, UM, VI`.
  """
  allowed_countries: [Stripe_PaymentPagesPaymentPageResourcesShippingAddressCollectionAllowedCountriesProperty]
}

enum Stripe_PaymentPagesPaymentPageResourcesShippingAddressCollectionAllowedCountriesProperty {
  AC
  AD
  AE
  AF
  AG
  AI
  AL
  AM
  AO
  AQ
  AR
  AT
  AU
  AW
  AX
  AZ
  BA
  BB
  BD
  BE
  BF
  BG
  BH
  BI
  BJ
  BL
  BM
  BN
  BO
  BQ
  BR
  BS
  BT
  BV
  BW
  BY
  BZ
  CA
  CD
  CF
  CG
  CH
  CI
  CK
  CL
  CM
  CN
  CO
  CR
  CV
  CW
  CY
  CZ
  DE
  DJ
  DK
  DM
  DO
  DZ
  EC
  EE
  EG
  EH
  ER
  ES
  ET
  FI
  FJ
  FK
  FO
  FR
  GA
  GB
  GD
  GE
  GF
  GG
  GH
  GI
  GL
  GM
  GN
  GP
  GQ
  GR
  GS
  GT
  GU
  GW
  GY
  HK
  HN
  HR
  HT
  HU
  ID
  IE
  IL
  IM
  IN
  IO
  IQ
  IS
  IT
  JE
  JM
  JO
  JP
  KE
  KG
  KH
  KI
  KM
  KN
  KR
  KW
  KY
  KZ
  LA
  LB
  LC
  LI
  LK
  LR
  LS
  LT
  LU
  LV
  LY
  MA
  MC
  MD
  ME
  MF
  MG
  MK
  ML
  MM
  MN
  MO
  MQ
  MR
  MS
  MT
  MU
  MV
  MW
  MX
  MY
  MZ
  NA
  NC
  NE
  NG
  NI
  NL
  NO
  NP
  NR
  NU
  NZ
  OM
  PA
  PE
  PF
  PG
  PH
  PK
  PL
  PM
  PN
  PR
  PS
  PT
  PY
  QA
  RE
  RO
  RS
  RU
  RW
  SA
  SB
  SC
  SE
  SG
  SH
  SI
  SJ
  SK
  SL
  SM
  SN
  SO
  SR
  SS
  ST
  SV
  SX
  SZ
  TA
  TC
  TD
  TF
  TG
  TH
  TJ
  TK
  TL
  TM
  TN
  TO
  TR
  TT
  TV
  TW
  TZ
  UA
  UG
  US
  UY
  UZ
  VA
  VC
  VE
  VG
  VN
  VU
  WF
  WS
  XK
  YE
  YT
  ZA
  ZM
  ZW
  ZZ
}

enum Stripe_CheckoutSessionSubmitTypeProperty {
  auto
  book
  donate
  pay
}

union Stripe_CheckoutSessionSubscriptionProperty = WrappedString | Stripe_Subscription

type Stripe_PaymentPagesCheckoutSessionTaxIdCollection {
  """Indicates whether tax ID collection is enabled for the session"""
  enabled: Boolean
}

type Stripe_PaymentPagesCheckoutSessionTotalDetails {
  """This is the sum of all the line item discounts."""
  amount_discount: Int

  """This is the sum of all the line item shipping amounts."""
  amount_shipping: Int

  """This is the sum of all the line item tax amounts."""
  amount_tax: Int
  breakdown: Stripe_PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown
}

type Stripe_PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown {
  """The aggregated line item discounts."""
  discounts: [Stripe_LineItemsDiscountAmount]

  """The aggregated line item tax amounts by rate."""
  taxes: [Stripe_LineItemsTaxAmount]
}

input Stripe_CheckoutSessionLineItemsPropertyInput {
  price: String
  quantity: Int
}

type UpdateProfileResult {
  clientMutationId: String
  result: Profile
}

"""update Profile input"""
input UpdateProfileInput {
  _id: ID!

  """"""
  id: String

  """"""
  name: String

  """"""
  email: String

  """"""
  bio: String

  """"""
  avatar: TSRelationshipInput

  """"""
  stripeCustomerId: String
  _shapeId: String
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

input TSRelationshipInput {
  shapeId: String
  shapeName: String
  contentTypeId: String
  id: String!
}

type CreateProfileResult {
  clientMutationId: String
  result: Profile
}

"""create Profile input"""
input CreateProfileInput {
  """"""
  id: String

  """"""
  name: String

  """"""
  email: String

  """"""
  bio: String

  """"""
  avatar: TSRelationshipInput

  """"""
  stripeCustomerId: String
  _shapeId: String
  _id: ID
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

type DuplicateProfileResult {
  clientMutationId: String
  result: Profile
}

"""duplicate Profile input"""
input DuplicateProfileInput {
  _id: ID!

  """"""
  id: String

  """"""
  name: String

  """"""
  email: String

  """"""
  bio: String

  """"""
  avatar: TSRelationshipInput

  """"""
  stripeCustomerId: String
  _shapeId: String
  _version: Int
  _shapeName: String
  _createdAt: String
  _createdBy: String
  _updatedAt: String
  _updatedBy: String
  _schemaVersion: Float
  _enabled: Boolean
  _enabledAt: String
  _status: DefaultWorkflow
  _contentTypeId: String
  _contentTypeName: String
}

type DeleteProfileResult {
  clientMutationId: String
  result: Boolean
}

"""delete Profile input"""
input DeleteProfileInput {
  _id: ID!
}