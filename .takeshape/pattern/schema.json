{
  "apiVersion": "2",
  "workflows": {},
  "forms": {
    "Profile": {
      "default": {
        "properties": {
          "id": {
            "widget": "singleLineText"
          },
          "name": {
            "widget": "singleLineText"
          },
          "email": {
            "widget": "singleLineText"
          },
          "bio": {
            "widget": "paragraphText"
          },
          "avatar": {
            "widget": "image"
          },
          "stripeCustomerId": {
            "widget": "singleLineText"
          }
        },
        "order": [
          "id",
          "name",
          "email",
          "bio",
          "avatar",
          "stripeCustomerId"
        ]
      }
    }
  },
  "services": {
    "auth-0": {
      "id": "auth-0",
      "provider": "auth0",
      "title": "auth0",
      "serviceType": "authentication",
      "authenticationType": "none",
      "options": {}
    },
    "stripe": {
      "id": "stripe",
      "provider": "stripe",
      "title": "Stripe",
      "namespace": "Stripe",
      "serviceType": "openapi",
      "authenticationType": "bearer",
      "options": {
        "endpoint": "https://api.stripe.com/",
        "spec": "https://raw.githubusercontent.com/stripe/openapi/master/openapi/spec3.json",
        "useRestfulNames": true
      }
    },
    "reviews-io": {
      "id": "reviews-io",
      "provider": "generic",
      "title": "Reviews.io",
      "namespace": "Reviews",
      "serviceType": "rest",
      "authenticationType": "searchParams",
      "options": {
        "endpoint": "https://api.reviews.io"
      }
    },
    "voucherify": {
      "id": "voucherify",
      "provider": "generic",
      "title": "Voucherify",
      "namespace": "Voucherify",
      "serviceType": "rest",
      "authenticationType": "bearer",
      "options": {
        "endpoint": "https://us1.api.voucherify.io/",
        "headers": {
          "X-App-Id": "7b3f5d07-ebc6-4fb9-a66f-3b94097cfc30"
        }
      }
    },
    "klaviyo": {
      "id": "klaviyo",
      "provider": "klaviyo",
      "title": "Klaviyo",
      "namespace": "Klaviyo",
      "serviceType": "openapi",
      "authenticationType": "searchParams",
      "options": {
        "endpoint": "https://a.klaviyo.com/api/",
        "spec": "https://klaviyo-openapi.s3.amazonaws.com/spec.json"
      }
    },
    "referral-candy": {
      "id": "referral-candy",
      "provider": "generic",
      "title": "Referral Candy",
      "namespace": "Referral",
      "serviceType": "rest",
      "authenticationType": "bearer",
      "options": {
        "endpoint": "https://my.referralcandy.com/api/v1/"
      }
    },
    "ship-engine": {
      "id": "ship-engine",
      "provider": "generic",
      "title": "Ship Engine",
      "namespace": "Shipping",
      "serviceType": "rest",
      "authenticationType": "bearer",
      "options": {
        "endpoint": "https://api.shipengine.com"
      }
    }
  },
  "indexedShapes": {
    "Stripe_Product": {
      "queries": {
        "list": {
          "name": "Stripe_listProducts",
          "pagination": {
            "type": "cursor",
            "cursorPath": "data[(@.length-1)].id",
            "itemsToIndexPath": "data",
            "hasMorePath": "has_more",
            "cursorArg": "starting_after",
            "pageSizeArg": "limit"
          }
        }
      },
      "triggers": [
        {
          "type": "schedule",
          "query": "list",
          "interval": 1640
        },
        {
          "query": "list",
          "type": "webhook",
          "service": "stripe",
          "events": [
            "product.updated",
            "product.created",
            "product.deleted"
          ]
        }
      ]
    }
  },
  "queries": {
    "getProductReviews": {
      "shape": "Reviews_ProductReviewsQueryResponse",
      "resolver": {
        "name": "rest:get",
        "service": "reviews-io",
        "path": "/product/review",
        "searchParams": {
          "ops": [
            {
              "path": "store",
              "value": "www.markcatalano.net"
            },
            {
              "path": "sku",
              "mapping": "$args.sku"
            }
          ]
        }
      },
      "description": "Get product reviews for an SKU from Reviews.io",
      "args": {
        "type": "object",
        "properties": {
          "sku": {
            "type": "string"
          }
        }
      }
    },
    "getIndexedProductList": {
      "shape": "PaginatedList<Stripe_Product>",
      "resolver": {
        "shapeName": "Stripe_Product",
        "name": "takeshape:queryApiIndex",
        "service": "takeshape:local",
        "options": {
          "indexedShape": "Stripe_Product"
        }
      },
      "description": "Get Stripe products from the TakeShape API Index",
      "args": "TSListArgs<Stripe_Product>"
    },
    "getMyProfile": {
      "shape": "Profile",
      "resolver": {
        "name": "takeshape:find",
        "service": "takeshape:local",
        "shapeName": "Profile",
        "args": {
          "ops": [
            {
              "path": "where.id.eq",
              "mapping": "$claims.sub"
            }
          ]
        }
      },
      "description": "Get the signed in user's profile from ShapeDB"
    },
    "getMySubscriptions": {
      "shape": {
        "type": "array",
        "items": {
          "@ref": "stripe:Subscription"
        }
      },
      "resolver": {
        "compose": [
          {
            "if": "!isEmpty($claims.sub)",
            "id": "profile",
            "name": "takeshape:find",
            "service": "takeshape:local",
            "shapeName": "Profile",
            "args": {
              "ops": [
                {
                  "path": "where.id.eq",
                  "mapping": "$claims.sub"
                }
              ]
            }
          },
          {
            "if": "!isEmpty($resolvers.profile.stripeCustomerId)",
            "id": "subscriptions",
            "name": "rest:get",
            "service": "stripe",
            "path": "/v1/subscriptions",
            "searchParams": {
              "ops": [
                {
                  "path": "customer",
                  "mapping": "$resolvers.profile.stripeCustomerId"
                },
                {
                  "path": "expand",
                  "mapping": "$args.expand"
                }
              ],
              "serialize": {
                "paths": {
                  "expand": {
                    "style": "deepObject"
                  }
                }
              }
            }
          }
        ],
        "results": {
          "ops": [
            {
              "path": "$",
              "mapping": "$resolvers.subscriptions.data"
            }
          ]
        }
      },
      "description": "Get the signed in user's subscriptions from Stripe",
      "args": {
        "type": "object",
        "properties": {
          "expand": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "getMyInvoices": {
      "shape": {
        "type": "array",
        "items": {
          "@ref": "stripe:Invoice"
        }
      },
      "resolver": {
        "compose": [
          {
            "if": "!isEmpty($claims.sub)",
            "id": "profile",
            "name": "takeshape:find",
            "service": "takeshape:local",
            "shapeName": "Profile",
            "args": {
              "ops": [
                {
                  "path": "where.id.eq",
                  "mapping": "$claims.sub"
                }
              ]
            }
          },
          {
            "if": "!isEmpty($resolvers.profile.stripeCustomerId)",
            "id": "invoices",
            "name": "rest:get",
            "service": "stripe",
            "path": "/v1/invoices",
            "searchParams": {
              "ops": [
                {
                  "path": "$",
                  "mapping": "$args"
                },
                {
                  "path": "customer",
                  "mapping": "$resolvers.profile.stripeCustomerId"
                }
              ],
              "serialize": {
                "defaults": {
                  "style": "deepObject",
                  "explode": true
                }
              }
            }
          }
        ],
        "results": {
          "ops": [
            {
              "path": "$",
              "mapping": "$resolvers.invoices.data"
            }
          ]
        }
      },
      "description": "Get the signed in user's invoices from Stripe",
      "args": {
        "type": "object",
        "properties": {
          "expand": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "open",
              "paid",
              "uncollectable",
              "void"
            ]
          },
          "limit": {
            "type": "number"
          },
          "created": {},
          "startingAfter": {
            "type": "string"
          }
        }
      }
    },
    "getMyPayments": {
      "shape": {
        "type": "array",
        "items": {
          "@ref": "stripe:PaymentIntent"
        }
      },
      "resolver": {
        "compose": [
          {
            "if": "!isEmpty($claims.sub)",
            "id": "profile",
            "name": "takeshape:find",
            "service": "takeshape:local",
            "shapeName": "Profile",
            "args": {
              "ops": [
                {
                  "path": "where.id.eq",
                  "mapping": "$claims.sub"
                }
              ]
            }
          },
          {
            "if": "!isEmpty($resolvers.profile.stripeCustomerId)",
            "id": "payments",
            "name": "rest:get",
            "service": "stripe",
            "path": "/v1/payment_intents",
            "searchParams": {
              "ops": [
                {
                  "path": "$",
                  "mapping": "$args"
                },
                {
                  "path": "starting_after",
                  "mapping": "$args.startingAfter"
                },
                {
                  "path": "ending_before",
                  "mapping": "$args.endingBefore"
                },
                {
                  "path": "customer",
                  "mapping": "$resolvers.profile.stripeCustomerId"
                }
              ],
              "serialize": {
                "defaults": {
                  "style": "deepObject",
                  "explode": true
                }
              }
            }
          }
        ],
        "results": {
          "ops": [
            {
              "path": "$",
              "mapping": [
                [
                  "get",
                  {
                    "path": "$resolvers.payments.data"
                  }
                ],
                [
                  "filter",
                  {
                    "predicate": [
                      "status",
                      "succeeded"
                    ]
                  }
                ]
              ]
            }
          ]
        }
      },
      "description": "Get the signed-in user's payments from Stripe",
      "args": {
        "type": "object",
        "properties": {
          "expand": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "limit": {
            "type": "number"
          },
          "created": {},
          "startingAfter": {
            "type": "string"
          },
          "endingBefore": {
            "type": "string"
          }
        }
      }
    },
    "getProfile": {
      "shape": "Profile",
      "resolver": {
        "name": "takeshape:get",
        "service": "takeshape:local",
        "shapeName": "Profile"
      },
      "description": "Get a profile by ID",
      "args": "TSGetArgs<Profile>"
    },
    "getProfileList": {
      "shape": "PaginatedList<Profile>",
      "resolver": {
        "name": "takeshape:list",
        "service": "takeshape:local",
        "shapeName": "Profile"
      },
      "description": "Returns a list of profiles in natural order.",
      "args": "TSListArgs<Profile>"
    },
    "Stripe_listProducts": {
      "shape": "Stripe_ListProductsResponse",
      "resolver": {
        "name": "rest:get",
        "service": "stripe",
        "path": "/v1/products",
        "searchParams": {
          "ops": [
            {
              "path": "active",
              "mapping": "$args.active"
            },
            {
              "path": "created",
              "mapping": "$args.created"
            },
            {
              "path": "ending_before",
              "mapping": "$args.ending_before"
            },
            {
              "path": "expand",
              "mapping": "$args.expand"
            },
            {
              "path": "ids",
              "mapping": "$args.ids"
            },
            {
              "path": "limit",
              "mapping": "$args.limit"
            },
            {
              "path": "shippable",
              "mapping": "$args.shippable"
            },
            {
              "path": "starting_after",
              "mapping": "$args.starting_after"
            },
            {
              "path": "url",
              "mapping": "$args.url"
            }
          ],
          "serialize": {
            "paths": {
              "active": {
                "style": "form"
              },
              "created": {
                "explode": true,
                "style": "deepObject"
              },
              "ending_before": {
                "style": "form"
              },
              "expand": {
                "explode": true,
                "style": "deepObject"
              },
              "ids": {
                "explode": true,
                "style": "deepObject"
              },
              "limit": {
                "style": "form"
              },
              "shippable": {
                "style": "form"
              },
              "starting_after": {
                "style": "form"
              },
              "url": {
                "style": "form"
              }
            }
          }
        }
      },
      "description": "<p>Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.</p>",
      "args": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "created": {},
          "ending_before": {
            "type": "string"
          },
          "expand": {
            "type": "array",
            "items": {
              "maxLength": 5000,
              "type": "string"
            }
          },
          "ids": {
            "type": "array",
            "items": {
              "maxLength": 5000,
              "type": "string"
            }
          },
          "limit": {
            "type": "integer"
          },
          "shippable": {
            "type": "boolean"
          },
          "starting_after": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": []
      }
    },
    "Stripe_getProduct": {
      "shape": "Stripe_Product",
      "resolver": {
        "name": "rest:get",
        "service": "stripe",
        "path": {
          "ops": [
            {
              "path": "id",
              "mapping": "$args.id"
            }
          ],
          "serialize": {
            "template": "/v1/products/{id}",
            "paths": {
              "id": {
                "style": "simple"
              }
            }
          }
        },
        "searchParams": {
          "ops": [
            {
              "path": "expand",
              "mapping": "$args.expand"
            }
          ],
          "serialize": {
            "paths": {
              "expand": {
                "explode": true,
                "style": "deepObject"
              }
            }
          }
        }
      },
      "description": "<p>Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.</p>",
      "args": {
        "type": "object",
        "properties": {
          "expand": {
            "type": "array",
            "items": {
              "maxLength": 5000,
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      }
    },
    "getMyLoyaltyCard": {
      "description": "Get a loyalty card from Voucherify",
      "shape": "local:Voucherify_LoyaltyCard",
      "resolver": {
        "compose": [
          {
            "if": "!isEmpty($claims.sub)",
            "shapeName": "Profile",
            "name": "takeshape:find",
            "service": "takeshape:local",
            "id": "profile",
            "args": {
              "ops": [
                {
                  "path": "where.id.eq",
                  "mapping": "$claims.sub"
                }
              ]
            }
          },
          {
            "if": "!isEmpty($resolvers.profile)",
            "id": "loyaltyCard",
            "name": "rest:post",
            "service": "voucherify",
            "path": {
              "ops": [
                {
                  "path": "campaignId",
                  "value": "camp_P4LtxxUSJyNCpRcq5XRmDCi5"
                }
              ],
              "serialize": {
                "template": "v1/loyalties/{campaignId}/members"
              }
            },
            "json": {
              "ops": [
                {
                  "path": "customer",
                  "ops": [
                    {
                      "path": "source_id",
                      "mapping": "$resolvers.profile.email"
                    },
                    {
                      "path": "email",
                      "mapping": "$resolvers.profile.email"
                    },
                    {
                      "path": "name",
                      "mapping": "$resolvers.profile.name"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "results": {
          "ops": [
            {
              "path": "$",
              "mapping": "$resolvers.loyaltyCard"
            }
          ]
        }
      }
    },
    "Klaviyo_getLists": {
      "shape": "Klaviyo_GetListsResponse",
      "resolver": {
        "name": "rest:get",
        "service": "klaviyo",
        "path": "/v2/lists",
        "results": {
          "ops": [
            {
              "path": "items",
              "mapping": "$resolvers[0]"
            }
          ]
        }
      },
      "summary": "Get Lists"
    }
  },
  "mutations": {
    "queueReviewInvitation": {
      "shape": "Reviews_PostResponse",
      "resolver": {
        "name": "rest:post",
        "service": "reviews-io",
        "path": "invitation",
        "searchParams": {
          "ops": [
            {
              "path": "store",
              "value": "www.markcatalano.net"
            }
          ]
        },
        "json": {
          "ops": [
            {
              "path": "name",
              "mapping": "$args.name"
            },
            {
              "path": "email",
              "mapping": "$args.email"
            },
            {
              "path": "order_id",
              "mapping": "$args.orderId"
            },
            {
              "path": "products",
              "mapping": "$args.products"
            },
            {
              "path": "template_id",
              "value": "47970"
            }
          ]
        }
      },
      "description": "Queue a review invitation with Reviews.io",
      "args": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "orderId": {
            "type": "string"
          },
          "products": {
            "type": "array",
            "items": {
              "@ref": "local:Reviews_Product"
            }
          }
        }
      }
    },
    "upsertMyProfile": {
      "description": "Upsert the signed-in user's profile, updating ShapeDB and Stripe",
      "shape": "Profile",
      "resolver": {
        "results": {
          "ops": [
            {
              "path": "$",
              "mapping": "$resolvers.createProfile.result"
            },
            {
              "path": "$",
              "mapping": "$resolvers.updateProfile.result"
            }
          ]
        },
        "compose": [
          {
            "if": "!isEmpty($claims.sub)",
            "id": "existingProfile",
            "name": "takeshape:find",
            "service": "takeshape:local",
            "shapeName": "Profile",
            "args": {
              "ops": [
                {
                  "path": "where.id.eq",
                  "mapping": "$claims.sub"
                }
              ]
            }
          },
          {
            "if": "!isEmpty($claims.email) && isEmpty($resolvers.existingProfile.stripeCustomerId)",
            "id": "existingCustomerByEmail",
            "name": "rest:get",
            "service": "stripe",
            "path": "/v1/customers",
            "searchParams": {
              "ops": [
                {
                  "path": "email",
                  "mapping": "$claims.email"
                }
              ]
            }
          },
          {
            "if": "!isEmpty($claims.email) && isEmpty($resolvers.existingProfile.stripeCustomerId) && isEmpty($resolvers.existingCustomerByEmail.data[0].id)",
            "id": "createCustomer",
            "name": "rest:post",
            "service": "stripe",
            "path": "/v1/customers",
            "form": {
              "ops": [
                {
                  "path": "email",
                  "mapping": "$claims.email"
                },
                {
                  "path": "name",
                  "mapping": "$args.name"
                }
              ],
              "serialize": {
                "defaults": {
                  "style": "deepObject",
                  "explode": true
                }
              }
            }
          },
          {
            "if": "!isEmpty($claims.sub) && (!isEmpty($resolvers.existingProfile.stripeCustomerId) || !isEmpty($resolvers.existingCustomerByEmail.data[0].id)) && isEmpty($resolvers.createCustomer)",
            "id": "updateCustomer",
            "name": "rest:post",
            "service": "stripe",
            "path": {
              "ops": [
                {
                  "path": "customer",
                  "mapping": [
                    [
                      "get",
                      {
                        "path": "$resolvers.existingCustomerByEmail.data[0].id"
                      }
                    ],
                    [
                      "get",
                      {
                        "path": "$resolvers.existingProfile.stripeCustomerId"
                      }
                    ]
                  ]
                }
              ],
              "serialize": {
                "template": "/v1/customers/{customer}"
              }
            },
            "form": {
              "ops": [
                {
                  "path": "email",
                  "mapping": "$claims.email"
                },
                {
                  "path": "name",
                  "mapping": "$args.name"
                }
              ],
              "serialize": {
                "defaults": {
                  "style": "deepObject",
                  "explode": true
                }
              }
            }
          },
          {
            "if": "!isEmpty($claims.sub) && !isEmpty($claims.email) && isEmpty($resolvers.existingProfile)",
            "id": "createProfile",
            "name": "takeshape:create",
            "service": "takeshape:local",
            "shapeName": "Profile",
            "args": {
              "ops": [
                {
                  "path": "input.id",
                  "mapping": "$claims.sub"
                },
                {
                  "path": "input.email",
                  "mapping": "$claims.email"
                },
                {
                  "path": "input.name",
                  "mapping": "$args.name"
                },
                {
                  "path": "input.bio",
                  "mapping": "$args.bio"
                },
                {
                  "path": "input.avatar.id",
                  "mapping": "$args.avatarId"
                },
                {
                  "path": "input.stripeCustomerId",
                  "mapping": [
                    [
                      "get",
                      {
                        "path": "$resolvers.existingCustomerByEmail.data[0].id"
                      }
                    ],
                    [
                      "get",
                      {
                        "path": "$resolvers.createCustomer.id"
                      }
                    ]
                  ]
                }
              ]
            }
          },
          {
            "if": "!isEmpty($claims.sub) && !isEmpty($claims.email) && !isEmpty($resolvers.existingProfile)",
            "id": "updateProfile",
            "name": "takeshape:update",
            "service": "takeshape:local",
            "shapeName": "Profile",
            "args": {
              "ops": [
                {
                  "path": "input._id",
                  "mapping": "$resolvers.existingProfile._id"
                },
                {
                  "path": "input.email",
                  "mapping": "$claims.email"
                },
                {
                  "path": "input.name",
                  "mapping": "$args.name"
                },
                {
                  "path": "input.bio",
                  "mapping": "$args.bio"
                },
                {
                  "path": "input.avatar.id",
                  "mapping": "$args.avatarId"
                },
                {
                  "path": "input.stripeCustomerId",
                  "mapping": [
                    [
                      "get",
                      {
                        "path": "$resolvers.existingProfile.stripeCustomerId"
                      }
                    ],
                    [
                      "get",
                      {
                        "path": "$resolvers.existingCustomerByEmail.data[0].id"
                      }
                    ],
                    [
                      "get",
                      {
                        "path": "$resolvers.createCustomer.id"
                      }
                    ]
                  ]
                }
              ]
            }
          }
        ]
      },
      "args": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "bio": {
            "type": "string"
          },
          "avatarId": {
            "type": "string"
          }
        }
      }
    },
    "upsertMyCustomer": {
      "description": "Upsert the signed-in user's Stripe customer",
      "shape": "stripe:Customer",
      "resolver": {
        "results": {
          "ops": [
            {
              "path": "$",
              "mapping": "$resolvers.updatedCustomer"
            }
          ]
        },
        "compose": [
          {
            "if": "!isEmpty($claims.sub)",
            "id": "existingProfile",
            "name": "takeshape:find",
            "service": "takeshape:local",
            "shapeName": "Profile",
            "args": {
              "ops": [
                {
                  "path": "where.id.eq",
                  "mapping": "$claims.sub"
                }
              ]
            }
          },
          {
            "if": "!isEmpty($claims.sub) && !isEmpty($claims.email) && isEmpty($resolvers.existingProfile.stripeCustomerId)",
            "id": "existingCustomerByEmail",
            "name": "rest:get",
            "service": "stripe",
            "path": "/v1/customers",
            "searchParams": {
              "ops": [
                {
                  "path": "email",
                  "mapping": "$claims.email"
                }
              ]
            }
          },
          {
            "if": "!isEmpty($claims.sub) && !isEmpty($claims.email) && !isEmpty($resolvers.existingProfile.stripeCustomerId)",
            "id": "existingCustomerById",
            "name": "rest:get",
            "service": "stripe",
            "path": {
              "ops": [
                {
                  "path": "customer",
                  "mapping": "$resolvers.existingProfile.stripeCustomerId"
                }
              ],
              "serialize": {
                "template": "/v1/customers/{customer}"
              }
            }
          },
          {
            "if": "!isEmpty($claims.sub) && !isEmpty($claims.email)",
            "id": "updatedCustomer",
            "name": "rest:post",
            "service": "stripe",
            "path": {
              "ops": [
                {
                  "path": "customer",
                  "mapping": "$resolvers.existingCustomerByEmail.data[0].id"
                },
                {
                  "path": "customer",
                  "mapping": "$resolvers.existingCustomerById.id"
                }
              ],
              "serialize": {
                "template": "/v1/customers/{customer}"
              }
            },
            "form": {
              "ops": [
                {
                  "path": "$",
                  "mapping": "$args"
                },
                {
                  "path": "email",
                  "mapping": "$claims.email"
                }
              ],
              "serialize": {
                "defaults": {
                  "style": "deepObject",
                  "explode": true
                }
              }
            }
          },
          {
            "if": "!isEmpty($claims.sub) && !isEmpty($resolvers.existingProfile) && isEmpty($resolvers.existingProfile.stripeCustomerId)",
            "id": "updatedProfile",
            "name": "takeshape:update",
            "service": "takeshape:local",
            "shapeName": "Profile",
            "args": {
              "ops": [
                {
                  "path": "input._id",
                  "mapping": "$resolvers.existingProfile._id"
                },
                {
                  "path": "input.stripeCustomerId",
                  "mapping": "$resolvers.updatedCustomer.id"
                }
              ]
            }
          }
        ]
      },
      "args": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "address": {
            "type": "object",
            "properties": {
              "line1": {
                "type": "string"
              },
              "line2": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "postal_code": {
                "type": "string"
              },
              "state": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "deleteMySubscription": {
      "description": "Delete the signed-in user's subscription in Stripe",
      "shape": "stripe:Subscription",
      "resolver": {
        "compose": [
          {
            "if": "!isEmpty($claims.sub)",
            "id": "existingProfile",
            "name": "takeshape:find",
            "service": "takeshape:local",
            "shapeName": "Profile",
            "args": {
              "ops": [
                {
                  "path": "where.id.eq",
                  "mapping": "$claims.sub"
                }
              ]
            }
          },
          {
            "if": "!isEmpty($claims.sub) && !isEmpty($resolvers.existingProfile.stripeCustomerId)",
            "id": "deleteSubscription",
            "name": "rest:delete",
            "service": "stripe",
            "path": {
              "ops": [
                {
                  "path": "subscriptionId",
                  "mapping": "$args.subscriptionId"
                }
              ],
              "serialize": {
                "template": "/v1/subscriptions/{subscriptionId}"
              }
            },
            "form": {
              "ops": [
                {
                  "path": "invoice_now",
                  "value": "true"
                }
              ]
            }
          }
        ]
      },
      "args": {
        "type": "object",
        "properties": {
          "subscriptionId": {
            "type": "string"
          }
        },
        "required": [
          "subscriptionId"
        ]
      }
    },
    "createMyCheckoutSession": {
      "description": "Create a Stripe checkout session for the signed-in user",
      "shape": "stripe:CheckoutSession",
      "resolver": {
        "compose": [
          {
            "if": "!isEmpty($claims.sub)",
            "id": "existingProfile",
            "name": "takeshape:find",
            "service": "takeshape:local",
            "shapeName": "Profile",
            "args": {
              "ops": [
                {
                  "path": "where.id.eq",
                  "mapping": "$claims.sub"
                }
              ]
            }
          },
          {
            "if": "!isEmpty($claims.sub) && !isEmpty($resolvers.existingProfile.stripeCustomerId)",
            "id": "createSubscription",
            "name": "rest:post",
            "service": "stripe",
            "path": "/v1/checkout/sessions",
            "form": {
              "ops": [
                {
                  "path": "customer",
                  "mapping": "$resolvers.existingProfile.stripeCustomerId"
                },
                {
                  "path": "line_items",
                  "mapping": "$args.lineItems"
                },
                {
                  "path": "cancel_url",
                  "mapping": [
                    [
                      "get",
                      {
                        "path": "$args.redirectUrl"
                      }
                    ],
                    [
                      "format",
                      {
                        "template": "%s?stripe_checkout_session_id={CHECKOUT_SESSION_ID}&stripe_checkout_action=canceled"
                      }
                    ]
                  ]
                },
                {
                  "path": "success_url",
                  "mapping": [
                    [
                      "get",
                      {
                        "path": "$args.redirectUrl"
                      }
                    ],
                    [
                      "format",
                      {
                        "template": "%s?stripe_checkout_session_id={CHECKOUT_SESSION_ID}&stripe_checkout_action=success"
                      }
                    ]
                  ]
                },
                {
                  "path": "payment_method_types[0]",
                  "value": "card"
                },
                {
                  "path": "mode",
                  "value": "payment"
                },
                {
                  "path": "mode",
                  "mapping": "$args.mode"
                }
              ],
              "serialize": {
                "defaults": {
                  "style": "deepObject",
                  "explode": true
                }
              }
            }
          }
        ]
      },
      "args": {
        "type": "object",
        "properties": {
          "redirectUrl": {
            "type": "string"
          },
          "mode": {
            "type": "string",
            "enum": [
              "payment",
              "subscription",
              "setup"
            ]
          },
          "lineItems": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "price": {
                  "type": "string"
                },
                "quantity": {
                  "type": "integer"
                }
              }
            }
          }
        },
        "required": [
          "lineItems",
          "redirectUrl"
        ]
      }
    },
    "updateProfile": {
      "shape": "UpdateResult<Profile>",
      "resolver": {
        "name": "takeshape:update",
        "service": "takeshape:local",
        "shapeName": "Profile"
      },
      "description": "Update Profile",
      "args": "UpdateArgs<Profile>"
    },
    "createProfile": {
      "shape": "CreateResult<Profile>",
      "resolver": {
        "name": "takeshape:create",
        "service": "takeshape:local",
        "shapeName": "Profile"
      },
      "description": "Create Profile",
      "args": "CreateArgs<Profile>"
    },
    "duplicateProfile": {
      "shape": "DuplicateResult<Profile>",
      "resolver": {
        "name": "takeshape:duplicate",
        "service": "takeshape:local",
        "shapeName": "Profile"
      },
      "description": "Duplicate Profile",
      "args": "DuplicateArgs<Profile>"
    },
    "deleteProfile": {
      "shape": "DeleteResult<Profile>",
      "resolver": {
        "name": "takeshape:delete",
        "service": "takeshape:local",
        "shapeName": "Profile"
      },
      "description": "Delete Profile",
      "args": "DeleteArgs<Profile>"
    },
    "Voucherify_createOrder": {
      "description": "Create an order in Voucherify",
      "shape": "Voucherify_Order",
      "args": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "PAID",
              "CREATED",
              "CANCELED",
              "FULFILLED"
            ]
          },
          "items": {
            "type": "array",
            "items": {
              "@ref": "local:Voucherify_OrderItem"
            }
          }
        }
      },
      "resolver": {
        "name": "rest:post",
        "service": "voucherify",
        "path": "v1/orders",
        "json": {
          "ops": [
            {
              "path": "customer.source_id",
              "mapping": "$args.email"
            },
            {
              "path": "status",
              "mapping": "$args.status"
            },
            {
              "path": "amount",
              "mapping": "$args.amount"
            },
            {
              "path": "items",
              "mapping": "$args.items"
            },
            {
              "path": "items[*]",
              "ops": [
                {
                  "path": "product_id",
                  "mapping": [
                    [
                      "get",
                      {
                        "path": "$parent.$value.id"
                      }
                    ]
                  ]
                },
                {
                  "path": "product",
                  "ops": [
                    {
                      "path": "override",
                      "value": true
                    },
                    {
                      "path": "name",
                      "mapping": "$parent.$parent.$value.name"
                    }
                  ]
                }
              ]
            },
            {
              "path": "items[*].id",
              "op": "remove"
            },
            {
              "path": "items[*].name",
              "op": "remove"
            }
          ]
        }
      }
    },
    "Klaviyo_getListMembers": {
      "shape": {
        "type": "array",
        "items": {
          "@ref": "local:GetListMemberItem"
        }
      },
      "resolver": {
        "name": "rest:post",
        "service": "klaviyo",
        "path": {
          "ops": [
            {
              "path": "list_id",
              "mapping": "$args.list_id"
            }
          ],
          "serialize": {
            "template": "/v2/list/{list_id}/get-members",
            "paths": {
              "list_id": {
                "style": "simple"
              }
            }
          }
        },
        "body": {
          "ops": [
            {
              "path": "$",
              "mapping": "$args.input"
            }
          ],
          "serialize": {
            "content": {
              "contentType": "application/json"
            }
          }
        },
        "headers": {
          "ops": [
            {
              "path": "content-type",
              "value": "application/json"
            }
          ]
        }
      },
      "summary": "Check if Profiles Are in a List",
      "args": {
        "type": "object",
        "properties": {
          "input": {
            "@ref": "local:GetListMembersInput"
          },
          "list_id": {
            "type": "string"
          }
        },
        "required": [
          "list_id"
        ]
      }
    },
    "Klaviyo_addMembers": {
      "shape": "Klaviyo_AddMembersResponse",
      "resolver": {
        "name": "rest:post",
        "service": "klaviyo",
        "path": {
          "ops": [
            {
              "path": "list_id",
              "mapping": "$args.list_id"
            }
          ],
          "serialize": {
            "template": "/v2/list/{list_id}/members",
            "paths": {
              "list_id": {
                "style": "simple"
              }
            }
          }
        },
        "body": {
          "ops": [
            {
              "path": "$",
              "mapping": "$args.input"
            }
          ],
          "serialize": {
            "content": {
              "contentType": "application/json"
            }
          }
        },
        "headers": {
          "ops": [
            {
              "path": "content-type",
              "value": "application/json"
            }
          ]
        },
        "results": {
          "ops": [
            {
              "path": "items",
              "mapping": "$resolvers[0]"
            }
          ]
        }
      },
      "summary": "Add Members to a List",
      "args": {
        "type": "object",
        "properties": {
          "input": {
            "@ref": "local:AddListMembersInput"
          },
          "list_id": {
            "type": "string"
          }
        },
        "required": [
          "list_id"
        ]
      }
    },
    "Klaviyo_removeMembers": {
      "shape": "Klaviyo_200Ok",
      "resolver": {
        "name": "rest:delete",
        "service": "klaviyo",
        "path": {
          "ops": [
            {
              "path": "list_id",
              "mapping": "$args.list_id"
            }
          ],
          "serialize": {
            "template": "/v2/list/{list_id}/members",
            "paths": {
              "list_id": {
                "style": "simple"
              }
            }
          }
        },
        "body": {
          "ops": [
            {
              "path": "$",
              "mapping": "$args.input"
            }
          ],
          "serialize": {
            "content": {
              "contentType": "application/json"
            }
          }
        },
        "headers": {
          "ops": [
            {
              "path": "content-type",
              "value": "application/json"
            }
          ]
        }
      },
      "summary": "Remove Profiles From List",
      "args": {
        "type": "object",
        "properties": {
          "input": {
            "description": "\nThe profiles that you would like to remove from the list. \n\nExample:\n\n{\n  \"emails\":[\"george.washington@klaviyo.com\",\"abraham.lincoln@klaviyo.com\"],\n  \"phone_numbers\":[\"+13239169023\"],\n  \"push_tokens\":[\"03df25c845d460bcdad7802d2vf6fc1dfde97283bf75cc993eb6dca835ea2e2r\"]\n}\n",
            "properties": {
              "emails": {
                "minItems": 0,
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "phone_numbers": {
                "minItems": 0,
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "push_tokens": {
                "minItems": 0,
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "list_id": {
            "type": "string"
          }
        },
        "required": [
          "list_id"
        ]
      }
    }
  },
  "shapes": {
    "Reviews_PostResponse": {
      "id": "Reviews_PostResponse",
      "name": "Reviews_PostResponse",
      "title": "Reviews_PostResponse",
      "schema": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "messages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "Reviews_ProductReviewer": {
      "id": "Reviews_ProductReviewer",
      "name": "Reviews_ProductReviewer",
      "title": "Reviews_ProductReviewer",
      "schema": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "verified_buyer": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "profile_picture": {
            "type": "string"
          },
          "gravatar": {
            "type": "string"
          }
        }
      }
    },
    "Reviews_ProductReview": {
      "id": "Reviews_ProductReview",
      "name": "Reviews_ProductReview",
      "title": "Reviews_ProductReview",
      "schema": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "product_review_id": {
            "type": "integer"
          },
          "review": {
            "type": "string"
          },
          "sku": {
            "type": "string"
          },
          "rating": {
            "type": "integer"
          },
          "date_created": {
            "type": "string"
          },
          "order_id": {
            "type": "string"
          },
          "reviewer": {
            "@ref": "local:Reviews_ProductReviewer"
          },
          "timeago": {
            "type": "string"
          }
        }
      }
    },
    "Reviews_ProductReviews": {
      "id": "Reviews_ProductReviews",
      "name": "Reviews_ProductReviews",
      "title": "Reviews_ProductReviews",
      "schema": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "per_page": {
            "type": "integer"
          },
          "current_page": {
            "type": "integer"
          },
          "last_page": {
            "type": "integer"
          },
          "from": {
            "type": "integer"
          },
          "to": {
            "type": "integer"
          },
          "data": {
            "type": "array",
            "items": {
              "@ref": "local:Reviews_ProductReview"
            }
          }
        }
      }
    },
    "Reviews_Store": {
      "id": "Reviews_Store",
      "name": "Reviews_Store",
      "title": "Reviews_Store",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "logo": {
            "type": "string"
          }
        }
      }
    },
    "Reviews_Product": {
      "id": "Reviews_Product",
      "name": "Reviews_Product",
      "title": "Reviews_Product",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "sku": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "pageUrl": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      }
    },
    "Reviews_Stats": {
      "id": "Reviews_Stats",
      "name": "Reviews_Stats",
      "title": "Reviews_Stats",
      "schema": {
        "type": "object",
        "properties": {
          "average": {
            "type": "string"
          },
          "count": {
            "type": "integer"
          }
        }
      }
    },
    "Reviews_ProductReviewsQueryResponse": {
      "id": "Reviews_ProductReviewsQueryResponse",
      "name": "Reviews_ProductReviewsQueryResponse",
      "title": "Reviews_ProductReviewsQueryResponse",
      "schema": {
        "type": "object",
        "properties": {
          "reviews": {
            "@ref": "local:Reviews_ProductReviews"
          },
          "store": {
            "@ref": "local:Reviews_Store"
          },
          "stats": {
            "@ref": "local:Reviews_Stats"
          },
          "word": {
            "type": "string"
          },
          "write_review_link": {
            "type": "string"
          }
        }
      }
    },
    "Voucherify_OrderItem": {
      "id": "Voucherify_OrderItem",
      "name": "Voucherify_OrderItem",
      "title": "Voucherify_OrderItem",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "quantity": {
            "type": "integer"
          },
          "price": {
            "type": "integer"
          }
        }
      }
    },
    "Voucherify_Order": {
      "id": "Voucherify_Order",
      "name": "Voucherify_Order",
      "title": "Voucherify_Order",
      "schema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      }
    },
    "Voucherify_LoyaltyCardStats": {
      "id": "Voucherify_LoyaltyCardStats",
      "name": "Voucherify_LoyaltyCardStats",
      "title": "Voucherify_LoyaltyCardStats",
      "schema": {
        "type": "object",
        "properties": {
          "points": {
            "type": "integer"
          },
          "balance": {
            "type": "integer"
          }
        }
      }
    },
    "Voucherify_LoyaltyCardAsset": {
      "id": "Voucherify_LoyaltyCardAsset",
      "name": "Voucherify_LoyaltyCardAsset",
      "title": "Voucherify_LoyaltyCardAsset",
      "schema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      }
    },
    "Voucherify_LoyaltyCardAssets": {
      "id": "Voucherify_LoyaltyCardAssets",
      "name": "Voucherify_LoyaltyCardAssets",
      "title": "Voucherify_LoyaltyCardAssets",
      "schema": {
        "type": "object",
        "properties": {
          "qr": {
            "@ref": "local:Voucherify_LoyaltyCardAsset"
          },
          "barcode": {
            "@ref": "local:Voucherify_LoyaltyCardAsset"
          }
        }
      }
    },
    "Voucherify_LoyaltyCard": {
      "id": "Voucherify_LoyaltyCard",
      "name": "Voucherify_LoyaltyCard",
      "title": "Voucherify_LoyaltyCard",
      "schema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "campaign": {
            "type": "string"
          },
          "campaign_id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "loyalty_card": {
            "@ref": "local:Voucherify_LoyaltyCardStats"
          },
          "active": {
            "type": "boolean"
          },
          "assets": {
            "@ref": "local:Voucherify_LoyaltyCardAssets"
          }
        }
      }
    },
    "Stripe_Product": {
      "id": "Stripe_Product",
      "name": "Stripe_Product",
      "title": "Stripe_Product",
      "schema": {
        "extends": [
          {
            "@ref": "stripe:Product"
          },
          {
            "type": "object",
            "properties": {
              "prices": {
                "type": "array",
                "items": {
                  "@ref": "stripe:Price"
                },
                "@resolver": {
                  "name": "rest:get",
                  "service": "stripe",
                  "path": "/v1/prices",
                  "searchParams": {
                    "ops": [
                      {
                        "path": "active",
                        "value": "true"
                      },
                      {
                        "path": "product",
                        "mapping": "$source.id"
                      }
                    ]
                  },
                  "results": {
                    "ops": [
                      {
                        "path": "$",
                        "mapping": "$finalResolver.data"
                      }
                    ]
                  }
                }
              },
              "reviews": {
                "@ref": "local:Reviews_ProductReviewsQueryResponse",
                "@resolver": {
                  "name": "rest:get",
                  "service": "reviews-io",
                  "path": "/product/review",
                  "searchParams": {
                    "ops": [
                      {
                        "path": "store",
                        "value": "www.markcatalano.net"
                      },
                      {
                        "path": "sku",
                        "mapping": "$source.id"
                      }
                    ]
                  }
                }
              }
            }
          }
        ]
      }
    },
    "Stripe_Price": {
      "id": "Stripe_Price",
      "name": "Stripe_Price",
      "title": "Stripe_Price",
      "schema": {
        "extends": [
          {
            "@ref": "stripe:Price"
          },
          {
            "type": "object",
            "properties": {
              "recurring": {
                "@ref": "stripe:Recurring"
              },
              "product": {
                "description": "The Stripe product associated with this subscription.",
                "title": "Stripe Product",
                "@ref": "stripe:Product",
                "@resolver": {
                  "name": "rest:get",
                  "service": "stripe",
                  "options": {
                    "ignoreErrors": true
                  },
                  "path": {
                    "ops": [
                      {
                        "path": "product",
                        "mapping": "$source.product"
                      }
                    ],
                    "serialize": {
                      "template": "/v1/products/{product}"
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "Profile": {
      "id": "K1WGTS1Yn",
      "name": "Profile",
      "title": "Profile",
      "workflow": "default",
      "model": {
        "type": "multiple"
      },
      "schema": {
        "type": "object",
        "properties": {
          "id": {
            "minLength": 0,
            "type": "string",
            "description": "",
            "title": "ID",
            "@mapping": "takeshape:local:Profile.zCUrxUP8h"
          },
          "name": {
            "minLength": 0,
            "type": "string",
            "description": "",
            "title": "Name",
            "@mapping": "takeshape:local:Profile.-DrKuNqxZ"
          },
          "email": {
            "minLength": 0,
            "type": "string",
            "description": "",
            "title": "Email",
            "@mapping": "takeshape:local:Profile.H8n0k9-ew"
          },
          "bio": {
            "minLength": 0,
            "type": "string",
            "description": "",
            "title": "Bio",
            "@mapping": "takeshape:local:Profile.2nWp5by8j"
          },
          "avatar": {
            "description": "",
            "$ref": "#/shapes/TSRelationship/schema",
            "@relationship": {
              "shapeIds": [
                "ASSET"
              ]
            },
            "title": "Avatar",
            "@mapping": "takeshape:local:Profile.k0Ha4O7oV"
          },
          "stripeCustomerId": {
            "type": "string",
            "minLength": 0,
            "description": "",
            "title": "Stripe Customer ID",
            "@mapping": "takeshape:local:Profile.Z8JJPxO0B"
          },
          "stripeCustomer": {
            "title": "Stripe Customer",
            "description": "",
            "@ref": "stripe:Customer",
            "@resolver": {
              "name": "rest:get",
              "service": "stripe",
              "options": {
                "ignoreErrors": true
              },
              "path": {
                "ops": [
                  {
                    "path": "customer",
                    "mapping": "$source.stripeCustomerId"
                  }
                ],
                "serialize": {
                  "template": "/v1/customers/{customer}"
                }
              }
            }
          },
          "loyaltyCard": {
            "title": "Voucherify Loyalty Card",
            "description": "",
            "@ref": "local:Voucherify_LoyaltyCard",
            "@resolver": {
              "options": {
                "ignoreErrors": true
              },
              "name": "rest:post",
              "service": "voucherify",
              "path": {
                "ops": [
                  {
                    "path": "campaignId",
                    "value": "camp_P4LtxxUSJyNCpRcq5XRmDCi5"
                  }
                ],
                "serialize": {
                  "template": "v1/loyalties/{campaignId}/members"
                }
              },
              "json": {
                "ops": [
                  {
                    "path": "customer",
                    "ops": [
                      {
                        "path": "source_id",
                        "mapping": "$source.email"
                      },
                      {
                        "path": "email",
                        "mapping": "$source.email"
                      },
                      {
                        "path": "name",
                        "mapping": "$source.name"
                      }
                    ]
                  }
                ]
              }
            }
          },
          "orders": {
            "title": "Orders",
            "description": "",
            "type": "array",
            "items": {
              "@ref": "stripe:Invoice"
            },
            "@resolver": {
              "if": "!isEmpty($source.stripeCustomerId)",
              "id": "invoices",
              "name": "rest:get",
              "service": "stripe",
              "path": "/v1/invoices",
              "searchParams": {
                "ops": [
                  {
                    "path": "$",
                    "mapping": "$args"
                  },
                  {
                    "path": "customer",
                    "mapping": "$source.stripeCustomerId"
                  }
                ],
                "serialize": {
                  "defaults": {
                    "style": "deepObject",
                    "explode": true
                  }
                }
              },
              "results": {
                "ops": [
                  {
                    "path": "$",
                    "mapping": "$resolvers.invoices.data"
                  }
                ]
              }
            }
          },
          "newsletters": {
            "title": "Newsletter Subscriptions",
            "description": "",
            "type": "array",
            "items": {
              "@ref": "local:ProfileNewsletterStatus"
            },
            "@resolver": {
              "name": "rest:get",
              "id": "lists",
              "service": "klaviyo",
              "path": "/v2/lists",
              "results": {
                "ops": [
                  {
                    "path": "$",
                    "mapping": "$resolvers[0]"
                  },
                  {
                    "path": "[*].email",
                    "mapping": "$source.email"
                  },
                  {
                    "path": "[*].listId",
                    "mapping": "$loop.item.list_id"
                  },
                  {
                    "path": "[*].listName",
                    "mapping": "$loop.item.list_name"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "ProfileNewsletterStatus": {
      "id": "ProfileNewsletterStatus",
      "name": "ProfileNewsletterStatus",
      "title": "ProfileNewsletterStatus",
      "schema": {
        "type": "object",
        "properties": {
          "listId": {
            "type": "string",
            "description": "",
            "title": "List ID"
          },
          "listName": {
            "type": "string",
            "description": "",
            "title": "List Name"
          },
          "subscribed": {
            "type": "boolean",
            "description": "",
            "title": "Subscribed",
            "@resolver": {
              "name": "rest:post",
              "service": "klaviyo",
              "path": {
                "ops": [
                  {
                    "path": "list_id",
                    "mapping": "$source.listId"
                  }
                ],
                "serialize": {
                  "template": "/v2/list/{list_id}/get-members"
                }
              },
              "json": {
                "ops": [
                  {
                    "path": "$.emails[0]",
                    "mapping": "$source.email"
                  }
                ]
              },
              "results": {
                "ops": [
                  {
                    "path": "$",
                    "mapping": [
                      [
                        "expressionEval",
                        {
                          "expression": "$resolvers[0].length > 0"
                        }
                      ]
                    ]
                  }
                ]
              }
            }
          }
        }
      }
    },
    "GetListMembersInput": {
      "name": "GetListMembersInput",
      "id": "GetListMembersInput",
      "title": "GetListMembersInput",
      "schema": {
        "type": "object",
        "description": "\nThe profiles that you would like to remove from the list. \n\nExample:\n\n{\n  \"emails\":[\"george.washington@klaviyo.com\",\"abraham.lincoln@klaviyo.com\"],\n  \"phone_numbers\":[\"+13239169023\"],\n  \"push_tokens\":[\"03df25c845d460bcdad7802d2vf6fc1dfde97283bf75cc993eb6dca835ea2e2r\"]\n}\n",
        "properties": {
          "emails": {
            "minItems": 0,
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "phone_numbers": {
            "minItems": 0,
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "push_tokens": {
            "minItems": 0,
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      }
    },
    "GetListMemberItem": {
      "name": "GetListMemberItem",
      "title": "GetListMemberItem",
      "id": "GetListMemberItem",
      "schema": {
        "type": "object",
        "description": "\nThe profiles that you would like to remove from the list. \n\nExample:\n\n{\n  \"emails\":[\"george.washington@klaviyo.com\",\"abraham.lincoln@klaviyo.com\"],\n  \"phone_numbers\":[\"+13239169023\"],\n  \"push_tokens\":[\"03df25c845d460bcdad7802d2vf6fc1dfde97283bf75cc993eb6dca835ea2e2r\"]\n}\n",
        "properties": {
          "id": {
            "type": "string"
          },
          "created": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "push_token": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          }
        }
      }
    },
    "AddListMembersInput": {
      "name": "AddListMembersInput",
      "title": "AddListMembersInput",
      "id": "AddListMembersInput",
      "schema": {
        "description": "The profiles that you would like to add to the list. Each object in the array must have an `email` or `phone_number`. You can also provide additional properties as key-value pairs.",
        "properties": {
          "profiles": {
            "minItems": 0,
            "maxItems": 100,
            "items": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                }
              }
            },
            "type": "array"
          }
        },
        "required": [
          "profiles"
        ],
        "type": "object"
      }
    }
  },
  "schemaVersion": "3.17.0"
}
